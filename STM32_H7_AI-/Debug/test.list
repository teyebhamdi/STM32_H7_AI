
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001051c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019a8  080107c0  080107c0  000207c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012168  08012168  00022168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012170  08012170  00022170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012174  08012174  00022174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000964  24000000  08012178  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000964  08012adc  00030964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240009c4  08012b3c  000309c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c8  24000a40  08012b9c  00030a40  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20000000  20000000  00040000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030a24  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030a52  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021552  00000000  00000000  00030a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000452f  00000000  00000000  00051fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  00056518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa0  00000000  00000000  000579b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c284  00000000  00000000  00058958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd9d  00000000  00000000  00094bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016ca6a  00000000  00000000  000b2979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006678  00000000  00000000  0021f3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00225a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000a40 	.word	0x24000a40
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080107a4 	.word	0x080107a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000a44 	.word	0x24000a44
 80002dc:	080107a4 	.word	0x080107a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000692:	4b3a      	ldr	r3, [pc, #232]	; (800077c <main+0xf0>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d11b      	bne.n	80006d6 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800069e:	f3bf 8f4f 	dsb	sy
}
 80006a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a4:	f3bf 8f6f 	isb	sy
}
 80006a8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006aa:	4b34      	ldr	r3, [pc, #208]	; (800077c <main+0xf0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b8:	f3bf 8f6f 	isb	sy
}
 80006bc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006be:	4b2f      	ldr	r3, [pc, #188]	; (800077c <main+0xf0>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a2e      	ldr	r2, [pc, #184]	; (800077c <main+0xf0>)
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	e000      	b.n	80006d8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006d6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <main+0xf0>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d138      	bne.n	8000756 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <main+0xf0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006ec:	f3bf 8f4f 	dsb	sy
}
 80006f0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <main+0xf0>)
 80006f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006f8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000702:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800070c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	015a      	lsls	r2, r3, #5
 8000712:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000716:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071c:	4917      	ldr	r1, [pc, #92]	; (800077c <main+0xf0>)
 800071e:	4313      	orrs	r3, r2
 8000720:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1ef      	bne.n	800070e <main+0x82>
    } while(sets-- != 0U);
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1e5      	bne.n	8000704 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000738:	f3bf 8f4f 	dsb	sy
}
 800073c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <main+0xf0>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <main+0xf0>)
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000750:	f3bf 8f6f 	isb	sy
}
 8000754:	e000      	b.n	8000758 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000756:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fcaa 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f810 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 f956 	bl	8000a10 <MX_GPIO_Init>
  MX_ETH_Init();
 8000764:	f000 f8bc 	bl	80008e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000768:	f000 f906 	bl	8000978 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800076c:	f00a f9ac 	bl	800aac8 <MX_USB_DEVICE_Init>
  MX_X_CUBE_AI_Init();
 8000770:	f00b f856 	bl	800b820 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000774:	f00b f864 	bl	800b840 <MX_X_CUBE_AI_Process>
 8000778:	e7fc      	b.n	8000774 <main+0xe8>
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09e      	sub	sp, #120	; 0x78
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800078a:	224c      	movs	r2, #76	; 0x4c
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f00d ff97 	bl	800e6c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2220      	movs	r2, #32
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f00d ff90 	bl	800e6c2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a2:	2002      	movs	r0, #2
 80007a4:	f002 ff06 	bl	80035b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b49      	ldr	r3, [pc, #292]	; (80008d4 <SystemClock_Config+0x154>)
 80007ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b0:	4a48      	ldr	r2, [pc, #288]	; (80008d4 <SystemClock_Config+0x154>)
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007b8:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <SystemClock_Config+0x154>)
 80007ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b45      	ldr	r3, [pc, #276]	; (80008d8 <SystemClock_Config+0x158>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a44      	ldr	r2, [pc, #272]	; (80008d8 <SystemClock_Config+0x158>)
 80007c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b42      	ldr	r3, [pc, #264]	; (80008d8 <SystemClock_Config+0x158>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007da:	bf00      	nop
 80007dc:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <SystemClock_Config+0x158>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e8:	d1f8      	bne.n	80007dc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b3c      	ldr	r3, [pc, #240]	; (80008dc <SystemClock_Config+0x15c>)
 80007ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007f0:	4a3a      	ldr	r2, [pc, #232]	; (80008dc <SystemClock_Config+0x15c>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007fa:	4b38      	ldr	r3, [pc, #224]	; (80008dc <SystemClock_Config+0x15c>)
 80007fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <SystemClock_Config+0x158>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a31      	ldr	r2, [pc, #196]	; (80008d8 <SystemClock_Config+0x158>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <SystemClock_Config+0x158>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <SystemClock_Config+0x154>)
 8000824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000826:	4a2b      	ldr	r2, [pc, #172]	; (80008d4 <SystemClock_Config+0x154>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <SystemClock_Config+0x154>)
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083a:	bf00      	nop
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <SystemClock_Config+0x158>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000848:	d1f8      	bne.n	800083c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084a:	2301      	movs	r3, #1
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800084e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000854:	2302      	movs	r3, #2
 8000856:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000858:	2302      	movs	r3, #2
 800085a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800085c:	2304      	movs	r3, #4
 800085e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 480;
 8000860:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000864:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800086a:	2314      	movs	r3, #20
 800086c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000872:	2304      	movs	r3, #4
 8000874:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000876:	2300      	movs	r3, #0
 8000878:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fee0 	bl	8003648 <HAL_RCC_OscConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x112>
  {
    Error_Handler();
 800088e:	f000 f99b 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	233f      	movs	r3, #63	; 0x3f
 8000894:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2303      	movs	r3, #3
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800089e:	2308      	movs	r3, #8
 80008a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b0:	2340      	movs	r3, #64	; 0x40
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2104      	movs	r1, #4
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 fb1e 	bl	8003efc <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80008c6:	f000 f97f 	bl	8000bc8 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3778      	adds	r7, #120	; 0x78
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	58000400 	.word	0x58000400
 80008d8:	58024800 	.word	0x58024800
 80008dc:	58024400 	.word	0x58024400

080008e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_ETH_Init+0x80>)
 80008e6:	4a1f      	ldr	r2, [pc, #124]	; (8000964 <MX_ETH_Init+0x84>)
 80008e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_ETH_Init+0x88>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_ETH_Init+0x88>)
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_ETH_Init+0x88>)
 80008f8:	22e1      	movs	r2, #225	; 0xe1
 80008fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_ETH_Init+0x88>)
 80008fe:	2200      	movs	r2, #0
 8000900:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_ETH_Init+0x88>)
 8000904:	2200      	movs	r2, #0
 8000906:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_ETH_Init+0x88>)
 800090a:	2200      	movs	r2, #0
 800090c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_ETH_Init+0x80>)
 8000910:	4a15      	ldr	r2, [pc, #84]	; (8000968 <MX_ETH_Init+0x88>)
 8000912:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_ETH_Init+0x80>)
 8000916:	2201      	movs	r2, #1
 8000918:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_ETH_Init+0x80>)
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <MX_ETH_Init+0x8c>)
 800091e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_ETH_Init+0x80>)
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MX_ETH_Init+0x90>)
 8000924:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_ETH_Init+0x80>)
 8000928:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800092c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_ETH_Init+0x80>)
 8000930:	f000 fda4 	bl	800147c <HAL_ETH_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800093a:	f000 f945 	bl	8000bc8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800093e:	2238      	movs	r2, #56	; 0x38
 8000940:	2100      	movs	r1, #0
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_ETH_Init+0x94>)
 8000944:	f00d febd 	bl	800e6c2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_ETH_Init+0x94>)
 800094a:	2221      	movs	r2, #33	; 0x21
 800094c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_ETH_Init+0x94>)
 8000950:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000954:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_ETH_Init+0x94>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000a94 	.word	0x24000a94
 8000964:	40028000 	.word	0x40028000
 8000968:	24000bd8 	.word	0x24000bd8
 800096c:	240009c4 	.word	0x240009c4
 8000970:	24000964 	.word	0x24000964
 8000974:	24000a5c 	.word	0x24000a5c

08000978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <MX_USART3_UART_Init+0x94>)
 8000980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009c2:	f005 fc53 	bl	800626c <HAL_UART_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f8fc 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009d4:	f006 fc5b 	bl	800728e <HAL_UARTEx_SetTxFifoThreshold>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f8f3 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009e6:	f006 fc90 	bl	800730a <HAL_UARTEx_SetRxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f8ea 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009f6:	f006 fc11 	bl	800721c <HAL_UARTEx_DisableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f8e2 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	24000b44 	.word	0x24000b44
 8000a0c:	40004800 	.word	0x40004800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b62      	ldr	r3, [pc, #392]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	4a60      	ldr	r2, [pc, #384]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a36:	4b5e      	ldr	r3, [pc, #376]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a44:	4b5a      	ldr	r3, [pc, #360]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a59      	ldr	r2, [pc, #356]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b56      	ldr	r3, [pc, #344]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b53      	ldr	r3, [pc, #332]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	4a51      	ldr	r2, [pc, #324]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a72:	4b4f      	ldr	r3, [pc, #316]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	4a4a      	ldr	r2, [pc, #296]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a90:	4b47      	ldr	r3, [pc, #284]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	4b44      	ldr	r3, [pc, #272]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	4a42      	ldr	r2, [pc, #264]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aae:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abc:	4b3c      	ldr	r3, [pc, #240]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	4a3b      	ldr	r2, [pc, #236]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000acc:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	4a33      	ldr	r2, [pc, #204]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <MX_GPIO_Init+0x1a0>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	f003 0310 	and.w	r3, r3, #16
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f244 0101 	movw	r1, #16385	; 0x4001
 8000afe:	482d      	ldr	r0, [pc, #180]	; (8000bb4 <MX_GPIO_Init+0x1a4>)
 8000b00:	f001 faa0 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0a:	482b      	ldr	r0, [pc, #172]	; (8000bb8 <MX_GPIO_Init+0x1a8>)
 8000b0c:	f001 fa9a 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2102      	movs	r1, #2
 8000b14:	4829      	ldr	r0, [pc, #164]	; (8000bbc <MX_GPIO_Init+0x1ac>)
 8000b16:	f001 fa95 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4824      	ldr	r0, [pc, #144]	; (8000bc0 <MX_GPIO_Init+0x1b0>)
 8000b30:	f001 f8d8 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b34:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <MX_GPIO_Init+0x1a4>)
 8000b4e:	f001 f8c9 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <MX_GPIO_Init+0x1a8>)
 8000b6c:	f001 f8ba 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <MX_GPIO_Init+0x1b4>)
 8000b86:	f001 f8ad 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <MX_GPIO_Init+0x1ac>)
 8000ba2:	f001 f89f 	bl	8001ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3730      	adds	r7, #48	; 0x30
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	58024400 	.word	0x58024400
 8000bb4:	58020400 	.word	0x58020400
 8000bb8:	58020c00 	.word	0x58020c00
 8000bbc:	58021000 	.word	0x58021000
 8000bc0:	58020800 	.word	0x58020800
 8000bc4:	58021800 	.word	0x58021800

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_MspInit+0x30>)
 8000bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be0:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x30>)
 8000be2:	f043 0302 	orr.w	r3, r3, #2
 8000be6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x30>)
 8000bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	58024400 	.word	0x58024400

08000c08 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	; 0x38
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a59      	ldr	r2, [pc, #356]	; (8000d8c <HAL_ETH_MspInit+0x184>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f040 80ab 	bne.w	8000d82 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c2c:	4b58      	ldr	r3, [pc, #352]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c32:	4a57      	ldr	r2, [pc, #348]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c3c:	4b54      	ldr	r3, [pc, #336]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c46:	623b      	str	r3, [r7, #32]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c4a:	4b51      	ldr	r3, [pc, #324]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c50:	4a4f      	ldr	r2, [pc, #316]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c5a:	4b4d      	ldr	r3, [pc, #308]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c68:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6e:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c78:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b42      	ldr	r3, [pc, #264]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a40      	ldr	r2, [pc, #256]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	4a39      	ldr	r2, [pc, #228]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb4:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd2:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	4a2a      	ldr	r2, [pc, #168]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf0:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cfe:	2332      	movs	r3, #50	; 0x32
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0e:	230b      	movs	r3, #11
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	481e      	ldr	r0, [pc, #120]	; (8000d94 <HAL_ETH_MspInit+0x18c>)
 8000d1a:	f000 ffe3 	bl	8001ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d1e:	2386      	movs	r3, #134	; 0x86
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4817      	ldr	r0, [pc, #92]	; (8000d98 <HAL_ETH_MspInit+0x190>)
 8000d3a:	f000 ffd3 	bl	8001ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d50:	230b      	movs	r3, #11
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4810      	ldr	r0, [pc, #64]	; (8000d9c <HAL_ETH_MspInit+0x194>)
 8000d5c:	f000 ffc2 	bl	8001ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d60:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d72:	230b      	movs	r3, #11
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4808      	ldr	r0, [pc, #32]	; (8000da0 <HAL_ETH_MspInit+0x198>)
 8000d7e:	f000 ffb1 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3738      	adds	r7, #56	; 0x38
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40028000 	.word	0x40028000
 8000d90:	58024400 	.word	0x58024400
 8000d94:	58020800 	.word	0x58020800
 8000d98:	58020000 	.word	0x58020000
 8000d9c:	58020400 	.word	0x58020400
 8000da0:	58021800 	.word	0x58021800

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ba      	sub	sp, #232	; 0xe8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	22c0      	movs	r2, #192	; 0xc0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00d fc7c 	bl	800e6c2 <memset>
  if(huart->Instance==USART3)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a27      	ldr	r2, [pc, #156]	; (8000e6c <HAL_UART_MspInit+0xc8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d146      	bne.n	8000e62 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd4:	f04f 0202 	mov.w	r2, #2
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fc12 	bl	8004614 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000df6:	f7ff fee7 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_UART_MspInit+0xcc>)
 8000dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <HAL_UART_MspInit+0xcc>)
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_UART_MspInit+0xcc>)
 8000e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_UART_MspInit+0xcc>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <HAL_UART_MspInit+0xcc>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_UART_MspInit+0xcc>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e50:	2307      	movs	r3, #7
 8000e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <HAL_UART_MspInit+0xd0>)
 8000e5e:	f000 ff41 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	37e8      	adds	r7, #232	; 0xe8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40004800 	.word	0x40004800
 8000e70:	58024400 	.word	0x58024400
 8000e74:	58020c00 	.word	0x58020c00

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f966 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <OTG_FS_IRQHandler+0x10>)
 8000ed2:	f001 fa11 	bl	80022f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	240020c8 	.word	0x240020c8

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f00d fc3a 	bl	800e788 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	24080000 	.word	0x24080000
 8000f40:	00000800 	.word	0x00000800
 8000f44:	24000be0 	.word	0x24000be0
 8000f48:	20000000 	.word	0x20000000

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f50:	4b37      	ldr	r3, [pc, #220]	; (8001030 <SystemInit+0xe4>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a36      	ldr	r2, [pc, #216]	; (8001030 <SystemInit+0xe4>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f60:	4b34      	ldr	r3, [pc, #208]	; (8001034 <SystemInit+0xe8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	2b06      	cmp	r3, #6
 8000f6a:	d807      	bhi.n	8000f7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f6c:	4b31      	ldr	r3, [pc, #196]	; (8001034 <SystemInit+0xe8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f023 030f 	bic.w	r3, r3, #15
 8000f74:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <SystemInit+0xe8>)
 8000f76:	f043 0307 	orr.w	r3, r3, #7
 8000f7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <SystemInit+0xec>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a2d      	ldr	r2, [pc, #180]	; (8001038 <SystemInit+0xec>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <SystemInit+0xec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <SystemInit+0xec>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4929      	ldr	r1, [pc, #164]	; (8001038 <SystemInit+0xec>)
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <SystemInit+0xf0>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <SystemInit+0xe8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <SystemInit+0xe8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 030f 	bic.w	r3, r3, #15
 8000fae:	4a21      	ldr	r2, [pc, #132]	; (8001034 <SystemInit+0xe8>)
 8000fb0:	f043 0307 	orr.w	r3, r3, #7
 8000fb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <SystemInit+0xec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <SystemInit+0xec>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <SystemInit+0xec>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <SystemInit+0xec>)
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <SystemInit+0xf4>)
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <SystemInit+0xec>)
 8000fd0:	4a1c      	ldr	r2, [pc, #112]	; (8001044 <SystemInit+0xf8>)
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <SystemInit+0xec>)
 8000fd6:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <SystemInit+0xfc>)
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <SystemInit+0xec>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <SystemInit+0xec>)
 8000fe2:	4a19      	ldr	r2, [pc, #100]	; (8001048 <SystemInit+0xfc>)
 8000fe4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <SystemInit+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <SystemInit+0xec>)
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <SystemInit+0xfc>)
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <SystemInit+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <SystemInit+0xec>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <SystemInit+0xec>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001002:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <SystemInit+0xec>)
 8001006:	2200      	movs	r2, #0
 8001008:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <SystemInit+0x100>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <SystemInit+0x104>)
 8001010:	4013      	ands	r3, r2
 8001012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001016:	d202      	bcs.n	800101e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <SystemInit+0x108>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <SystemInit+0x10c>)
 8001020:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001024:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	52002000 	.word	0x52002000
 8001038:	58024400 	.word	0x58024400
 800103c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001040:	02020200 	.word	0x02020200
 8001044:	01ff0000 	.word	0x01ff0000
 8001048:	01010280 	.word	0x01010280
 800104c:	5c001000 	.word	0x5c001000
 8001050:	ffff0000 	.word	0xffff0000
 8001054:	51008108 	.word	0x51008108
 8001058:	52004000 	.word	0x52004000

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001094 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001060:	f7ff ff74 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	; (800109c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	; (80010a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108a:	f00d fb83 	bl	800e794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108e:	f7ff fafd 	bl	800068c <main>
  bx  lr
 8001092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001098:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800109c:	24000964 	.word	0x24000964
  ldr r2, =_sidata
 80010a0:	08012178 	.word	0x08012178
  ldr r2, =_sbss
 80010a4:	24000a40 	.word	0x24000a40
  ldr r4, =_ebss
 80010a8:	24002b08 	.word	0x24002b08

080010ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC3_IRQHandler>
	...

080010b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f000 f9a0 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010bc:	f003 f8d4 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 80010c0:	4602      	mov	r2, r0
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_Init+0x68>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	0a1b      	lsrs	r3, r3, #8
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	4913      	ldr	r1, [pc, #76]	; (800111c <HAL_Init+0x6c>)
 80010ce:	5ccb      	ldrb	r3, [r1, r3]
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	fa22 f303 	lsr.w	r3, r2, r3
 80010d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_Init+0x68>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_Init+0x6c>)
 80010e4:	5cd3      	ldrb	r3, [r2, r3]
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <HAL_Init+0x70>)
 80010f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010f4:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <HAL_Init+0x74>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f814 	bl	8001128 <HAL_InitTick>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e002      	b.n	8001110 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800110a:	f7ff fd63 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	58024400 	.word	0x58024400
 800111c:	080109b0 	.word	0x080109b0
 8001120:	24000004 	.word	0x24000004
 8001124:	24000000 	.word	0x24000000

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_InitTick+0x60>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e021      	b.n	8001180 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_InitTick+0x64>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_InitTick+0x60>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f985 	bl	8001462 <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00e      	b.n	8001180 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d80a      	bhi.n	800117e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 f94f 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_InitTick+0x68>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2400000c 	.word	0x2400000c
 800118c:	24000000 	.word	0x24000000
 8001190:	24000008 	.word	0x24000008

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2400000c 	.word	0x2400000c
 80011b8:	24000be4 	.word	0x24000be4

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	24000be4 	.word	0x24000be4

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2400000c 	.word	0x2400000c

0800121c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetREVID+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	0c1b      	lsrs	r3, r3, #16
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	5c001000 	.word	0x5c001000

08001234 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001244:	4904      	ldr	r1, [pc, #16]	; (8001258 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	58000400 	.word	0x58000400

0800125c <__NVIC_SetPriorityGrouping>:
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <__NVIC_SetPriorityGrouping+0x40>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	4313      	orrs	r3, r2
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <__NVIC_SetPriorityGrouping+0x40>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00
 80012a0:	05fa0000 	.word	0x05fa0000

080012a4 <__NVIC_GetPriorityGrouping>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff29 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff40 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff90 	bl	8001350 <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5f 	bl	80012fc <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff33 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa4 	bl	80013b8 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0e3      	b.n	8001656 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001494:	2b00      	cmp	r3, #0
 8001496:	d106      	bne.n	80014a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2223      	movs	r2, #35	; 0x23
 800149c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff fbb1 	bl	8000c08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b6e      	ldr	r3, [pc, #440]	; (8001660 <HAL_ETH_Init+0x1e4>)
 80014a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014ac:	4a6c      	ldr	r2, [pc, #432]	; (8001660 <HAL_ETH_Init+0x1e4>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014b6:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <HAL_ETH_Init+0x1e4>)
 80014b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7a1b      	ldrb	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d103      	bne.n	80014d4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff feb1 	bl	8001234 <HAL_SYSCFG_ETHInterfaceSelect>
 80014d2:	e003      	b.n	80014dc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80014d4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014d8:	f7ff feac 	bl	8001234 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80014dc:	4b61      	ldr	r3, [pc, #388]	; (8001664 <HAL_ETH_Init+0x1e8>)
 80014de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f8:	f7ff fe60 	bl	80011bc <HAL_GetTick>
 80014fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014fe:	e011      	b.n	8001524 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001500:	f7ff fe5c 	bl	80011bc <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800150e:	d909      	bls.n	8001524 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2204      	movs	r2, #4
 8001514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	22e0      	movs	r2, #224	; 0xe0
 800151c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e098      	b.n	8001656 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1e4      	bne.n	8001500 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f89e 	bl	8001678 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800153c:	f003 f80e 	bl	800455c <HAL_RCC_GetHCLKFreq>
 8001540:	4603      	mov	r3, r0
 8001542:	4a49      	ldr	r2, [pc, #292]	; (8001668 <HAL_ETH_Init+0x1ec>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	0c9a      	lsrs	r2, r3, #18
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3a01      	subs	r2, #1
 8001550:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fa81 	bl	8001a5c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001562:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001566:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001572:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001576:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	22e0      	movs	r2, #224	; 0xe0
 8001592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e05d      	b.n	8001656 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_ETH_Init+0x1f0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6952      	ldr	r2, [r2, #20]
 80015ae:	0051      	lsls	r1, r2, #1
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	430b      	orrs	r3, r1
 80015b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fae9 	bl	8001b96 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 fb2f 	bl	8001c28 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	3305      	adds	r3, #5
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	021a      	lsls	r2, r3, #8
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	3304      	adds	r3, #4
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	3303      	adds	r3, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	061a      	lsls	r2, r3, #24
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	3302      	adds	r3, #2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	041b      	lsls	r3, r3, #16
 80015fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	3301      	adds	r3, #1
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001608:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001616:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001618:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_ETH_Init+0x1f4>)
 800162a:	430b      	orrs	r3, r1
 800162c:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_ETH_Init+0x1f8>)
 800163e:	430b      	orrs	r3, r1
 8001640:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2210      	movs	r2, #16
 8001650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	58024400 	.word	0x58024400
 8001664:	58000400 	.word	0x58000400
 8001668:	431bde83 	.word	0x431bde83
 800166c:	ffff8001 	.word	0xffff8001
 8001670:	0c020060 	.word	0x0c020060
 8001674:	0c20c000 	.word	0x0c20c000

08001678 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001688:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001690:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001692:	f002 ff63 	bl	800455c <HAL_RCC_GetHCLKFreq>
 8001696:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d804      	bhi.n	80016aa <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	e022      	b.n	80016f0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	4a16      	ldr	r2, [pc, #88]	; (8001708 <HAL_ETH_SetMDIOClockRange+0x90>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d204      	bcs.n	80016bc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	e019      	b.n	80016f0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <HAL_ETH_SetMDIOClockRange+0x94>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d915      	bls.n	80016f0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_ETH_SetMDIOClockRange+0x98>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d804      	bhi.n	80016d6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e00c      	b.n	80016f0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d804      	bhi.n	80016e8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e003      	b.n	80016f0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80016ee:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	02160ebf 	.word	0x02160ebf
 8001708:	03938700 	.word	0x03938700
 800170c:	05f5e0ff 	.word	0x05f5e0ff
 8001710:	08f0d17f 	.word	0x08f0d17f
 8001714:	0ee6b27f 	.word	0x0ee6b27f

08001718 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800172a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001732:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	7b1b      	ldrb	r3, [r3, #12]
 8001738:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800173a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	7b5b      	ldrb	r3, [r3, #13]
 8001740:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001742:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	7b9b      	ldrb	r3, [r3, #14]
 8001748:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800174a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	7bdb      	ldrb	r3, [r3, #15]
 8001750:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001752:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	7c12      	ldrb	r2, [r2, #16]
 8001758:	2a00      	cmp	r2, #0
 800175a:	d102      	bne.n	8001762 <ETH_SetMACConfig+0x4a>
 800175c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001760:	e000      	b.n	8001764 <ETH_SetMACConfig+0x4c>
 8001762:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001764:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	7c52      	ldrb	r2, [r2, #17]
 800176a:	2a00      	cmp	r2, #0
 800176c:	d102      	bne.n	8001774 <ETH_SetMACConfig+0x5c>
 800176e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001772:	e000      	b.n	8001776 <ETH_SetMACConfig+0x5e>
 8001774:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001776:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	7c9b      	ldrb	r3, [r3, #18]
 800177c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800177e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001784:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800178a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	7f1b      	ldrb	r3, [r3, #28]
 8001790:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001792:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	7f5b      	ldrb	r3, [r3, #29]
 8001798:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800179a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	7f92      	ldrb	r2, [r2, #30]
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d102      	bne.n	80017aa <ETH_SetMACConfig+0x92>
 80017a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a8:	e000      	b.n	80017ac <ETH_SetMACConfig+0x94>
 80017aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	7fdb      	ldrb	r3, [r3, #31]
 80017b2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017bc:	2a00      	cmp	r2, #0
 80017be:	d102      	bne.n	80017c6 <ETH_SetMACConfig+0xae>
 80017c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c4:	e000      	b.n	80017c8 <ETH_SetMACConfig+0xb0>
 80017c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017c8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017d6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80017d8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b56      	ldr	r3, [pc, #344]	; (8001944 <ETH_SetMACConfig+0x22c>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	430b      	orrs	r3, r1
 80017f4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001802:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001804:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800180c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800180e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001816:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001818:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001820:	2a00      	cmp	r2, #0
 8001822:	d102      	bne.n	800182a <ETH_SetMACConfig+0x112>
 8001824:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001828:	e000      	b.n	800182c <ETH_SetMACConfig+0x114>
 800182a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800182c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4b42      	ldr	r3, [pc, #264]	; (8001948 <ETH_SetMACConfig+0x230>)
 800183e:	4013      	ands	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	68f9      	ldr	r1, [r7, #12]
 8001846:	430b      	orrs	r3, r1
 8001848:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001850:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001856:	4313      	orrs	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <ETH_SetMACConfig+0x234>)
 8001862:	4013      	ands	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	68f9      	ldr	r1, [r7, #12]
 800186a:	430b      	orrs	r3, r1
 800186c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001874:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800187a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001882:	2a00      	cmp	r2, #0
 8001884:	d101      	bne.n	800188a <ETH_SetMACConfig+0x172>
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	e000      	b.n	800188c <ETH_SetMACConfig+0x174>
 800188a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800188c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001892:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001894:	4313      	orrs	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800189e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80018a2:	4013      	ands	r3, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	68f9      	ldr	r1, [r7, #12]
 80018aa:	430b      	orrs	r3, r1
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80018b4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80018bc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018be:	4313      	orrs	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	f023 0103 	bic.w	r1, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80018e2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80018fe:	2a00      	cmp	r2, #0
 8001900:	d101      	bne.n	8001906 <ETH_SetMACConfig+0x1ee>
 8001902:	2240      	movs	r2, #64	; 0x40
 8001904:	e000      	b.n	8001908 <ETH_SetMACConfig+0x1f0>
 8001906:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001908:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001910:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001912:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800191a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800191c:	4313      	orrs	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001928:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	430a      	orrs	r2, r1
 8001934:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	00048083 	.word	0x00048083
 8001948:	c0f88000 	.word	0xc0f88000
 800194c:	fffffef0 	.word	0xfffffef0

08001950 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <ETH_SetDMAConfig+0xf8>)
 8001966:	4013      	ands	r3, r2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	6811      	ldr	r1, [r2, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	430b      	orrs	r3, r1
 8001972:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001976:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	791b      	ldrb	r3, [r3, #4]
 800197c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001982:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	7b1b      	ldrb	r3, [r3, #12]
 8001988:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <ETH_SetDMAConfig+0xfc>)
 800199a:	4013      	ands	r3, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	68f9      	ldr	r1, [r7, #12]
 80019a2:	430b      	orrs	r3, r1
 80019a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019a8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	7b5b      	ldrb	r3, [r3, #13]
 80019ae:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <ETH_SetDMAConfig+0x100>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	430b      	orrs	r3, r1
 80019d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	7d1b      	ldrb	r3, [r3, #20]
 80019e0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80019e2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	7f5b      	ldrb	r3, [r3, #29]
 80019e8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <ETH_SetDMAConfig+0x104>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	430b      	orrs	r3, r1
 8001a06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a0a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	7f1b      	ldrb	r3, [r3, #28]
 8001a12:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <ETH_SetDMAConfig+0x108>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a38:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	ffff87fd 	.word	0xffff87fd
 8001a4c:	ffff2ffe 	.word	0xffff2ffe
 8001a50:	fffec000 	.word	0xfffec000
 8001a54:	ffc0efef 	.word	0xffc0efef
 8001a58:	7fc0ffff 	.word	0x7fc0ffff

08001a5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0a4      	sub	sp, #144	; 0x90
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a86:	2301      	movs	r3, #1
 8001a88:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a9c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001ab4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001ab8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001af4:	2320      	movs	r3, #32
 8001af6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b06:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b10:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b36:	2300      	movs	r3, #0
 8001b38:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b44:	4619      	mov	r1, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fde6 	bl	8001718 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b50:	2301      	movs	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b6a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b74:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001b7c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	4619      	mov	r1, r3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fee1 	bl	8001950 <ETH_SetDMAConfig>
}
 8001b8e:	bf00      	nop
 8001b90:	3790      	adds	r7, #144	; 0x90
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b085      	sub	sp, #20
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e01d      	b.n	8001be0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68d9      	ldr	r1, [r3, #12]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001bce:	68b9      	ldr	r1, [r7, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	3206      	adds	r2, #6
 8001bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d9de      	bls.n	8001ba4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c08:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c18:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e023      	b.n	8001c7e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6919      	ldr	r1, [r3, #16]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2200      	movs	r2, #0
 8001c52:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	3212      	adds	r2, #18
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d9d8      	bls.n	8001c36 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001caa:	461a      	mov	r2, r3
 8001cac:	2303      	movs	r3, #3
 8001cae:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cf2:	4b89      	ldr	r3, [pc, #548]	; (8001f18 <HAL_GPIO_Init+0x234>)
 8001cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cf6:	e194      	b.n	8002022 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8186 	beq.w	800201c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d005      	beq.n	8001d28 <HAL_GPIO_Init+0x44>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d130      	bne.n	8001d8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d5e:	2201      	movs	r2, #1
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	f003 0201 	and.w	r2, r3, #1
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d017      	beq.n	8001dc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d123      	bne.n	8001e1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	69b9      	ldr	r1, [r7, #24]
 8001e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0203 	and.w	r2, r3, #3
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80e0 	beq.w	800201c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_GPIO_Init+0x238>)
 8001e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e62:	4a2e      	ldr	r2, [pc, #184]	; (8001f1c <HAL_GPIO_Init+0x238>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e6c:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <HAL_GPIO_Init+0x238>)
 8001e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a29      	ldr	r2, [pc, #164]	; (8001f20 <HAL_GPIO_Init+0x23c>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a20      	ldr	r2, [pc, #128]	; (8001f24 <HAL_GPIO_Init+0x240>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d052      	beq.n	8001f4c <HAL_GPIO_Init+0x268>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <HAL_GPIO_Init+0x244>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d031      	beq.n	8001f12 <HAL_GPIO_Init+0x22e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_GPIO_Init+0x248>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d02b      	beq.n	8001f0e <HAL_GPIO_Init+0x22a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_GPIO_Init+0x24c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d025      	beq.n	8001f0a <HAL_GPIO_Init+0x226>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <HAL_GPIO_Init+0x250>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01f      	beq.n	8001f06 <HAL_GPIO_Init+0x222>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_GPIO_Init+0x254>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x21e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_GPIO_Init+0x258>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x21a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <HAL_GPIO_Init+0x25c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x216>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <HAL_GPIO_Init+0x260>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x212>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_GPIO_Init+0x264>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x20e>
 8001eee:	2309      	movs	r3, #9
 8001ef0:	e02d      	b.n	8001f4e <HAL_GPIO_Init+0x26a>
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	e02b      	b.n	8001f4e <HAL_GPIO_Init+0x26a>
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	e029      	b.n	8001f4e <HAL_GPIO_Init+0x26a>
 8001efa:	2307      	movs	r3, #7
 8001efc:	e027      	b.n	8001f4e <HAL_GPIO_Init+0x26a>
 8001efe:	2306      	movs	r3, #6
 8001f00:	e025      	b.n	8001f4e <HAL_GPIO_Init+0x26a>
 8001f02:	2305      	movs	r3, #5
 8001f04:	e023      	b.n	8001f4e <HAL_GPIO_Init+0x26a>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e021      	b.n	8001f4e <HAL_GPIO_Init+0x26a>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e01f      	b.n	8001f4e <HAL_GPIO_Init+0x26a>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e01d      	b.n	8001f4e <HAL_GPIO_Init+0x26a>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e01b      	b.n	8001f4e <HAL_GPIO_Init+0x26a>
 8001f16:	bf00      	nop
 8001f18:	58000080 	.word	0x58000080
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	58000400 	.word	0x58000400
 8001f24:	58020000 	.word	0x58020000
 8001f28:	58020400 	.word	0x58020400
 8001f2c:	58020800 	.word	0x58020800
 8001f30:	58020c00 	.word	0x58020c00
 8001f34:	58021000 	.word	0x58021000
 8001f38:	58021400 	.word	0x58021400
 8001f3c:	58021800 	.word	0x58021800
 8001f40:	58021c00 	.word	0x58021c00
 8001f44:	58022000 	.word	0x58022000
 8001f48:	58022400 	.word	0x58022400
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	f002 0203 	and.w	r2, r2, #3
 8001f54:	0092      	lsls	r2, r2, #2
 8001f56:	4093      	lsls	r3, r2
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f5e:	4938      	ldr	r1, [pc, #224]	; (8002040 <HAL_GPIO_Init+0x35c>)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	3301      	adds	r3, #1
 8002020:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	f47f ae63 	bne.w	8001cf8 <HAL_GPIO_Init+0x14>
  }
}
 8002032:	bf00      	nop
 8002034:	bf00      	nop
 8002036:	3724      	adds	r7, #36	; 0x24
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	58000400 	.word	0x58000400

08002044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
 8002050:	4613      	mov	r3, r2
 8002052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002054:	787b      	ldrb	r3, [r7, #1]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002060:	e003      	b.n	800206a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	041a      	lsls	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	619a      	str	r2, [r3, #24]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af02      	add	r7, sp, #8
 800207c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0fe      	b.n	8002286 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d106      	bne.n	80020a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f008 ff1b 	bl	800aed8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2203      	movs	r2, #3
 80020a6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f005 fadd 	bl	800766e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7c1a      	ldrb	r2, [r3, #16]
 80020bc:	f88d 2000 	strb.w	r2, [sp]
 80020c0:	3304      	adds	r3, #4
 80020c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c4:	f005 f9ae 	bl	8007424 <USB_CoreInit>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0d5      	b.n	8002286 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f005 fad5 	bl	8007690 <USB_SetCurrentMode>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0c6      	b.n	8002286 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e04a      	b.n	8002194 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3315      	adds	r3, #21
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	3314      	adds	r3, #20
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	b298      	uxth	r0, r3
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	332e      	adds	r3, #46	; 0x2e
 800213a:	4602      	mov	r2, r0
 800213c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3318      	adds	r3, #24
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	331c      	adds	r3, #28
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3320      	adds	r3, #32
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	3324      	adds	r3, #36	; 0x24
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	3301      	adds	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	791b      	ldrb	r3, [r3, #4]
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	429a      	cmp	r2, r3
 800219c:	d3af      	bcc.n	80020fe <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]
 80021a2:	e044      	b.n	800222e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	3301      	adds	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	791b      	ldrb	r3, [r3, #4]
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	429a      	cmp	r2, r3
 8002236:	d3b5      	bcc.n	80021a4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7c1a      	ldrb	r2, [r3, #16]
 8002240:	f88d 2000 	strb.w	r2, [sp]
 8002244:	3304      	adds	r3, #4
 8002246:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002248:	f005 fa6e 	bl	8007728 <USB_DevInit>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e013      	b.n	8002286 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7b1b      	ldrb	r3, [r3, #12]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d102      	bne.n	800227a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f001 f96d 	bl	8003554 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f006 faad 	bl	80087de <USB_DevDisconnect>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_PCD_Start+0x1c>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e022      	b.n	80022f0 <HAL_PCD_Start+0x62>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f005 f9b8 	bl	800764c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f006 fa5b 	bl	800879c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b08d      	sub	sp, #52	; 0x34
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f006 fb19 	bl	8008946 <USB_GetMode>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 84b9 	bne.w	8002c8e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f006 fa7d 	bl	8008820 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 84af 	beq.w	8002c8c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f006 fa6a 	bl	8008820 <USB_ReadInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d107      	bne.n	8002366 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f002 0202 	and.w	r2, r2, #2
 8002364:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f006 fa58 	bl	8008820 <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b10      	cmp	r3, #16
 8002378:	d161      	bne.n	800243e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0210 	bic.w	r2, r2, #16
 8002388:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	f003 020f 	and.w	r2, r3, #15
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	0c5b      	lsrs	r3, r3, #17
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d124      	bne.n	8002400 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d035      	beq.n	800242e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	6a38      	ldr	r0, [r7, #32]
 80023d6:	f006 f88f 	bl	80084f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023e6:	441a      	add	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f8:	441a      	add	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	615a      	str	r2, [r3, #20]
 80023fe:	e016      	b.n	800242e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	0c5b      	lsrs	r3, r3, #17
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	2b06      	cmp	r3, #6
 800240a:	d110      	bne.n	800242e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002412:	2208      	movs	r2, #8
 8002414:	4619      	mov	r1, r3
 8002416:	6a38      	ldr	r0, [r7, #32]
 8002418:	f006 f86e 	bl	80084f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002428:	441a      	add	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0210 	orr.w	r2, r2, #16
 800243c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f006 f9ec 	bl	8008820 <USB_ReadInterrupts>
 8002448:	4603      	mov	r3, r0
 800244a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800244e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002452:	f040 80a7 	bne.w	80025a4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f006 f9f1 	bl	8008846 <USB_ReadDevAllOutEpInterrupt>
 8002464:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002466:	e099      	b.n	800259c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 808e 	beq.w	8002590 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f006 fa15 	bl	80088ae <USB_ReadDevOutEPInterrupt>
 8002484:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00c      	beq.n	80024aa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249c:	461a      	mov	r2, r3
 800249e:	2301      	movs	r3, #1
 80024a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fecf 	bl	8003248 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00c      	beq.n	80024ce <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c0:	461a      	mov	r2, r3
 80024c2:	2308      	movs	r3, #8
 80024c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 ffa5 	bl	8003418 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e4:	461a      	mov	r2, r3
 80024e6:	2310      	movs	r3, #16
 80024e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d030      	beq.n	8002556 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d109      	bne.n	8002514 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800250e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002512:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	3304      	adds	r3, #4
 8002528:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	78db      	ldrb	r3, [r3, #3]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2200      	movs	r2, #0
 8002536:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f008 fe00 	bl	800b144 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002550:	461a      	mov	r2, r3
 8002552:	2302      	movs	r3, #2
 8002554:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256c:	461a      	mov	r2, r3
 800256e:	2320      	movs	r3, #32
 8002570:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002588:	461a      	mov	r2, r3
 800258a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	3301      	adds	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f47f af62 	bne.w	8002468 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f006 f939 	bl	8008820 <USB_ReadInterrupts>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025b8:	f040 80db 	bne.w	8002772 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f006 f95a 	bl	800887a <USB_ReadDevAllInEpInterrupt>
 80025c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025cc:	e0cd      	b.n	800276a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80c2 	beq.w	800275e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f006 f980 	bl	80088ea <USB_ReadDevInEPInterrupt>
 80025ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d057      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	2201      	movs	r2, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43db      	mvns	r3, r3
 8002610:	69f9      	ldr	r1, [r7, #28]
 8002612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002616:	4013      	ands	r3, r2
 8002618:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002626:	461a      	mov	r2, r3
 8002628:	2301      	movs	r3, #1
 800262a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	799b      	ldrb	r3, [r3, #6]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d132      	bne.n	800269a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3320      	adds	r3, #32
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4403      	add	r3, r0
 8002654:	331c      	adds	r3, #28
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4419      	add	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4403      	add	r3, r0
 8002668:	3320      	adds	r3, #32
 800266a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	2b00      	cmp	r3, #0
 8002670:	d113      	bne.n	800269a <HAL_PCD_IRQHandler+0x3a2>
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	3324      	adds	r3, #36	; 0x24
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d108      	bne.n	800269a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002692:	461a      	mov	r2, r3
 8002694:	2101      	movs	r1, #1
 8002696:	f006 f989 	bl	80089ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	b2db      	uxtb	r3, r3
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f008 fcca 	bl	800b03a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026bc:	461a      	mov	r2, r3
 80026be:	2308      	movs	r3, #8
 80026c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d8:	461a      	mov	r2, r3
 80026da:	2310      	movs	r3, #16
 80026dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f4:	461a      	mov	r2, r3
 80026f6:	2340      	movs	r3, #64	; 0x40
 80026f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d023      	beq.n	800274c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002706:	6a38      	ldr	r0, [r7, #32]
 8002708:	f005 f96c 	bl	80079e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	3310      	adds	r3, #16
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	78db      	ldrb	r3, [r3, #3]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d108      	bne.n	800273a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2200      	movs	r2, #0
 800272c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4619      	mov	r1, r3
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f008 fd17 	bl	800b168 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002746:	461a      	mov	r2, r3
 8002748:	2302      	movs	r3, #2
 800274a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fce8 	bl	800312e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	3301      	adds	r3, #1
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f af2e 	bne.w	80025ce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f006 f852 	bl	8008820 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002786:	d122      	bne.n	80027ce <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d108      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027ae:	2100      	movs	r1, #0
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fef3 	bl	800359c <HAL_PCDEx_LPM_Callback>
 80027b6:	e002      	b.n	80027be <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f008 fcb5 	bl	800b128 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f006 f824 	bl	8008820 <USB_ReadInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e2:	d112      	bne.n	800280a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d102      	bne.n	80027fa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f008 fc71 	bl	800b0dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002808:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f006 f806 	bl	8008820 <USB_ReadInterrupts>
 8002814:	4603      	mov	r3, r0
 8002816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800281a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281e:	d121      	bne.n	8002864 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800282e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002836:	2b00      	cmp	r3, #0
 8002838:	d111      	bne.n	800285e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	f003 020f 	and.w	r2, r3, #15
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002854:	2101      	movs	r1, #1
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fea0 	bl	800359c <HAL_PCDEx_LPM_Callback>
 800285c:	e002      	b.n	8002864 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f008 fc3c 	bl	800b0dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f005 ffd9 	bl	8008820 <USB_ReadInterrupts>
 800286e:	4603      	mov	r3, r0
 8002870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002878:	f040 80b7 	bne.w	80029ea <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2110      	movs	r1, #16
 8002896:	4618      	mov	r0, r3
 8002898:	f005 f8a4 	bl	80079e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a0:	e046      	b.n	8002930 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ae:	461a      	mov	r2, r3
 80028b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c6:	0151      	lsls	r1, r2, #5
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	440a      	add	r2, r1
 80028cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e2:	461a      	mov	r2, r3
 80028e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fa:	0151      	lsls	r1, r2, #5
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	440a      	add	r2, r1
 8002900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002904:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002908:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291a:	0151      	lsls	r1, r2, #5
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	440a      	add	r2, r1
 8002920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002924:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002928:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	3301      	adds	r3, #1
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	791b      	ldrb	r3, [r3, #4]
 8002934:	461a      	mov	r2, r3
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	4293      	cmp	r3, r2
 800293a:	d3b2      	bcc.n	80028a2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800294a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800294e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7bdb      	ldrb	r3, [r3, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d016      	beq.n	8002986 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002968:	f043 030b 	orr.w	r3, r3, #11
 800296c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297e:	f043 030b 	orr.w	r3, r3, #11
 8002982:	6453      	str	r3, [r2, #68]	; 0x44
 8002984:	e015      	b.n	80029b2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002994:	4619      	mov	r1, r3
 8002996:	f242 032b 	movw	r3, #8235	; 0x202b
 800299a:	4313      	orrs	r3, r2
 800299c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ac:	f043 030b 	orr.w	r3, r3, #11
 80029b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029d4:	461a      	mov	r2, r3
 80029d6:	f005 ffe9 	bl	80089ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f005 ff16 	bl	8008820 <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fe:	d123      	bne.n	8002a48 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f005 ffad 	bl	8008964 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f005 f861 	bl	8007ad6 <USB_GetDevSpeed>
 8002a14:	4603      	mov	r3, r0
 8002a16:	461a      	mov	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681c      	ldr	r4, [r3, #0]
 8002a20:	f001 fd9c 	bl	800455c <HAL_RCC_GetHCLKFreq>
 8002a24:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f004 fd6b 	bl	8007508 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f008 fb29 	bl	800b08a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f005 fee7 	bl	8008820 <USB_ReadInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d10a      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f008 fb06 	bl	800b06e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f002 0208 	and.w	r2, r2, #8
 8002a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f005 fed2 	bl	8008820 <USB_ReadInterrupts>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d123      	bne.n	8002ace <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a92:	2301      	movs	r3, #1
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
 8002a96:	e014      	b.n	8002ac2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d105      	bne.n	8002abc <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fb08 	bl	80030cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	3301      	adds	r3, #1
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	791b      	ldrb	r3, [r3, #4]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d3e4      	bcc.n	8002a98 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f005 fea4 	bl	8008820 <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae2:	d13c      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	e02b      	b.n	8002b42 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	3318      	adds	r3, #24
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d115      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	da12      	bge.n	8002b3c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3317      	adds	r3, #23
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4619      	mov	r1, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fac8 	bl	80030cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	3301      	adds	r3, #1
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	791b      	ldrb	r3, [r3, #4]
 8002b46:	461a      	mov	r2, r3
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d3cd      	bcc.n	8002aea <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f005 fe5c 	bl	8008820 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b72:	d156      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b74:	2301      	movs	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
 8002b78:	e045      	b.n	8002c06 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d12e      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ba2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	da2b      	bge.n	8002c00 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002bb4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d121      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bfc:	6053      	str	r3, [r2, #4]
            break;
 8002bfe:	e008      	b.n	8002c12 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	3301      	adds	r3, #1
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	791b      	ldrb	r3, [r3, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d3b3      	bcc.n	8002b7a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f005 fdfa 	bl	8008820 <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c36:	d10a      	bne.n	8002c4e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f008 faa7 	bl	800b18c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f005 fde4 	bl	8008820 <USB_ReadInterrupts>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d115      	bne.n	8002c8e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f008 fa97 	bl	800b1a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	e000      	b.n	8002c8e <HAL_PCD_IRQHandler+0x996>
      return;
 8002c8c:	bf00      	nop
    }
  }
}
 8002c8e:	3734      	adds	r7, #52	; 0x34
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd90      	pop	{r4, r7, pc}

08002c94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_PCD_SetAddress+0x1a>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e012      	b.n	8002cd4 <HAL_PCD_SetAddress+0x40>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f005 fd43 	bl	8008750 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4603      	mov	r3, r0
 8002cec:	70fb      	strb	r3, [r7, #3]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	803b      	strh	r3, [r7, #0]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	da0f      	bge.n	8002d22 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	3310      	adds	r3, #16
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	3304      	adds	r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	705a      	strb	r2, [r3, #1]
 8002d20:	e00f      	b.n	8002d42 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 020f 	and.w	r2, r3, #15
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	3304      	adds	r3, #4
 8002d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d4e:	883a      	ldrh	r2, [r7, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	78ba      	ldrb	r2, [r7, #2]
 8002d58:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d6c:	78bb      	ldrb	r3, [r7, #2]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d102      	bne.n	8002d78 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_PCD_EP_Open+0xaa>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e00e      	b.n	8002da4 <HAL_PCD_EP_Open+0xc8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68f9      	ldr	r1, [r7, #12]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 fec3 	bl	8007b20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002da2:	7afb      	ldrb	r3, [r7, #11]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	da0f      	bge.n	8002de0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	3310      	adds	r3, #16
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	705a      	strb	r2, [r3, #1]
 8002dde:	e00f      	b.n	8002e00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 020f 	and.w	r2, r3, #15
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	3304      	adds	r3, #4
 8002df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_PCD_EP_Close+0x6e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e00e      	b.n	8002e38 <HAL_PCD_EP_Close+0x8c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68f9      	ldr	r1, [r7, #12]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f004 ff01 	bl	8007c30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e50:	7afb      	ldrb	r3, [r7, #11]
 8002e52:	f003 020f 	and.w	r2, r3, #15
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	799b      	ldrb	r3, [r3, #6]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	799b      	ldrb	r3, [r3, #6]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	f004 ff9e 	bl	8007de8 <USB_EPStartXfer>

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 020f 	and.w	r2, r3, #15
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002ed8:	681b      	ldr	r3, [r3, #0]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	3310      	adds	r3, #16
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2201      	movs	r2, #1
 8002f24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f26:	7afb      	ldrb	r3, [r7, #11]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	799b      	ldrb	r3, [r3, #6]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	799b      	ldrb	r3, [r3, #6]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	6979      	ldr	r1, [r7, #20]
 8002f4c:	f004 ff4c 	bl	8007de8 <USB_EPStartXfer>

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	7912      	ldrb	r2, [r2, #4]
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e04f      	b.n	8003018 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	da0f      	bge.n	8002fa0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 020f 	and.w	r2, r3, #15
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	3310      	adds	r3, #16
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	3304      	adds	r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	705a      	strb	r2, [r3, #1]
 8002f9e:	e00d      	b.n	8002fbc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_PCD_EP_SetStall+0x82>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e01d      	b.n	8003018 <HAL_PCD_EP_SetStall+0xbe>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f005 fadc 	bl	80085a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7999      	ldrb	r1, [r3, #6]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003008:	461a      	mov	r2, r3
 800300a:	f005 fccf 	bl	80089ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	7912      	ldrb	r2, [r2, #4]
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e042      	b.n	80030c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800303e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003042:	2b00      	cmp	r3, #0
 8003044:	da0f      	bge.n	8003066 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	3310      	adds	r3, #16
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	3304      	adds	r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	705a      	strb	r2, [r3, #1]
 8003064:	e00f      	b.n	8003086 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	3304      	adds	r3, #4
 800307e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_PCD_EP_ClrStall+0x86>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e00e      	b.n	80030c4 <HAL_PCD_EP_ClrStall+0xa4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f005 fae5 	bl	8008684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	da0c      	bge.n	80030fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 020f 	and.w	r2, r3, #15
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	3310      	adds	r3, #16
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e00c      	b.n	8003114 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	3304      	adds	r3, #4
 8003112:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	4618      	mov	r0, r3
 800311c:	f005 f904 	bl	8008328 <USB_EPStopXfer>
 8003120:	4603      	mov	r3, r0
 8003122:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003124:	7afb      	ldrb	r3, [r7, #11]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b08a      	sub	sp, #40	; 0x28
 8003132:	af02      	add	r7, sp, #8
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	3310      	adds	r3, #16
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	3304      	adds	r3, #4
 8003154:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	429a      	cmp	r2, r3
 8003160:	d901      	bls.n	8003166 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06b      	b.n	800323e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	429a      	cmp	r2, r3
 800317a:	d902      	bls.n	8003182 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3303      	adds	r3, #3
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800318a:	e02a      	b.n	80031e2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d902      	bls.n	80031a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	3303      	adds	r3, #3
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68d9      	ldr	r1, [r3, #12]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	4603      	mov	r3, r0
 80031c4:	6978      	ldr	r0, [r7, #20]
 80031c6:	f005 f959 	bl	800847c <USB_WritePacket>

    ep->xfer_buff  += len;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	441a      	add	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	441a      	add	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d809      	bhi.n	800320c <PCD_WriteEmptyTxFifo+0xde>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003200:	429a      	cmp	r2, r3
 8003202:	d203      	bcs.n	800320c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1bf      	bne.n	800318c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	429a      	cmp	r2, r3
 8003216:	d811      	bhi.n	800323c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	2201      	movs	r2, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	43db      	mvns	r3, r3
 8003232:	6939      	ldr	r1, [r7, #16]
 8003234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003238:	4013      	ands	r3, r2
 800323a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	333c      	adds	r3, #60	; 0x3c
 8003260:	3304      	adds	r3, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	799b      	ldrb	r3, [r3, #6]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d17b      	bne.n	8003376 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d015      	beq.n	80032b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	4a61      	ldr	r2, [pc, #388]	; (8003410 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	f240 80b9 	bls.w	8003404 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80b3 	beq.w	8003404 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032aa:	461a      	mov	r2, r3
 80032ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032b0:	6093      	str	r3, [r2, #8]
 80032b2:	e0a7      	b.n	8003404 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ca:	461a      	mov	r2, r3
 80032cc:	2320      	movs	r3, #32
 80032ce:	6093      	str	r3, [r2, #8]
 80032d0:	e098      	b.n	8003404 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f040 8093 	bne.w	8003404 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	4a4b      	ldr	r2, [pc, #300]	; (8003410 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d90f      	bls.n	8003306 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003302:	6093      	str	r3, [r2, #8]
 8003304:	e07e      	b.n	8003404 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	3304      	adds	r3, #4
 800331a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1a      	ldr	r2, [r3, #32]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	0159      	lsls	r1, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	440b      	add	r3, r1
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003332:	1ad2      	subs	r2, r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d114      	bne.n	8003368 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003350:	461a      	mov	r2, r3
 8003352:	2101      	movs	r1, #1
 8003354:	f005 fb2a 	bl	80089ac <USB_EP0_OutStart>
 8003358:	e006      	b.n	8003368 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	441a      	add	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f007 fe48 	bl	800b004 <HAL_PCD_DataOutStageCallback>
 8003374:	e046      	b.n	8003404 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	4a26      	ldr	r2, [pc, #152]	; (8003414 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d124      	bne.n	80033c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003394:	461a      	mov	r2, r3
 8003396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800339a:	6093      	str	r3, [r2, #8]
 800339c:	e032      	b.n	8003404 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b4:	461a      	mov	r2, r3
 80033b6:	2320      	movs	r3, #32
 80033b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f007 fe1f 	bl	800b004 <HAL_PCD_DataOutStageCallback>
 80033c6:	e01d      	b.n	8003404 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d114      	bne.n	80033f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80033f0:	461a      	mov	r2, r3
 80033f2:	2100      	movs	r1, #0
 80033f4:	f005 fada 	bl	80089ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f007 fe00 	bl	800b004 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	4f54300a 	.word	0x4f54300a
 8003414:	4f54310a 	.word	0x4f54310a

08003418 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	333c      	adds	r3, #60	; 0x3c
 8003430:	3304      	adds	r3, #4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d90e      	bls.n	800346c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003464:	461a      	mov	r2, r3
 8003466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800346a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f007 fdb7 	bl	800afe0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d90c      	bls.n	8003494 <PCD_EP_OutSetupPacket_int+0x7c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	799b      	ldrb	r3, [r3, #6]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d108      	bne.n	8003494 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800348c:	461a      	mov	r2, r3
 800348e:	2101      	movs	r1, #1
 8003490:	f005 fa8c 	bl	80089ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	4f54300a 	.word	0x4f54300a

080034a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	70fb      	strb	r3, [r7, #3]
 80034b0:	4613      	mov	r3, r2
 80034b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d107      	bne.n	80034d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034c2:	883b      	ldrh	r3, [r7, #0]
 80034c4:	0419      	lsls	r1, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
 80034d0:	e028      	b.n	8003524 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	4413      	add	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	e00d      	b.n	8003502 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	3340      	adds	r3, #64	; 0x40
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	4413      	add	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	3301      	adds	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	3b01      	subs	r3, #1
 8003508:	429a      	cmp	r2, r3
 800350a:	d3ec      	bcc.n	80034e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800350c:	883b      	ldrh	r3, [r7, #0]
 800350e:	0418      	lsls	r0, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	3b01      	subs	r3, #1
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	4302      	orrs	r2, r0
 800351c:	3340      	adds	r3, #64	; 0x40
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_PCDEx_ActivateLPM+0x44>)
 8003584:	4313      	orrs	r3, r2
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	10000003 	.word	0x10000003

0800359c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035bc:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_PWREx_ConfigSupply+0x70>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d00a      	beq.n	80035de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_PWREx_ConfigSupply+0x70>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01f      	b.n	800361a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e01d      	b.n	800361a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_PWREx_ConfigSupply+0x70>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f023 0207 	bic.w	r2, r3, #7
 80035e6:	490f      	ldr	r1, [pc, #60]	; (8003624 <HAL_PWREx_ConfigSupply+0x70>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035ee:	f7fd fde5 	bl	80011bc <HAL_GetTick>
 80035f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035f4:	e009      	b.n	800360a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035f6:	f7fd fde1 	bl	80011bc <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003604:	d901      	bls.n	800360a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_PWREx_ConfigSupply+0x70>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003616:	d1ee      	bne.n	80035f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	58024800 	.word	0x58024800

08003628 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	60d3      	str	r3, [r2, #12]
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	58024800 	.word	0x58024800

08003648 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	; 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f000 bc48 	b.w	8003eec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8088 	beq.w	800377a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366a:	4b99      	ldr	r3, [pc, #612]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003674:	4b96      	ldr	r3, [pc, #600]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	2b10      	cmp	r3, #16
 800367e:	d007      	beq.n	8003690 <HAL_RCC_OscConfig+0x48>
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	2b18      	cmp	r3, #24
 8003684:	d111      	bne.n	80036aa <HAL_RCC_OscConfig+0x62>
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	4b8f      	ldr	r3, [pc, #572]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d06d      	beq.n	8003778 <HAL_RCC_OscConfig+0x130>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d169      	bne.n	8003778 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f000 bc21 	b.w	8003eec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x7a>
 80036b4:	4b86      	ldr	r3, [pc, #536]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a85      	ldr	r2, [pc, #532]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e02e      	b.n	8003720 <HAL_RCC_OscConfig+0xd8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x9c>
 80036ca:	4b81      	ldr	r3, [pc, #516]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a80      	ldr	r2, [pc, #512]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b7e      	ldr	r3, [pc, #504]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a7d      	ldr	r2, [pc, #500]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xd8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0xc0>
 80036ee:	4b78      	ldr	r3, [pc, #480]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a77      	ldr	r2, [pc, #476]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b75      	ldr	r3, [pc, #468]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a74      	ldr	r2, [pc, #464]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xd8>
 8003708:	4b71      	ldr	r3, [pc, #452]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a70      	ldr	r2, [pc, #448]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b6e      	ldr	r3, [pc, #440]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6d      	ldr	r2, [pc, #436]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fd fd48 	bl	80011bc <HAL_GetTick>
 800372c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fd fd44 	bl	80011bc <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e3d4      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xe8>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fd fd34 	bl	80011bc <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fd fd30 	bl	80011bc <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e3c0      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800376a:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x110>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80ca 	beq.w	800391c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003788:	4b51      	ldr	r3, [pc, #324]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003790:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003792:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_RCC_OscConfig+0x166>
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2b18      	cmp	r3, #24
 80037a2:	d156      	bne.n	8003852 <HAL_RCC_OscConfig+0x20a>
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d151      	bne.n	8003852 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ae:	4b48      	ldr	r3, [pc, #288]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_RCC_OscConfig+0x17e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e392      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037c6:	4b42      	ldr	r3, [pc, #264]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 0219 	bic.w	r2, r3, #25
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	493f      	ldr	r1, [pc, #252]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fd fcf0 	bl	80011bc <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e0:	f7fd fcec 	bl	80011bc <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e37c      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	f7fd fd0d 	bl	800121c <HAL_GetREVID>
 8003802:	4603      	mov	r3, r0
 8003804:	f241 0203 	movw	r2, #4099	; 0x1003
 8003808:	4293      	cmp	r3, r2
 800380a:	d817      	bhi.n	800383c <HAL_RCC_OscConfig+0x1f4>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d108      	bne.n	8003826 <HAL_RCC_OscConfig+0x1de>
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800381c:	4a2c      	ldr	r2, [pc, #176]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 800381e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003822:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003824:	e07a      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	031b      	lsls	r3, r3, #12
 8003834:	4926      	ldr	r1, [pc, #152]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383a:	e06f      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	4921      	ldr	r1, [pc, #132]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003850:	e064      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d047      	beq.n	80038ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 0219 	bic.w	r2, r3, #25
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	491a      	ldr	r1, [pc, #104]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fd fca6 	bl	80011bc <HAL_GetTick>
 8003870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003874:	f7fd fca2 	bl	80011bc <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e332      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003892:	f7fd fcc3 	bl	800121c <HAL_GetREVID>
 8003896:	4603      	mov	r3, r0
 8003898:	f241 0203 	movw	r2, #4099	; 0x1003
 800389c:	4293      	cmp	r3, r2
 800389e:	d819      	bhi.n	80038d4 <HAL_RCC_OscConfig+0x28c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d108      	bne.n	80038ba <HAL_RCC_OscConfig+0x272>
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038b0:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b6:	6053      	str	r3, [r2, #4]
 80038b8:	e030      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	031b      	lsls	r3, r3, #12
 80038c8:	4901      	ldr	r1, [pc, #4]	; (80038d0 <HAL_RCC_OscConfig+0x288>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
 80038ce:	e025      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
 80038d0:	58024400 	.word	0x58024400
 80038d4:	4b9a      	ldr	r3, [pc, #616]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	4997      	ldr	r1, [pc, #604]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
 80038e8:	e018      	b.n	800391c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b95      	ldr	r3, [pc, #596]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a94      	ldr	r2, [pc, #592]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fd fc61 	bl	80011bc <HAL_GetTick>
 80038fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fd fc5d 	bl	80011bc <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e2ed      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003910:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f0      	bne.n	80038fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a9 	beq.w	8003a7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003932:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003934:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d007      	beq.n	8003950 <HAL_RCC_OscConfig+0x308>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b18      	cmp	r3, #24
 8003944:	d13a      	bne.n	80039bc <HAL_RCC_OscConfig+0x374>
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d135      	bne.n	80039bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003950:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_OscConfig+0x320>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	d001      	beq.n	8003968 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e2c1      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003968:	f7fd fc58 	bl	800121c <HAL_GetREVID>
 800396c:	4603      	mov	r3, r0
 800396e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003972:	4293      	cmp	r3, r2
 8003974:	d817      	bhi.n	80039a6 <HAL_RCC_OscConfig+0x35e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	2b20      	cmp	r3, #32
 800397c:	d108      	bne.n	8003990 <HAL_RCC_OscConfig+0x348>
 800397e:	4b70      	ldr	r3, [pc, #448]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003986:	4a6e      	ldr	r2, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800398c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800398e:	e075      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003990:	4b6b      	ldr	r3, [pc, #428]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	069b      	lsls	r3, r3, #26
 800399e:	4968      	ldr	r1, [pc, #416]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039a4:	e06a      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039a6:	4b66      	ldr	r3, [pc, #408]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	061b      	lsls	r3, r3, #24
 80039b4:	4962      	ldr	r1, [pc, #392]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ba:	e05f      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d042      	beq.n	8003a4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039c4:	4b5e      	ldr	r3, [pc, #376]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5d      	ldr	r2, [pc, #372]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd fbf4 	bl	80011bc <HAL_GetTick>
 80039d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039d8:	f7fd fbf0 	bl	80011bc <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e280      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ea:	4b55      	ldr	r3, [pc, #340]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039f6:	f7fd fc11 	bl	800121c <HAL_GetREVID>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d817      	bhi.n	8003a34 <HAL_RCC_OscConfig+0x3ec>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d108      	bne.n	8003a1e <HAL_RCC_OscConfig+0x3d6>
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a14:	4a4a      	ldr	r2, [pc, #296]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a1a:	6053      	str	r3, [r2, #4]
 8003a1c:	e02e      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
 8003a1e:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	069b      	lsls	r3, r3, #26
 8003a2c:	4944      	ldr	r1, [pc, #272]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
 8003a32:	e023      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
 8003a34:	4b42      	ldr	r3, [pc, #264]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	493f      	ldr	r1, [pc, #252]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60cb      	str	r3, [r1, #12]
 8003a48:	e018      	b.n	8003a7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a3c      	ldr	r2, [pc, #240]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a56:	f7fd fbb1 	bl	80011bc <HAL_GetTick>
 8003a5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a5e:	f7fd fbad 	bl	80011bc <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e23d      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a70:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d036      	beq.n	8003af6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d019      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a94:	4a2a      	ldr	r2, [pc, #168]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fb8e 	bl	80011bc <HAL_GetTick>
 8003aa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fd fb8a 	bl	80011bc <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e21a      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ab6:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x45c>
 8003ac2:	e018      	b.n	8003af6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fd fb74 	bl	80011bc <HAL_GetTick>
 8003ad4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fd fb70 	bl	80011bc <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e200      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d039      	beq.n	8003b76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a0c      	ldr	r2, [pc, #48]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b16:	f7fd fb51 	bl	80011bc <HAL_GetTick>
 8003b1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b1e:	f7fd fb4d 	bl	80011bc <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1dd      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x4d6>
 8003b3c:	e01b      	b.n	8003b76 <HAL_RCC_OscConfig+0x52e>
 8003b3e:	bf00      	nop
 8003b40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b44:	4b9b      	ldr	r3, [pc, #620]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a9a      	ldr	r2, [pc, #616]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003b4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b50:	f7fd fb34 	bl	80011bc <HAL_GetTick>
 8003b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b58:	f7fd fb30 	bl	80011bc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e1c0      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b6a:	4b92      	ldr	r3, [pc, #584]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8081 	beq.w	8003c86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b84:	4b8c      	ldr	r3, [pc, #560]	; (8003db8 <HAL_RCC_OscConfig+0x770>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a8b      	ldr	r2, [pc, #556]	; (8003db8 <HAL_RCC_OscConfig+0x770>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b90:	f7fd fb14 	bl	80011bc <HAL_GetTick>
 8003b94:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b98:	f7fd fb10 	bl	80011bc <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1a0      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003baa:	4b83      	ldr	r3, [pc, #524]	; (8003db8 <HAL_RCC_OscConfig+0x770>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCC_OscConfig+0x584>
 8003bbe:	4b7d      	ldr	r3, [pc, #500]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a7c      	ldr	r2, [pc, #496]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bca:	e02d      	b.n	8003c28 <HAL_RCC_OscConfig+0x5e0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10c      	bne.n	8003bee <HAL_RCC_OscConfig+0x5a6>
 8003bd4:	4b77      	ldr	r3, [pc, #476]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a76      	ldr	r2, [pc, #472]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	4b74      	ldr	r3, [pc, #464]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a73      	ldr	r2, [pc, #460]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
 8003bec:	e01c      	b.n	8003c28 <HAL_RCC_OscConfig+0x5e0>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b05      	cmp	r3, #5
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x5c8>
 8003bf6:	4b6f      	ldr	r3, [pc, #444]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a6e      	ldr	r2, [pc, #440]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
 8003c02:	4b6c      	ldr	r3, [pc, #432]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4a6b      	ldr	r2, [pc, #428]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0x5e0>
 8003c10:	4b68      	ldr	r3, [pc, #416]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a67      	ldr	r2, [pc, #412]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1c:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	4a64      	ldr	r2, [pc, #400]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c22:	f023 0304 	bic.w	r3, r3, #4
 8003c26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d015      	beq.n	8003c5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fd fac4 	bl	80011bc <HAL_GetTick>
 8003c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fd fac0 	bl	80011bc <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e14e      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c4e:	4b59      	ldr	r3, [pc, #356]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ee      	beq.n	8003c38 <HAL_RCC_OscConfig+0x5f0>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fd faae 	bl	80011bc <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fd faaa 	bl	80011bc <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e138      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1ee      	bne.n	8003c64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 812d 	beq.w	8003eea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c90:	4b48      	ldr	r3, [pc, #288]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c98:	2b18      	cmp	r3, #24
 8003c9a:	f000 80bd 	beq.w	8003e18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	f040 809e 	bne.w	8003de4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca8:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a41      	ldr	r2, [pc, #260]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fa82 	bl	80011bc <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd fa7e 	bl	80011bc <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e10e      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cce:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cda:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cde:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <HAL_RCC_OscConfig+0x774>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cea:	0112      	lsls	r2, r2, #4
 8003cec:	430a      	orrs	r2, r1
 8003cee:	4931      	ldr	r1, [pc, #196]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	628b      	str	r3, [r1, #40]	; 0x28
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	3b01      	subs	r3, #1
 8003d04:	025b      	lsls	r3, r3, #9
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	061b      	lsls	r3, r3, #24
 8003d20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d24:	4923      	ldr	r1, [pc, #140]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d2a:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	4a21      	ldr	r2, [pc, #132]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d36:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3a:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <HAL_RCC_OscConfig+0x778>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d42:	00d2      	lsls	r2, r2, #3
 8003d44:	491b      	ldr	r1, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	f023 020c 	bic.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	4917      	ldr	r1, [pc, #92]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d5c:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f023 0202 	bic.w	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	4912      	ldr	r1, [pc, #72]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <HAL_RCC_OscConfig+0x76c>)
 8003da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fd fa07 	bl	80011bc <HAL_GetTick>
 8003dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003db0:	e011      	b.n	8003dd6 <HAL_RCC_OscConfig+0x78e>
 8003db2:	bf00      	nop
 8003db4:	58024400 	.word	0x58024400
 8003db8:	58024800 	.word	0x58024800
 8003dbc:	fffffc0c 	.word	0xfffffc0c
 8003dc0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fd f9fa 	bl	80011bc <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e08a      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x77c>
 8003de2:	e082      	b.n	8003eea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de4:	4b43      	ldr	r3, [pc, #268]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a42      	ldr	r2, [pc, #264]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd f9e4 	bl	80011bc <HAL_GetTick>
 8003df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd f9e0 	bl	80011bc <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e070      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x7b0>
 8003e16:	e068      	b.n	8003eea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e18:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e1e:	4b35      	ldr	r3, [pc, #212]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d031      	beq.n	8003e90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f003 0203 	and.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d12a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d122      	bne.n	8003e90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d11a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	0a5b      	lsrs	r3, r3, #9
 8003e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d111      	bne.n	8003e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d108      	bne.n	8003e90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	0e1b      	lsrs	r3, r3, #24
 8003e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e02b      	b.n	8003eec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e94:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	08db      	lsrs	r3, r3, #3
 8003e9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d01f      	beq.n	8003eea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eb6:	f7fd f981 	bl	80011bc <HAL_GetTick>
 8003eba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ebc:	bf00      	nop
 8003ebe:	f7fd f97d 	bl	80011bc <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d0f9      	beq.n	8003ebe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_RCC_OscConfig+0x8b0>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ed6:	00d2      	lsls	r2, r2, #3
 8003ed8:	4906      	ldr	r1, [pc, #24]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <HAL_RCC_OscConfig+0x8ac>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3730      	adds	r7, #48	; 0x30
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	ffff0007 	.word	0xffff0007

08003efc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e19c      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b8a      	ldr	r3, [pc, #552]	; (800413c <HAL_RCC_ClockConfig+0x240>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d910      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b87      	ldr	r3, [pc, #540]	; (800413c <HAL_RCC_ClockConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 020f 	bic.w	r2, r3, #15
 8003f26:	4985      	ldr	r1, [pc, #532]	; (800413c <HAL_RCC_ClockConfig+0x240>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b83      	ldr	r3, [pc, #524]	; (800413c <HAL_RCC_ClockConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e184      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d010      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	4b7b      	ldr	r3, [pc, #492]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d908      	bls.n	8003f6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f5c:	4b78      	ldr	r3, [pc, #480]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	4975      	ldr	r1, [pc, #468]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d010      	beq.n	8003f9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	4b70      	ldr	r3, [pc, #448]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d908      	bls.n	8003f9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f8a:	4b6d      	ldr	r3, [pc, #436]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	496a      	ldr	r1, [pc, #424]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d010      	beq.n	8003fca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	4b64      	ldr	r3, [pc, #400]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d908      	bls.n	8003fca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fb8:	4b61      	ldr	r3, [pc, #388]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	495e      	ldr	r1, [pc, #376]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d010      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	4b59      	ldr	r3, [pc, #356]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d908      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003fe6:	4b56      	ldr	r3, [pc, #344]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	4953      	ldr	r1, [pc, #332]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d010      	beq.n	8004026 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	4b4d      	ldr	r3, [pc, #308]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	429a      	cmp	r2, r3
 8004012:	d908      	bls.n	8004026 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004014:	4b4a      	ldr	r3, [pc, #296]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f023 020f 	bic.w	r2, r3, #15
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4947      	ldr	r1, [pc, #284]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004022:	4313      	orrs	r3, r2
 8004024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d055      	beq.n	80040de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004032:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	4940      	ldr	r1, [pc, #256]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004040:	4313      	orrs	r3, r2
 8004042:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d107      	bne.n	800405c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800404c:	4b3c      	ldr	r3, [pc, #240]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d121      	bne.n	800409c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0f6      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d107      	bne.n	8004074 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004064:	4b36      	ldr	r3, [pc, #216]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d115      	bne.n	800409c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0ea      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800407c:	4b30      	ldr	r3, [pc, #192]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0de      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800408c:	4b2c      	ldr	r3, [pc, #176]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0d6      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800409c:	4b28      	ldr	r3, [pc, #160]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f023 0207 	bic.w	r2, r3, #7
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4925      	ldr	r1, [pc, #148]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ae:	f7fd f885 	bl	80011bc <HAL_GetTick>
 80040b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b6:	f7fd f881 	bl	80011bc <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0be      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040cc:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	429a      	cmp	r2, r3
 80040dc:	d1eb      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d208      	bcs.n	800410c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f023 020f 	bic.w	r2, r3, #15
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	490e      	ldr	r1, [pc, #56]	; (8004140 <HAL_RCC_ClockConfig+0x244>)
 8004108:	4313      	orrs	r3, r2
 800410a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <HAL_RCC_ClockConfig+0x240>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d214      	bcs.n	8004144 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_RCC_ClockConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 020f 	bic.w	r2, r3, #15
 8004122:	4906      	ldr	r1, [pc, #24]	; (800413c <HAL_RCC_ClockConfig+0x240>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b04      	ldr	r3, [pc, #16]	; (800413c <HAL_RCC_ClockConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e086      	b.n	800424a <HAL_RCC_ClockConfig+0x34e>
 800413c:	52002000 	.word	0x52002000
 8004140:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	4b3f      	ldr	r3, [pc, #252]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800415c:	429a      	cmp	r2, r3
 800415e:	d208      	bcs.n	8004172 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004160:	4b3c      	ldr	r3, [pc, #240]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	4939      	ldr	r1, [pc, #228]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 800416e:	4313      	orrs	r3, r2
 8004170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d010      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	4b34      	ldr	r3, [pc, #208]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800418a:	429a      	cmp	r2, r3
 800418c:	d208      	bcs.n	80041a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800418e:	4b31      	ldr	r3, [pc, #196]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	492e      	ldr	r1, [pc, #184]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 800419c:	4313      	orrs	r3, r2
 800419e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	4b28      	ldr	r3, [pc, #160]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d208      	bcs.n	80041ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	4922      	ldr	r1, [pc, #136]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d010      	beq.n	80041fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d208      	bcs.n	80041fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	4917      	ldr	r1, [pc, #92]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041fc:	f000 f834 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	4912      	ldr	r1, [pc, #72]	; (8004258 <HAL_RCC_ClockConfig+0x35c>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
 8004218:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <HAL_RCC_ClockConfig+0x358>)
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	4a0d      	ldr	r2, [pc, #52]	; (8004258 <HAL_RCC_ClockConfig+0x35c>)
 8004224:	5cd3      	ldrb	r3, [r2, r3]
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
 8004230:	4a0a      	ldr	r2, [pc, #40]	; (800425c <HAL_RCC_ClockConfig+0x360>)
 8004232:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004234:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <HAL_RCC_ClockConfig+0x364>)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <HAL_RCC_ClockConfig+0x368>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7fc ff72 	bl	8001128 <HAL_InitTick>
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	58024400 	.word	0x58024400
 8004258:	080109b0 	.word	0x080109b0
 800425c:	24000004 	.word	0x24000004
 8004260:	24000000 	.word	0x24000000
 8004264:	24000008 	.word	0x24000008

08004268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426e:	4bb3      	ldr	r3, [pc, #716]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004276:	2b18      	cmp	r3, #24
 8004278:	f200 8155 	bhi.w	8004526 <HAL_RCC_GetSysClockFreq+0x2be>
 800427c:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <HAL_RCC_GetSysClockFreq+0x1c>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	080042e9 	.word	0x080042e9
 8004288:	08004527 	.word	0x08004527
 800428c:	08004527 	.word	0x08004527
 8004290:	08004527 	.word	0x08004527
 8004294:	08004527 	.word	0x08004527
 8004298:	08004527 	.word	0x08004527
 800429c:	08004527 	.word	0x08004527
 80042a0:	08004527 	.word	0x08004527
 80042a4:	0800430f 	.word	0x0800430f
 80042a8:	08004527 	.word	0x08004527
 80042ac:	08004527 	.word	0x08004527
 80042b0:	08004527 	.word	0x08004527
 80042b4:	08004527 	.word	0x08004527
 80042b8:	08004527 	.word	0x08004527
 80042bc:	08004527 	.word	0x08004527
 80042c0:	08004527 	.word	0x08004527
 80042c4:	08004315 	.word	0x08004315
 80042c8:	08004527 	.word	0x08004527
 80042cc:	08004527 	.word	0x08004527
 80042d0:	08004527 	.word	0x08004527
 80042d4:	08004527 	.word	0x08004527
 80042d8:	08004527 	.word	0x08004527
 80042dc:	08004527 	.word	0x08004527
 80042e0:	08004527 	.word	0x08004527
 80042e4:	0800431b 	.word	0x0800431b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e8:	4b94      	ldr	r3, [pc, #592]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042f4:	4b91      	ldr	r3, [pc, #580]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	08db      	lsrs	r3, r3, #3
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	4a90      	ldr	r2, [pc, #576]	; (8004540 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004306:	e111      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004308:	4b8d      	ldr	r3, [pc, #564]	; (8004540 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800430a:	61bb      	str	r3, [r7, #24]
      break;
 800430c:	e10e      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800430e:	4b8d      	ldr	r3, [pc, #564]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004310:	61bb      	str	r3, [r7, #24]
      break;
 8004312:	e10b      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004314:	4b8c      	ldr	r3, [pc, #560]	; (8004548 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004316:	61bb      	str	r3, [r7, #24]
      break;
 8004318:	e108      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800431a:	4b88      	ldr	r3, [pc, #544]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004324:	4b85      	ldr	r3, [pc, #532]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004330:	4b82      	ldr	r3, [pc, #520]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800433a:	4b80      	ldr	r3, [pc, #512]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	08db      	lsrs	r3, r3, #3
 8004340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80e1 	beq.w	8004520 <HAL_RCC_GetSysClockFreq+0x2b8>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b02      	cmp	r3, #2
 8004362:	f000 8083 	beq.w	800446c <HAL_RCC_GetSysClockFreq+0x204>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b02      	cmp	r3, #2
 800436a:	f200 80a1 	bhi.w	80044b0 <HAL_RCC_GetSysClockFreq+0x248>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x114>
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d056      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x1c0>
 800437a:	e099      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800437c:	4b6f      	ldr	r3, [pc, #444]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d02d      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004388:	4b6c      	ldr	r3, [pc, #432]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	08db      	lsrs	r3, r3, #3
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	4a6b      	ldr	r2, [pc, #428]	; (8004540 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
 8004398:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	ee07 3a90 	vmov	s15, r3
 80043a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b2:	4b62      	ldr	r3, [pc, #392]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800454c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80043e2:	e087      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004550 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f6:	4b51      	ldr	r3, [pc, #324]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004406:	ed97 6a02 	vldr	s12, [r7, #8]
 800440a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800454c <HAL_RCC_GetSysClockFreq+0x2e4>
 800440e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800441a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800441e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004426:	e065      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004432:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004554 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443a:	4b40      	ldr	r3, [pc, #256]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444a:	ed97 6a02 	vldr	s12, [r7, #8]
 800444e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800454c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800445e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800446a:	e043      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004558 <HAL_RCC_GetSysClockFreq+0x2f0>
 800447a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447e:	4b2f      	ldr	r3, [pc, #188]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004492:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800454c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044ae:	e021      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004554 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800454c <HAL_RCC_GetSysClockFreq+0x2e4>
 80044da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	0a5b      	lsrs	r3, r3, #9
 80044fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044fe:	3301      	adds	r3, #1
 8004500:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800450c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004518:	ee17 3a90 	vmov	r3, s15
 800451c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800451e:	e005      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	61bb      	str	r3, [r7, #24]
      break;
 8004524:	e002      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004526:	4b07      	ldr	r3, [pc, #28]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004528:	61bb      	str	r3, [r7, #24]
      break;
 800452a:	bf00      	nop
  }

  return sysclockfreq;
 800452c:	69bb      	ldr	r3, [r7, #24]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	58024400 	.word	0x58024400
 8004540:	03d09000 	.word	0x03d09000
 8004544:	003d0900 	.word	0x003d0900
 8004548:	007a1200 	.word	0x007a1200
 800454c:	46000000 	.word	0x46000000
 8004550:	4c742400 	.word	0x4c742400
 8004554:	4a742400 	.word	0x4a742400
 8004558:	4af42400 	.word	0x4af42400

0800455c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004562:	f7ff fe81 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8004566:	4602      	mov	r2, r0
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_RCC_GetHCLKFreq+0x50>)
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	490f      	ldr	r1, [pc, #60]	; (80045b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004574:	5ccb      	ldrb	r3, [r1, r3]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	fa22 f303 	lsr.w	r3, r2, r3
 800457e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <HAL_RCC_GetHCLKFreq+0x50>)
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	4a07      	ldr	r2, [pc, #28]	; (80045b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004598:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800459a:	4a07      	ldr	r2, [pc, #28]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80045a2:	681b      	ldr	r3, [r3, #0]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	58024400 	.word	0x58024400
 80045b0:	080109b0 	.word	0x080109b0
 80045b4:	24000004 	.word	0x24000004
 80045b8:	24000000 	.word	0x24000000

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045c0:	f7ff ffcc 	bl	800455c <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4904      	ldr	r1, [pc, #16]	; (80045e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	58024400 	.word	0x58024400
 80045e4:	080109b0 	.word	0x080109b0

080045e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045ec:	f7ff ffb6 	bl	800455c <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4904      	ldr	r1, [pc, #16]	; (8004610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	58024400 	.word	0x58024400
 8004610:	080109b0 	.word	0x080109b0

08004614 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004618:	b0ca      	sub	sp, #296	; 0x128
 800461a:	af00      	add	r7, sp, #0
 800461c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004626:	2300      	movs	r3, #0
 8004628:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004638:	2500      	movs	r5, #0
 800463a:	ea54 0305 	orrs.w	r3, r4, r5
 800463e:	d049      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004646:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800464a:	d02f      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800464c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004650:	d828      	bhi.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004656:	d01a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800465c:	d822      	bhi.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004666:	d007      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004668:	e01c      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800466a:	4bb8      	ldr	r3, [pc, #736]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	4ab7      	ldr	r2, [pc, #732]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004674:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004676:	e01a      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467c:	3308      	adds	r3, #8
 800467e:	2102      	movs	r1, #2
 8004680:	4618      	mov	r0, r3
 8004682:	f001 fc8f 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800468c:	e00f      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004692:	3328      	adds	r3, #40	; 0x28
 8004694:	2102      	movs	r1, #2
 8004696:	4618      	mov	r0, r3
 8004698:	f001 fd36 	bl	8006108 <RCCEx_PLL3_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046a2:	e004      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80046ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046b6:	4ba5      	ldr	r3, [pc, #660]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c4:	4aa1      	ldr	r2, [pc, #644]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6513      	str	r3, [r2, #80]	; 0x50
 80046ca:	e003      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80046e0:	f04f 0900 	mov.w	r9, #0
 80046e4:	ea58 0309 	orrs.w	r3, r8, r9
 80046e8:	d047      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d82a      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004711 	.word	0x08004711
 8004700:	0800471f 	.word	0x0800471f
 8004704:	08004735 	.word	0x08004735
 8004708:	08004753 	.word	0x08004753
 800470c:	08004753 	.word	0x08004753
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004710:	4b8e      	ldr	r3, [pc, #568]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	4a8d      	ldr	r2, [pc, #564]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800471c:	e01a      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004722:	3308      	adds	r3, #8
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f001 fc3c 	bl	8005fa4 <RCCEx_PLL2_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004732:	e00f      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	3328      	adds	r3, #40	; 0x28
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f001 fce3 	bl	8006108 <RCCEx_PLL3_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004748:	e004      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004750:	e000      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800475c:	4b7b      	ldr	r3, [pc, #492]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	f023 0107 	bic.w	r1, r3, #7
 8004764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	4a78      	ldr	r2, [pc, #480]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800476c:	430b      	orrs	r3, r1
 800476e:	6513      	str	r3, [r2, #80]	; 0x50
 8004770:	e003      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004776:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004786:	f04f 0b00 	mov.w	fp, #0
 800478a:	ea5a 030b 	orrs.w	r3, sl, fp
 800478e:	d04c      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479a:	d030      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800479c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a0:	d829      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047a2:	2bc0      	cmp	r3, #192	; 0xc0
 80047a4:	d02d      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80047a6:	2bc0      	cmp	r3, #192	; 0xc0
 80047a8:	d825      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047aa:	2b80      	cmp	r3, #128	; 0x80
 80047ac:	d018      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047ae:	2b80      	cmp	r3, #128	; 0x80
 80047b0:	d821      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d007      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80047ba:	e01c      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047bc:	4b63      	ldr	r3, [pc, #396]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	4a62      	ldr	r2, [pc, #392]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047c8:	e01c      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ce:	3308      	adds	r3, #8
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 fbe6 	bl	8005fa4 <RCCEx_PLL2_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047de:	e011      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e4:	3328      	adds	r3, #40	; 0x28
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 fc8d 	bl	8006108 <RCCEx_PLL3_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047f4:	e006      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047fc:	e002      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004804:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800480c:	4b4f      	ldr	r3, [pc, #316]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004810:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	4a4c      	ldr	r2, [pc, #304]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800481c:	430b      	orrs	r3, r1
 800481e:	6513      	str	r3, [r2, #80]	; 0x50
 8004820:	e003      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004826:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004836:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800483a:	2300      	movs	r3, #0
 800483c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004840:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004844:	460b      	mov	r3, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	d053      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004852:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004856:	d035      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004858:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800485c:	d82e      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800485e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004862:	d031      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004864:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004868:	d828      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800486a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800486e:	d01a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004874:	d822      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800487a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800487e:	d007      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004880:	e01c      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004882:	4b32      	ldr	r3, [pc, #200]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	4a31      	ldr	r2, [pc, #196]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800488c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800488e:	e01c      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004894:	3308      	adds	r3, #8
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f001 fb83 	bl	8005fa4 <RCCEx_PLL2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80048a4:	e011      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048aa:	3328      	adds	r3, #40	; 0x28
 80048ac:	2100      	movs	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 fc2a 	bl	8006108 <RCCEx_PLL3_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048ba:	e006      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048c2:	e002      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048d2:	4b1e      	ldr	r3, [pc, #120]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048e2:	4a1a      	ldr	r2, [pc, #104]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6593      	str	r3, [r2, #88]	; 0x58
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80048fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004908:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d056      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800491a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800491e:	d038      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004924:	d831      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004926:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800492a:	d034      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800492c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004930:	d82b      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004936:	d01d      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800493c:	d825      	bhi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d006      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004942:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004948:	e01f      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800494a:	bf00      	nop
 800494c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004950:	4ba2      	ldr	r3, [pc, #648]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	4aa1      	ldr	r2, [pc, #644]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800495c:	e01c      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004962:	3308      	adds	r3, #8
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f001 fb1c 	bl	8005fa4 <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004972:	e011      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004978:	3328      	adds	r3, #40	; 0x28
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fbc3 	bl	8006108 <RCCEx_PLL3_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004988:	e006      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004990:	e002      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049a0:	4b8e      	ldr	r3, [pc, #568]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049b0:	4a8a      	ldr	r2, [pc, #552]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b2:	430b      	orrs	r3, r1
 80049b4:	6593      	str	r3, [r2, #88]	; 0x58
 80049b6:	e003      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80049cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d03a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e6:	2b30      	cmp	r3, #48	; 0x30
 80049e8:	d01f      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80049ea:	2b30      	cmp	r3, #48	; 0x30
 80049ec:	d819      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d00c      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d815      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d019      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d111      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049fe:	4b77      	ldr	r3, [pc, #476]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	4a76      	ldr	r2, [pc, #472]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a0a:	e011      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a10:	3308      	adds	r3, #8
 8004a12:	2102      	movs	r1, #2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 fac5 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a20:	e006      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a28:	e002      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a38:	4b68      	ldr	r3, [pc, #416]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a46:	4a65      	ldr	r2, [pc, #404]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a4c:	e003      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004a62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4313      	orrs	r3, r2
 8004a74:	d051      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a80:	d035      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a86:	d82e      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a8c:	d031      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a92:	d828      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a98:	d01a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9e:	d822      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa8:	d007      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004aaa:	e01c      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aac:	4b4b      	ldr	r3, [pc, #300]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	4a4a      	ldr	r2, [pc, #296]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ab8:	e01c      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004abe:	3308      	adds	r3, #8
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fa6e 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ace:	e011      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad4:	3328      	adds	r3, #40	; 0x28
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 fb15 	bl	8006108 <RCCEx_PLL3_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ae4:	e006      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aec:	e002      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004afc:	4b37      	ldr	r3, [pc, #220]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0a:	4a34      	ldr	r2, [pc, #208]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6513      	str	r3, [r2, #80]	; 0x50
 8004b10:	e003      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004b26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004b34:	460b      	mov	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	d056      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b44:	d033      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b4a:	d82c      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b50:	d02f      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b56:	d826      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b5c:	d02b      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b62:	d820      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b68:	d012      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b6e:	d81a      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d022      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d115      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7e:	3308      	adds	r3, #8
 8004b80:	2101      	movs	r1, #1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 fa0e 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b8e:	e015      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b94:	3328      	adds	r3, #40	; 0x28
 8004b96:	2101      	movs	r1, #1
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 fab5 	bl	8006108 <RCCEx_PLL3_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bae:	bf00      	nop
 8004bb0:	e004      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bb2:	bf00      	nop
 8004bb4:	e002      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10d      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd2:	4a02      	ldr	r2, [pc, #8]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	6513      	str	r3, [r2, #80]	; 0x50
 8004bd8:	e006      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004bda:	bf00      	nop
 8004bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004be4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bfe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	d055      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c14:	d033      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c1a:	d82c      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c20:	d02f      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c26:	d826      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c2c:	d02b      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c32:	d820      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c38:	d012      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c3e:	d81a      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d022      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c48:	d115      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4e:	3308      	adds	r3, #8
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 f9a6 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c5e:	e015      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c64:	3328      	adds	r3, #40	; 0x28
 8004c66:	2101      	movs	r1, #1
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fa4d 	bl	8006108 <RCCEx_PLL3_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c74:	e00a      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c7c:	e006      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c7e:	bf00      	nop
 8004c80:	e004      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c94:	4ba3      	ldr	r3, [pc, #652]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c98:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ca4:	4a9f      	ldr	r2, [pc, #636]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	d037      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cde:	d00e      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce4:	d816      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d018      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cee:	d111      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a8b      	ldr	r2, [pc, #556]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cfc:	e00f      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d02:	3308      	adds	r3, #8
 8004d04:	2101      	movs	r1, #1
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 f94c 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d1a:	e000      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d26:	4b7f      	ldr	r3, [pc, #508]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d34:	4a7b      	ldr	r2, [pc, #492]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d36:	430b      	orrs	r3, r1
 8004d38:	6513      	str	r3, [r2, #80]	; 0x50
 8004d3a:	e003      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d54:	2300      	movs	r3, #0
 8004d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004d5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	d039      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d81c      	bhi.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004db1 	.word	0x08004db1
 8004d78:	08004d85 	.word	0x08004d85
 8004d7c:	08004d93 	.word	0x08004d93
 8004d80:	08004db1 	.word	0x08004db1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d84:	4b67      	ldr	r3, [pc, #412]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	4a66      	ldr	r2, [pc, #408]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d90:	e00f      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d96:	3308      	adds	r3, #8
 8004d98:	2102      	movs	r1, #2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 f902 	bl	8005fa4 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dba:	4b5a      	ldr	r3, [pc, #360]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dbe:	f023 0103 	bic.w	r1, r3, #3
 8004dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc8:	4a56      	ldr	r2, [pc, #344]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004df2:	460b      	mov	r3, r1
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f000 809f 	beq.w	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dfa:	4b4b      	ldr	r3, [pc, #300]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a4a      	ldr	r2, [pc, #296]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e06:	f7fc f9d9 	bl	80011bc <HAL_GetTick>
 8004e0a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e10:	f7fc f9d4 	bl	80011bc <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	; 0x64
 8004e1e:	d903      	bls.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e26:	e005      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e28:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0ed      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004e34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d179      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e3c:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e48:	4053      	eors	r3, r2
 8004e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d015      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e52:	4b34      	ldr	r3, [pc, #208]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e5e:	4b31      	ldr	r3, [pc, #196]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	4a30      	ldr	r2, [pc, #192]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	4a2d      	ldr	r2, [pc, #180]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e76:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8a:	d118      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fc f996 	bl	80011bc <HAL_GetTick>
 8004e90:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e94:	e00d      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fc f991 	bl	80011bc <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d903      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004eb0:	e005      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0eb      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d129      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004ed8:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ee8:	091a      	lsrs	r2, r3, #4
 8004eea:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	4a0d      	ldr	r2, [pc, #52]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6113      	str	r3, [r2, #16]
 8004ef4:	e005      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004efc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f00:	6113      	str	r3, [r2, #16]
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f12:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6713      	str	r3, [r2, #112]	; 0x70
 8004f18:	e00e      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004f22:	e009      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f24:	58024400 	.word	0x58024400
 8004f28:	58024800 	.word	0x58024800
 8004f2c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f002 0301 	and.w	r3, r2, #1
 8004f44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f000 8089 	beq.w	800506c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f60:	2b28      	cmp	r3, #40	; 0x28
 8004f62:	d86b      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08005045 	.word	0x08005045
 8004f70:	0800503d 	.word	0x0800503d
 8004f74:	0800503d 	.word	0x0800503d
 8004f78:	0800503d 	.word	0x0800503d
 8004f7c:	0800503d 	.word	0x0800503d
 8004f80:	0800503d 	.word	0x0800503d
 8004f84:	0800503d 	.word	0x0800503d
 8004f88:	0800503d 	.word	0x0800503d
 8004f8c:	08005011 	.word	0x08005011
 8004f90:	0800503d 	.word	0x0800503d
 8004f94:	0800503d 	.word	0x0800503d
 8004f98:	0800503d 	.word	0x0800503d
 8004f9c:	0800503d 	.word	0x0800503d
 8004fa0:	0800503d 	.word	0x0800503d
 8004fa4:	0800503d 	.word	0x0800503d
 8004fa8:	0800503d 	.word	0x0800503d
 8004fac:	08005027 	.word	0x08005027
 8004fb0:	0800503d 	.word	0x0800503d
 8004fb4:	0800503d 	.word	0x0800503d
 8004fb8:	0800503d 	.word	0x0800503d
 8004fbc:	0800503d 	.word	0x0800503d
 8004fc0:	0800503d 	.word	0x0800503d
 8004fc4:	0800503d 	.word	0x0800503d
 8004fc8:	0800503d 	.word	0x0800503d
 8004fcc:	08005045 	.word	0x08005045
 8004fd0:	0800503d 	.word	0x0800503d
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	0800503d 	.word	0x0800503d
 8004fdc:	0800503d 	.word	0x0800503d
 8004fe0:	0800503d 	.word	0x0800503d
 8004fe4:	0800503d 	.word	0x0800503d
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08005045 	.word	0x08005045
 8004ff0:	0800503d 	.word	0x0800503d
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	0800503d 	.word	0x0800503d
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	0800503d 	.word	0x0800503d
 8005004:	0800503d 	.word	0x0800503d
 8005008:	0800503d 	.word	0x0800503d
 800500c:	08005045 	.word	0x08005045
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005014:	3308      	adds	r3, #8
 8005016:	2101      	movs	r1, #1
 8005018:	4618      	mov	r0, r3
 800501a:	f000 ffc3 	bl	8005fa4 <RCCEx_PLL2_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005024:	e00f      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502a:	3328      	adds	r3, #40	; 0x28
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f001 f86a 	bl	8006108 <RCCEx_PLL3_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800503a:	e004      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005042:	e000      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800504e:	4bbf      	ldr	r3, [pc, #764]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800505c:	4abb      	ldr	r2, [pc, #748]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800505e:	430b      	orrs	r3, r1
 8005060:	6553      	str	r3, [r2, #84]	; 0x54
 8005062:	e003      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005068:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800506c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f002 0302 	and.w	r3, r2, #2
 8005078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005082:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005086:	460b      	mov	r3, r1
 8005088:	4313      	orrs	r3, r2
 800508a:	d041      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005092:	2b05      	cmp	r3, #5
 8005094:	d824      	bhi.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050e9 	.word	0x080050e9
 80050a0:	080050b5 	.word	0x080050b5
 80050a4:	080050cb 	.word	0x080050cb
 80050a8:	080050e9 	.word	0x080050e9
 80050ac:	080050e9 	.word	0x080050e9
 80050b0:	080050e9 	.word	0x080050e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b8:	3308      	adds	r3, #8
 80050ba:	2101      	movs	r1, #1
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 ff71 	bl	8005fa4 <RCCEx_PLL2_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050c8:	e00f      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ce:	3328      	adds	r3, #40	; 0x28
 80050d0:	2101      	movs	r1, #1
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 f818 	bl	8006108 <RCCEx_PLL3_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050de:	e004      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050e6:	e000      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80050e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050f2:	4b96      	ldr	r3, [pc, #600]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	f023 0107 	bic.w	r1, r3, #7
 80050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005100:	4a92      	ldr	r2, [pc, #584]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005102:	430b      	orrs	r3, r1
 8005104:	6553      	str	r3, [r2, #84]	; 0x54
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800510c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f002 0304 	and.w	r3, r2, #4
 800511c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005126:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d044      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005138:	2b05      	cmp	r3, #5
 800513a:	d825      	bhi.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800513c:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800513e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005142:	bf00      	nop
 8005144:	08005191 	.word	0x08005191
 8005148:	0800515d 	.word	0x0800515d
 800514c:	08005173 	.word	0x08005173
 8005150:	08005191 	.word	0x08005191
 8005154:	08005191 	.word	0x08005191
 8005158:	08005191 	.word	0x08005191
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800515c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005160:	3308      	adds	r3, #8
 8005162:	2101      	movs	r1, #1
 8005164:	4618      	mov	r0, r3
 8005166:	f000 ff1d 	bl	8005fa4 <RCCEx_PLL2_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005170:	e00f      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005176:	3328      	adds	r3, #40	; 0x28
 8005178:	2101      	movs	r1, #1
 800517a:	4618      	mov	r0, r3
 800517c:	f000 ffc4 	bl	8006108 <RCCEx_PLL3_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005186:	e004      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800518e:	e000      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800519a:	4b6c      	ldr	r3, [pc, #432]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f023 0107 	bic.w	r1, r3, #7
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051aa:	4a68      	ldr	r2, [pc, #416]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6593      	str	r3, [r2, #88]	; 0x58
 80051b0:	e003      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f002 0320 	and.w	r3, r2, #32
 80051c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d055      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051e6:	d033      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80051e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ec:	d82c      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f2:	d02f      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f8:	d826      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051fe:	d02b      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005200:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005204:	d820      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800520a:	d012      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800520c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005210:	d81a      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d022      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800521a:	d115      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005220:	3308      	adds	r3, #8
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f000 febd 	bl	8005fa4 <RCCEx_PLL2_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005230:	e015      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005236:	3328      	adds	r3, #40	; 0x28
 8005238:	2102      	movs	r1, #2
 800523a:	4618      	mov	r0, r3
 800523c:	f000 ff64 	bl	8006108 <RCCEx_PLL3_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005246:	e00a      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800524e:	e006      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005250:	bf00      	nop
 8005252:	e004      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005254:	bf00      	nop
 8005256:	e002      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005258:	bf00      	nop
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800525c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10b      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005266:	4b39      	ldr	r3, [pc, #228]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005276:	4a35      	ldr	r2, [pc, #212]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005278:	430b      	orrs	r3, r1
 800527a:	6553      	str	r3, [r2, #84]	; 0x54
 800527c:	e003      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005282:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005296:	2300      	movs	r3, #0
 8005298:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800529c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4313      	orrs	r3, r2
 80052a4:	d058      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052b2:	d033      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80052b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052b8:	d82c      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052be:	d02f      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80052c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c4:	d826      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ca:	d02b      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80052cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052d0:	d820      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d6:	d012      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80052d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052dc:	d81a      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d022      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80052e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e6:	d115      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ec:	3308      	adds	r3, #8
 80052ee:	2100      	movs	r1, #0
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fe57 	bl	8005fa4 <RCCEx_PLL2_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052fc:	e015      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005302:	3328      	adds	r3, #40	; 0x28
 8005304:	2102      	movs	r1, #2
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fefe 	bl	8006108 <RCCEx_PLL3_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005312:	e00a      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800531a:	e006      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800531c:	bf00      	nop
 800531e:	e004      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005320:	bf00      	nop
 8005322:	e002      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005324:	bf00      	nop
 8005326:	e000      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800532a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10e      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005342:	4a02      	ldr	r2, [pc, #8]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005344:	430b      	orrs	r3, r1
 8005346:	6593      	str	r3, [r2, #88]	; 0x58
 8005348:	e006      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800534a:	bf00      	nop
 800534c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005354:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005368:	2300      	movs	r3, #0
 800536a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800536e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005372:	460b      	mov	r3, r1
 8005374:	4313      	orrs	r3, r2
 8005376:	d055      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005380:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005384:	d033      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005386:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800538a:	d82c      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800538c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005390:	d02f      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005396:	d826      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005398:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800539c:	d02b      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800539e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053a2:	d820      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053a8:	d012      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80053aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ae:	d81a      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d022      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80053b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b8:	d115      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053be:	3308      	adds	r3, #8
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fdee 	bl	8005fa4 <RCCEx_PLL2_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053ce:	e015      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d4:	3328      	adds	r3, #40	; 0x28
 80053d6:	2102      	movs	r1, #2
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fe95 	bl	8006108 <RCCEx_PLL3_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053e4:	e00a      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053ec:	e006      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053ee:	bf00      	nop
 80053f0:	e004      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053f2:	bf00      	nop
 80053f4:	e002      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005404:	4ba1      	ldr	r3, [pc, #644]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005408:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005410:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005414:	4a9d      	ldr	r2, [pc, #628]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005416:	430b      	orrs	r3, r1
 8005418:	6593      	str	r3, [r2, #88]	; 0x58
 800541a:	e003      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005420:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f002 0308 	and.w	r3, r2, #8
 8005430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005434:	2300      	movs	r3, #0
 8005436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800543a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800543e:	460b      	mov	r3, r1
 8005440:	4313      	orrs	r3, r2
 8005442:	d01e      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005450:	d10c      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005456:	3328      	adds	r3, #40	; 0x28
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fe54 	bl	8006108 <RCCEx_PLL3_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800546c:	4b87      	ldr	r3, [pc, #540]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547c:	4a83      	ldr	r2, [pc, #524]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800547e:	430b      	orrs	r3, r1
 8005480:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f002 0310 	and.w	r3, r2, #16
 800548e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005492:	2300      	movs	r3, #0
 8005494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005498:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800549c:	460b      	mov	r3, r1
 800549e:	4313      	orrs	r3, r2
 80054a0:	d01e      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ae:	d10c      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b4:	3328      	adds	r3, #40	; 0x28
 80054b6:	2102      	movs	r1, #2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fe25 	bl	8006108 <RCCEx_PLL3_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ca:	4b70      	ldr	r3, [pc, #448]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054da:	4a6c      	ldr	r2, [pc, #432]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80054ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80054fa:	460b      	mov	r3, r1
 80054fc:	4313      	orrs	r3, r2
 80054fe:	d03e      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005504:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800550c:	d022      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800550e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005512:	d81b      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d00b      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800551e:	e015      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005524:	3308      	adds	r3, #8
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fd3b 	bl	8005fa4 <RCCEx_PLL2_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005534:	e00f      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553a:	3328      	adds	r3, #40	; 0x28
 800553c:	2102      	movs	r1, #2
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fde2 	bl	8006108 <RCCEx_PLL3_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800554a:	e004      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10b      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800555e:	4b4b      	ldr	r3, [pc, #300]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800556a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800556e:	4a47      	ldr	r2, [pc, #284]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6593      	str	r3, [r2, #88]	; 0x58
 8005574:	e003      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800557a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800557e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800558a:	67bb      	str	r3, [r7, #120]	; 0x78
 800558c:	2300      	movs	r3, #0
 800558e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005590:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d03b      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055a6:	d01f      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80055a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055ac:	d818      	bhi.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80055ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b2:	d003      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80055b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b8:	d007      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80055ba:	e011      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055bc:	4b33      	ldr	r3, [pc, #204]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	4a32      	ldr	r2, [pc, #200]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055c8:	e00f      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ce:	3328      	adds	r3, #40	; 0x28
 80055d0:	2101      	movs	r1, #1
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fd98 	bl	8006108 <RCCEx_PLL3_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80055de:	e004      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055e6:	e000      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80055e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10b      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055f2:	4b26      	ldr	r3, [pc, #152]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005602:	4a22      	ldr	r2, [pc, #136]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005604:	430b      	orrs	r3, r1
 8005606:	6553      	str	r3, [r2, #84]	; 0x54
 8005608:	e003      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800560e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800561e:	673b      	str	r3, [r7, #112]	; 0x70
 8005620:	2300      	movs	r3, #0
 8005622:	677b      	str	r3, [r7, #116]	; 0x74
 8005624:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005628:	460b      	mov	r3, r1
 800562a:	4313      	orrs	r3, r2
 800562c:	d034      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563c:	d007      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800563e:	e011      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	4a11      	ldr	r2, [pc, #68]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800564c:	e00e      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005652:	3308      	adds	r3, #8
 8005654:	2102      	movs	r1, #2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fca4 	bl	8005fa4 <RCCEx_PLL2_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005662:	e003      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800566a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10d      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005682:	4a02      	ldr	r2, [pc, #8]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005684:	430b      	orrs	r3, r1
 8005686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005688:	e006      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800568a:	bf00      	nop
 800568c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005694:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80056a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a6:	2300      	movs	r3, #0
 80056a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80056ae:	460b      	mov	r3, r1
 80056b0:	4313      	orrs	r3, r2
 80056b2:	d00c      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b8:	3328      	adds	r3, #40	; 0x28
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fd23 	bl	8006108 <RCCEx_PLL3_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80056da:	663b      	str	r3, [r7, #96]	; 0x60
 80056dc:	2300      	movs	r3, #0
 80056de:	667b      	str	r3, [r7, #100]	; 0x64
 80056e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80056e4:	460b      	mov	r3, r1
 80056e6:	4313      	orrs	r3, r2
 80056e8:	d038      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f6:	d018      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80056f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056fc:	d811      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005702:	d014      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005708:	d80b      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d011      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800570e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005712:	d106      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005714:	4bc3      	ldr	r3, [pc, #780]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	4ac2      	ldr	r2, [pc, #776]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800571a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005720:	e008      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005728:	e004      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800572a:	bf00      	nop
 800572c:	e002      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10b      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800573c:	4bb9      	ldr	r3, [pc, #740]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800573e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005740:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800574c:	4ab5      	ldr	r2, [pc, #724]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800574e:	430b      	orrs	r3, r1
 8005750:	6553      	str	r3, [r2, #84]	; 0x54
 8005752:	e003      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005758:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800575c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005768:	65bb      	str	r3, [r7, #88]	; 0x58
 800576a:	2300      	movs	r3, #0
 800576c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800576e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005772:	460b      	mov	r3, r1
 8005774:	4313      	orrs	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005778:	4baa      	ldr	r3, [pc, #680]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800577a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005786:	4aa7      	ldr	r2, [pc, #668]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005788:	430b      	orrs	r3, r1
 800578a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005798:	653b      	str	r3, [r7, #80]	; 0x50
 800579a:	2300      	movs	r3, #0
 800579c:	657b      	str	r3, [r7, #84]	; 0x54
 800579e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80057a2:	460b      	mov	r3, r1
 80057a4:	4313      	orrs	r3, r2
 80057a6:	d00a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057a8:	4b9e      	ldr	r3, [pc, #632]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80057b8:	4a9a      	ldr	r2, [pc, #616]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80057ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80057cc:	2300      	movs	r3, #0
 80057ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80057d4:	460b      	mov	r3, r1
 80057d6:	4313      	orrs	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057da:	4b92      	ldr	r3, [pc, #584]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057de:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e8:	4a8e      	ldr	r2, [pc, #568]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80057fa:	643b      	str	r3, [r7, #64]	; 0x40
 80057fc:	2300      	movs	r3, #0
 80057fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005800:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005804:	460b      	mov	r3, r1
 8005806:	4313      	orrs	r3, r2
 8005808:	d00e      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800580a:	4b86      	ldr	r3, [pc, #536]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	4a85      	ldr	r2, [pc, #532]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005814:	6113      	str	r3, [r2, #16]
 8005816:	4b83      	ldr	r3, [pc, #524]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005818:	6919      	ldr	r1, [r3, #16]
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005822:	4a80      	ldr	r2, [pc, #512]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005824:	430b      	orrs	r3, r1
 8005826:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005834:	63bb      	str	r3, [r7, #56]	; 0x38
 8005836:	2300      	movs	r3, #0
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800583e:	460b      	mov	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005844:	4b77      	ldr	r3, [pc, #476]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005848:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	4a74      	ldr	r2, [pc, #464]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005854:	430b      	orrs	r3, r1
 8005856:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005864:	633b      	str	r3, [r7, #48]	; 0x30
 8005866:	2300      	movs	r3, #0
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
 800586a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800586e:	460b      	mov	r3, r1
 8005870:	4313      	orrs	r3, r2
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005874:	4b6b      	ldr	r3, [pc, #428]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005884:	4a67      	ldr	r2, [pc, #412]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005886:	430b      	orrs	r3, r1
 8005888:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800588a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	2100      	movs	r1, #0
 8005894:	62b9      	str	r1, [r7, #40]	; 0x28
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800589c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80058a0:	460b      	mov	r3, r1
 80058a2:	4313      	orrs	r3, r2
 80058a4:	d011      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058aa:	3308      	adds	r3, #8
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fb78 	bl	8005fa4 <RCCEx_PLL2_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	2100      	movs	r1, #0
 80058d4:	6239      	str	r1, [r7, #32]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
 80058dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80058e0:	460b      	mov	r3, r1
 80058e2:	4313      	orrs	r3, r2
 80058e4:	d011      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ea:	3308      	adds	r3, #8
 80058ec:	2101      	movs	r1, #1
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fb58 	bl	8005fa4 <RCCEx_PLL2_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	2100      	movs	r1, #0
 8005914:	61b9      	str	r1, [r7, #24]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d011      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592a:	3308      	adds	r3, #8
 800592c:	2102      	movs	r1, #2
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fb38 	bl	8005fa4 <RCCEx_PLL2_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800593a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	2100      	movs	r1, #0
 8005954:	6139      	str	r1, [r7, #16]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005960:	460b      	mov	r3, r1
 8005962:	4313      	orrs	r3, r2
 8005964:	d011      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800596a:	3328      	adds	r3, #40	; 0x28
 800596c:	2100      	movs	r1, #0
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fbca 	bl	8006108 <RCCEx_PLL3_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800597a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	2100      	movs	r1, #0
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059a0:	460b      	mov	r3, r1
 80059a2:	4313      	orrs	r3, r2
 80059a4:	d011      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059aa:	3328      	adds	r3, #40	; 0x28
 80059ac:	2101      	movs	r1, #1
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fbaa 	bl	8006108 <RCCEx_PLL3_Config>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80059ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	2100      	movs	r1, #0
 80059d4:	6039      	str	r1, [r7, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059e0:	460b      	mov	r3, r1
 80059e2:	4313      	orrs	r3, r2
 80059e4:	d011      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ea:	3328      	adds	r3, #40	; 0x28
 80059ec:	2102      	movs	r1, #2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fb8a 	bl	8006108 <RCCEx_PLL3_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005a0a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e000      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a24:	58024400 	.word	0x58024400

08005a28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a2c:	f7fe fd96 	bl	800455c <HAL_RCC_GetHCLKFreq>
 8005a30:	4602      	mov	r2, r0
 8005a32:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	091b      	lsrs	r3, r3, #4
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	4904      	ldr	r1, [pc, #16]	; (8005a50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a3e:	5ccb      	ldrb	r3, [r1, r3]
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	080109b0 	.word	0x080109b0

08005a54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b089      	sub	sp, #36	; 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a5c:	4ba1      	ldr	r3, [pc, #644]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a66:	4b9f      	ldr	r3, [pc, #636]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	0b1b      	lsrs	r3, r3, #12
 8005a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a72:	4b9c      	ldr	r3, [pc, #624]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a7e:	4b99      	ldr	r3, [pc, #612]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	08db      	lsrs	r3, r3, #3
 8005a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8111 	beq.w	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	f000 8083 	beq.w	8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	f200 80a1 	bhi.w	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d056      	beq.n	8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005abe:	e099      	b.n	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ac0:	4b88      	ldr	r3, [pc, #544]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d02d      	beq.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005acc:	4b85      	ldr	r3, [pc, #532]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	08db      	lsrs	r3, r3, #3
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	4a84      	ldr	r2, [pc, #528]	; (8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8005adc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	ee07 3a90 	vmov	s15, r3
 8005ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af6:	4b7b      	ldr	r3, [pc, #492]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b26:	e087      	b.n	8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3a:	4b6a      	ldr	r3, [pc, #424]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b6a:	e065      	b.n	8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7e:	4b59      	ldr	r3, [pc, #356]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bae:	e043      	b.n	8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc2:	4b48      	ldr	r3, [pc, #288]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bf2:	e021      	b.n	8005c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c06:	4b37      	ldr	r3, [pc, #220]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c38:	4b2a      	ldr	r3, [pc, #168]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	0a5b      	lsrs	r3, r3, #9
 8005c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c5e:	ee17 2a90 	vmov	r2, s15
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c66:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c8c:	ee17 2a90 	vmov	r2, s15
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c94:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	0e1b      	lsrs	r3, r3, #24
 8005c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cba:	ee17 2a90 	vmov	r2, s15
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	609a      	str	r2, [r3, #8]
}
 8005cd6:	bf00      	nop
 8005cd8:	3724      	adds	r7, #36	; 0x24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	58024400 	.word	0x58024400
 8005ce8:	03d09000 	.word	0x03d09000
 8005cec:	46000000 	.word	0x46000000
 8005cf0:	4c742400 	.word	0x4c742400
 8005cf4:	4a742400 	.word	0x4a742400
 8005cf8:	4af42400 	.word	0x4af42400

08005cfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b089      	sub	sp, #36	; 0x24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d04:	4ba1      	ldr	r3, [pc, #644]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d0e:	4b9f      	ldr	r3, [pc, #636]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	0d1b      	lsrs	r3, r3, #20
 8005d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d1a:	4b9c      	ldr	r3, [pc, #624]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	0a1b      	lsrs	r3, r3, #8
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d26:	4b99      	ldr	r3, [pc, #612]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2a:	08db      	lsrs	r3, r3, #3
 8005d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8111 	beq.w	8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	f000 8083 	beq.w	8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	f200 80a1 	bhi.w	8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d056      	beq.n	8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d66:	e099      	b.n	8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d68:	4b88      	ldr	r3, [pc, #544]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d02d      	beq.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d74:	4b85      	ldr	r3, [pc, #532]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	08db      	lsrs	r3, r3, #3
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	4a84      	ldr	r2, [pc, #528]	; (8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
 8005d84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b7b      	ldr	r3, [pc, #492]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005dce:	e087      	b.n	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de2:	4b6a      	ldr	r3, [pc, #424]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e12:	e065      	b.n	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e26:	4b59      	ldr	r3, [pc, #356]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e56:	e043      	b.n	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6a:	4b48      	ldr	r3, [pc, #288]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e9a:	e021      	b.n	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eae:	4b37      	ldr	r3, [pc, #220]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ede:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ee0:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	0a5b      	lsrs	r3, r3, #9
 8005ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f06:	ee17 2a90 	vmov	r2, s15
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f0e:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	0c1b      	lsrs	r3, r3, #16
 8005f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f34:	ee17 2a90 	vmov	r2, s15
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f3c:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	0e1b      	lsrs	r3, r3, #24
 8005f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f62:	ee17 2a90 	vmov	r2, s15
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f6a:	e008      	b.n	8005f7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
}
 8005f7e:	bf00      	nop
 8005f80:	3724      	adds	r7, #36	; 0x24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	58024400 	.word	0x58024400
 8005f90:	03d09000 	.word	0x03d09000
 8005f94:	46000000 	.word	0x46000000
 8005f98:	4c742400 	.word	0x4c742400
 8005f9c:	4a742400 	.word	0x4a742400
 8005fa0:	4af42400 	.word	0x4af42400

08005fa4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fb2:	4b53      	ldr	r3, [pc, #332]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d101      	bne.n	8005fc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e099      	b.n	80060f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005fc2:	4b4f      	ldr	r3, [pc, #316]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a4e      	ldr	r2, [pc, #312]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8005fc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fce:	f7fb f8f5 	bl	80011bc <HAL_GetTick>
 8005fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fd4:	e008      	b.n	8005fe8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fd6:	f7fb f8f1 	bl	80011bc <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e086      	b.n	80060f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fe8:	4b45      	ldr	r3, [pc, #276]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ff4:	4b42      	ldr	r3, [pc, #264]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	031b      	lsls	r3, r3, #12
 8006002:	493f      	ldr	r1, [pc, #252]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006004:	4313      	orrs	r3, r2
 8006006:	628b      	str	r3, [r1, #40]	; 0x28
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	3b01      	subs	r3, #1
 800600e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	3b01      	subs	r3, #1
 8006018:	025b      	lsls	r3, r3, #9
 800601a:	b29b      	uxth	r3, r3
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	3b01      	subs	r3, #1
 8006024:	041b      	lsls	r3, r3, #16
 8006026:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	3b01      	subs	r3, #1
 8006032:	061b      	lsls	r3, r3, #24
 8006034:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006038:	4931      	ldr	r1, [pc, #196]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 800603a:	4313      	orrs	r3, r2
 800603c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800603e:	4b30      	ldr	r3, [pc, #192]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	492d      	ldr	r1, [pc, #180]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 800604c:	4313      	orrs	r3, r2
 800604e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006050:	4b2b      	ldr	r3, [pc, #172]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	f023 0220 	bic.w	r2, r3, #32
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	4928      	ldr	r1, [pc, #160]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 800605e:	4313      	orrs	r3, r2
 8006060:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006062:	4b27      	ldr	r3, [pc, #156]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	4a26      	ldr	r2, [pc, #152]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006068:	f023 0310 	bic.w	r3, r3, #16
 800606c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800606e:	4b24      	ldr	r3, [pc, #144]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006072:	4b24      	ldr	r3, [pc, #144]	; (8006104 <RCCEx_PLL2_Config+0x160>)
 8006074:	4013      	ands	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	69d2      	ldr	r2, [r2, #28]
 800607a:	00d2      	lsls	r2, r2, #3
 800607c:	4920      	ldr	r1, [pc, #128]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 800607e:	4313      	orrs	r3, r2
 8006080:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006082:	4b1f      	ldr	r3, [pc, #124]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006086:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006088:	f043 0310 	orr.w	r3, r3, #16
 800608c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006094:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	4a19      	ldr	r2, [pc, #100]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 800609a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800609e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060a0:	e00f      	b.n	80060c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d106      	bne.n	80060b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060a8:	4b15      	ldr	r3, [pc, #84]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	4a14      	ldr	r2, [pc, #80]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060b4:	e005      	b.n	80060c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060b6:	4b12      	ldr	r3, [pc, #72]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	4a11      	ldr	r2, [pc, #68]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80060c2:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a0e      	ldr	r2, [pc, #56]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ce:	f7fb f875 	bl	80011bc <HAL_GetTick>
 80060d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060d4:	e008      	b.n	80060e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060d6:	f7fb f871 	bl	80011bc <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e006      	b.n	80060f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <RCCEx_PLL2_Config+0x15c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f0      	beq.n	80060d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	58024400 	.word	0x58024400
 8006104:	ffff0007 	.word	0xffff0007

08006108 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006116:	4b53      	ldr	r3, [pc, #332]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b03      	cmp	r3, #3
 8006120:	d101      	bne.n	8006126 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e099      	b.n	800625a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006126:	4b4f      	ldr	r3, [pc, #316]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a4e      	ldr	r2, [pc, #312]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 800612c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006132:	f7fb f843 	bl	80011bc <HAL_GetTick>
 8006136:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006138:	e008      	b.n	800614c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800613a:	f7fb f83f 	bl	80011bc <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e086      	b.n	800625a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800614c:	4b45      	ldr	r3, [pc, #276]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f0      	bne.n	800613a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006158:	4b42      	ldr	r3, [pc, #264]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	051b      	lsls	r3, r3, #20
 8006166:	493f      	ldr	r1, [pc, #252]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006168:	4313      	orrs	r3, r2
 800616a:	628b      	str	r3, [r1, #40]	; 0x28
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	3b01      	subs	r3, #1
 8006172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	3b01      	subs	r3, #1
 800617c:	025b      	lsls	r3, r3, #9
 800617e:	b29b      	uxth	r3, r3
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	3b01      	subs	r3, #1
 8006188:	041b      	lsls	r3, r3, #16
 800618a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	3b01      	subs	r3, #1
 8006196:	061b      	lsls	r3, r3, #24
 8006198:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800619c:	4931      	ldr	r1, [pc, #196]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061a2:	4b30      	ldr	r3, [pc, #192]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	492d      	ldr	r1, [pc, #180]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061b4:	4b2b      	ldr	r3, [pc, #172]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	4928      	ldr	r1, [pc, #160]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80061c6:	4b27      	ldr	r3, [pc, #156]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	4a26      	ldr	r2, [pc, #152]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061d2:	4b24      	ldr	r3, [pc, #144]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d6:	4b24      	ldr	r3, [pc, #144]	; (8006268 <RCCEx_PLL3_Config+0x160>)
 80061d8:	4013      	ands	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	69d2      	ldr	r2, [r2, #28]
 80061de:	00d2      	lsls	r2, r2, #3
 80061e0:	4920      	ldr	r1, [pc, #128]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80061e6:	4b1f      	ldr	r3, [pc, #124]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	4a1e      	ldr	r2, [pc, #120]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80061f8:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	4a19      	ldr	r2, [pc, #100]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 80061fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006202:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006204:	e00f      	b.n	8006226 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d106      	bne.n	800621a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800620c:	4b15      	ldr	r3, [pc, #84]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	4a14      	ldr	r2, [pc, #80]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006212:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006218:	e005      	b.n	8006226 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800621a:	4b12      	ldr	r3, [pc, #72]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	4a11      	ldr	r2, [pc, #68]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006224:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006226:	4b0f      	ldr	r3, [pc, #60]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a0e      	ldr	r2, [pc, #56]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006232:	f7fa ffc3 	bl	80011bc <HAL_GetTick>
 8006236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006238:	e008      	b.n	800624c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800623a:	f7fa ffbf 	bl	80011bc <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e006      	b.n	800625a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <RCCEx_PLL3_Config+0x15c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	58024400 	.word	0x58024400
 8006268:	ffff0007 	.word	0xffff0007

0800626c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e042      	b.n	8006304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fa fd87 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2224      	movs	r2, #36	; 0x24
 800629a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fd90 	bl	8006ddc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f825 	bl	800630c <UART_SetConfig>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e01b      	b.n	8006304 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fe0f 	bl	8006f20 <UART_CheckIdleState>
 8006302:	4603      	mov	r3, r0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800630c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006310:	b092      	sub	sp, #72	; 0x48
 8006312:	af00      	add	r7, sp, #0
 8006314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	431a      	orrs	r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	431a      	orrs	r2, r3
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	4313      	orrs	r3, r2
 8006332:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4bbe      	ldr	r3, [pc, #760]	; (8006634 <UART_SetConfig+0x328>)
 800633c:	4013      	ands	r3, r2
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006344:	430b      	orrs	r3, r1
 8006346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4ab3      	ldr	r2, [pc, #716]	; (8006638 <UART_SetConfig+0x32c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006374:	4313      	orrs	r3, r2
 8006376:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	4baf      	ldr	r3, [pc, #700]	; (800663c <UART_SetConfig+0x330>)
 8006380:	4013      	ands	r3, r2
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006388:	430b      	orrs	r3, r1
 800638a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	f023 010f 	bic.w	r1, r3, #15
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4aa6      	ldr	r2, [pc, #664]	; (8006640 <UART_SetConfig+0x334>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d177      	bne.n	800649c <UART_SetConfig+0x190>
 80063ac:	4ba5      	ldr	r3, [pc, #660]	; (8006644 <UART_SetConfig+0x338>)
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063b4:	2b28      	cmp	r3, #40	; 0x28
 80063b6:	d86d      	bhi.n	8006494 <UART_SetConfig+0x188>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <UART_SetConfig+0xb4>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	08006465 	.word	0x08006465
 80063c4:	08006495 	.word	0x08006495
 80063c8:	08006495 	.word	0x08006495
 80063cc:	08006495 	.word	0x08006495
 80063d0:	08006495 	.word	0x08006495
 80063d4:	08006495 	.word	0x08006495
 80063d8:	08006495 	.word	0x08006495
 80063dc:	08006495 	.word	0x08006495
 80063e0:	0800646d 	.word	0x0800646d
 80063e4:	08006495 	.word	0x08006495
 80063e8:	08006495 	.word	0x08006495
 80063ec:	08006495 	.word	0x08006495
 80063f0:	08006495 	.word	0x08006495
 80063f4:	08006495 	.word	0x08006495
 80063f8:	08006495 	.word	0x08006495
 80063fc:	08006495 	.word	0x08006495
 8006400:	08006475 	.word	0x08006475
 8006404:	08006495 	.word	0x08006495
 8006408:	08006495 	.word	0x08006495
 800640c:	08006495 	.word	0x08006495
 8006410:	08006495 	.word	0x08006495
 8006414:	08006495 	.word	0x08006495
 8006418:	08006495 	.word	0x08006495
 800641c:	08006495 	.word	0x08006495
 8006420:	0800647d 	.word	0x0800647d
 8006424:	08006495 	.word	0x08006495
 8006428:	08006495 	.word	0x08006495
 800642c:	08006495 	.word	0x08006495
 8006430:	08006495 	.word	0x08006495
 8006434:	08006495 	.word	0x08006495
 8006438:	08006495 	.word	0x08006495
 800643c:	08006495 	.word	0x08006495
 8006440:	08006485 	.word	0x08006485
 8006444:	08006495 	.word	0x08006495
 8006448:	08006495 	.word	0x08006495
 800644c:	08006495 	.word	0x08006495
 8006450:	08006495 	.word	0x08006495
 8006454:	08006495 	.word	0x08006495
 8006458:	08006495 	.word	0x08006495
 800645c:	08006495 	.word	0x08006495
 8006460:	0800648d 	.word	0x0800648d
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e222      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800646c:	2304      	movs	r3, #4
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e21e      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006474:	2308      	movs	r3, #8
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647a:	e21a      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800647c:	2310      	movs	r3, #16
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006482:	e216      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006484:	2320      	movs	r3, #32
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648a:	e212      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800648c:	2340      	movs	r3, #64	; 0x40
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006492:	e20e      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649a:	e20a      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a69      	ldr	r2, [pc, #420]	; (8006648 <UART_SetConfig+0x33c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d130      	bne.n	8006508 <UART_SetConfig+0x1fc>
 80064a6:	4b67      	ldr	r3, [pc, #412]	; (8006644 <UART_SetConfig+0x338>)
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	2b05      	cmp	r3, #5
 80064b0:	d826      	bhi.n	8006500 <UART_SetConfig+0x1f4>
 80064b2:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <UART_SetConfig+0x1ac>)
 80064b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b8:	080064d1 	.word	0x080064d1
 80064bc:	080064d9 	.word	0x080064d9
 80064c0:	080064e1 	.word	0x080064e1
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f9 	.word	0x080064f9
 80064d0:	2300      	movs	r3, #0
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e1ec      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80064d8:	2304      	movs	r3, #4
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e1e8      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80064e0:	2308      	movs	r3, #8
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e1e4      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80064e8:	2310      	movs	r3, #16
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ee:	e1e0      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80064f0:	2320      	movs	r3, #32
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f6:	e1dc      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80064f8:	2340      	movs	r3, #64	; 0x40
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fe:	e1d8      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006500:	2380      	movs	r3, #128	; 0x80
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006506:	e1d4      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a4f      	ldr	r2, [pc, #316]	; (800664c <UART_SetConfig+0x340>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d130      	bne.n	8006574 <UART_SetConfig+0x268>
 8006512:	4b4c      	ldr	r3, [pc, #304]	; (8006644 <UART_SetConfig+0x338>)
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b05      	cmp	r3, #5
 800651c:	d826      	bhi.n	800656c <UART_SetConfig+0x260>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <UART_SetConfig+0x218>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	0800653d 	.word	0x0800653d
 8006528:	08006545 	.word	0x08006545
 800652c:	0800654d 	.word	0x0800654d
 8006530:	08006555 	.word	0x08006555
 8006534:	0800655d 	.word	0x0800655d
 8006538:	08006565 	.word	0x08006565
 800653c:	2300      	movs	r3, #0
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006542:	e1b6      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006544:	2304      	movs	r3, #4
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654a:	e1b2      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800654c:	2308      	movs	r3, #8
 800654e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006552:	e1ae      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006554:	2310      	movs	r3, #16
 8006556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655a:	e1aa      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800655c:	2320      	movs	r3, #32
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006562:	e1a6      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006564:	2340      	movs	r3, #64	; 0x40
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656a:	e1a2      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800656c:	2380      	movs	r3, #128	; 0x80
 800656e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006572:	e19e      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a35      	ldr	r2, [pc, #212]	; (8006650 <UART_SetConfig+0x344>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d130      	bne.n	80065e0 <UART_SetConfig+0x2d4>
 800657e:	4b31      	ldr	r3, [pc, #196]	; (8006644 <UART_SetConfig+0x338>)
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	2b05      	cmp	r3, #5
 8006588:	d826      	bhi.n	80065d8 <UART_SetConfig+0x2cc>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <UART_SetConfig+0x284>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	080065a9 	.word	0x080065a9
 8006594:	080065b1 	.word	0x080065b1
 8006598:	080065b9 	.word	0x080065b9
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065d1 	.word	0x080065d1
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e180      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80065b0:	2304      	movs	r3, #4
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e17c      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80065b8:	2308      	movs	r3, #8
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065be:	e178      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80065c0:	2310      	movs	r3, #16
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c6:	e174      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80065c8:	2320      	movs	r3, #32
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ce:	e170      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80065d0:	2340      	movs	r3, #64	; 0x40
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d6:	e16c      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065de:	e168      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <UART_SetConfig+0x348>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d142      	bne.n	8006670 <UART_SetConfig+0x364>
 80065ea:	4b16      	ldr	r3, [pc, #88]	; (8006644 <UART_SetConfig+0x338>)
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	2b05      	cmp	r3, #5
 80065f4:	d838      	bhi.n	8006668 <UART_SetConfig+0x35c>
 80065f6:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0x2f0>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006615 	.word	0x08006615
 8006600:	0800661d 	.word	0x0800661d
 8006604:	08006625 	.word	0x08006625
 8006608:	0800662d 	.word	0x0800662d
 800660c:	08006659 	.word	0x08006659
 8006610:	08006661 	.word	0x08006661
 8006614:	2300      	movs	r3, #0
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e14a      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006622:	e146      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662a:	e142      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006632:	e13e      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006634:	cfff69f3 	.word	0xcfff69f3
 8006638:	58000c00 	.word	0x58000c00
 800663c:	11fff4ff 	.word	0x11fff4ff
 8006640:	40011000 	.word	0x40011000
 8006644:	58024400 	.word	0x58024400
 8006648:	40004400 	.word	0x40004400
 800664c:	40004800 	.word	0x40004800
 8006650:	40004c00 	.word	0x40004c00
 8006654:	40005000 	.word	0x40005000
 8006658:	2320      	movs	r3, #32
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665e:	e128      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e124      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e120      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4acb      	ldr	r2, [pc, #812]	; (80069a4 <UART_SetConfig+0x698>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d176      	bne.n	8006768 <UART_SetConfig+0x45c>
 800667a:	4bcb      	ldr	r3, [pc, #812]	; (80069a8 <UART_SetConfig+0x69c>)
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006682:	2b28      	cmp	r3, #40	; 0x28
 8006684:	d86c      	bhi.n	8006760 <UART_SetConfig+0x454>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0x380>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	08006731 	.word	0x08006731
 8006690:	08006761 	.word	0x08006761
 8006694:	08006761 	.word	0x08006761
 8006698:	08006761 	.word	0x08006761
 800669c:	08006761 	.word	0x08006761
 80066a0:	08006761 	.word	0x08006761
 80066a4:	08006761 	.word	0x08006761
 80066a8:	08006761 	.word	0x08006761
 80066ac:	08006739 	.word	0x08006739
 80066b0:	08006761 	.word	0x08006761
 80066b4:	08006761 	.word	0x08006761
 80066b8:	08006761 	.word	0x08006761
 80066bc:	08006761 	.word	0x08006761
 80066c0:	08006761 	.word	0x08006761
 80066c4:	08006761 	.word	0x08006761
 80066c8:	08006761 	.word	0x08006761
 80066cc:	08006741 	.word	0x08006741
 80066d0:	08006761 	.word	0x08006761
 80066d4:	08006761 	.word	0x08006761
 80066d8:	08006761 	.word	0x08006761
 80066dc:	08006761 	.word	0x08006761
 80066e0:	08006761 	.word	0x08006761
 80066e4:	08006761 	.word	0x08006761
 80066e8:	08006761 	.word	0x08006761
 80066ec:	08006749 	.word	0x08006749
 80066f0:	08006761 	.word	0x08006761
 80066f4:	08006761 	.word	0x08006761
 80066f8:	08006761 	.word	0x08006761
 80066fc:	08006761 	.word	0x08006761
 8006700:	08006761 	.word	0x08006761
 8006704:	08006761 	.word	0x08006761
 8006708:	08006761 	.word	0x08006761
 800670c:	08006751 	.word	0x08006751
 8006710:	08006761 	.word	0x08006761
 8006714:	08006761 	.word	0x08006761
 8006718:	08006761 	.word	0x08006761
 800671c:	08006761 	.word	0x08006761
 8006720:	08006761 	.word	0x08006761
 8006724:	08006761 	.word	0x08006761
 8006728:	08006761 	.word	0x08006761
 800672c:	08006759 	.word	0x08006759
 8006730:	2301      	movs	r3, #1
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006736:	e0bc      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673e:	e0b8      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006746:	e0b4      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674e:	e0b0      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006750:	2320      	movs	r3, #32
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006756:	e0ac      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006758:	2340      	movs	r3, #64	; 0x40
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675e:	e0a8      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006760:	2380      	movs	r3, #128	; 0x80
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006766:	e0a4      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a8f      	ldr	r2, [pc, #572]	; (80069ac <UART_SetConfig+0x6a0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d130      	bne.n	80067d4 <UART_SetConfig+0x4c8>
 8006772:	4b8d      	ldr	r3, [pc, #564]	; (80069a8 <UART_SetConfig+0x69c>)
 8006774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b05      	cmp	r3, #5
 800677c:	d826      	bhi.n	80067cc <UART_SetConfig+0x4c0>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <UART_SetConfig+0x478>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	0800679d 	.word	0x0800679d
 8006788:	080067a5 	.word	0x080067a5
 800678c:	080067ad 	.word	0x080067ad
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067bd 	.word	0x080067bd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	2300      	movs	r3, #0
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e086      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80067a4:	2304      	movs	r3, #4
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067aa:	e082      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80067ac:	2308      	movs	r3, #8
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b2:	e07e      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80067b4:	2310      	movs	r3, #16
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ba:	e07a      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80067bc:	2320      	movs	r3, #32
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c2:	e076      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80067c4:	2340      	movs	r3, #64	; 0x40
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ca:	e072      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80067cc:	2380      	movs	r3, #128	; 0x80
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d2:	e06e      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a75      	ldr	r2, [pc, #468]	; (80069b0 <UART_SetConfig+0x6a4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d130      	bne.n	8006840 <UART_SetConfig+0x534>
 80067de:	4b72      	ldr	r3, [pc, #456]	; (80069a8 <UART_SetConfig+0x69c>)
 80067e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	2b05      	cmp	r3, #5
 80067e8:	d826      	bhi.n	8006838 <UART_SetConfig+0x52c>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <UART_SetConfig+0x4e4>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006809 	.word	0x08006809
 80067f4:	08006811 	.word	0x08006811
 80067f8:	08006819 	.word	0x08006819
 80067fc:	08006821 	.word	0x08006821
 8006800:	08006829 	.word	0x08006829
 8006804:	08006831 	.word	0x08006831
 8006808:	2300      	movs	r3, #0
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680e:	e050      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006810:	2304      	movs	r3, #4
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006816:	e04c      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006818:	2308      	movs	r3, #8
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681e:	e048      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006820:	2310      	movs	r3, #16
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e044      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006828:	2320      	movs	r3, #32
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e040      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006830:	2340      	movs	r3, #64	; 0x40
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006836:	e03c      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006838:	2380      	movs	r3, #128	; 0x80
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683e:	e038      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a5b      	ldr	r2, [pc, #364]	; (80069b4 <UART_SetConfig+0x6a8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d130      	bne.n	80068ac <UART_SetConfig+0x5a0>
 800684a:	4b57      	ldr	r3, [pc, #348]	; (80069a8 <UART_SetConfig+0x69c>)
 800684c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	2b05      	cmp	r3, #5
 8006854:	d826      	bhi.n	80068a4 <UART_SetConfig+0x598>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <UART_SetConfig+0x550>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006875 	.word	0x08006875
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006885 	.word	0x08006885
 8006868:	0800688d 	.word	0x0800688d
 800686c:	08006895 	.word	0x08006895
 8006870:	0800689d 	.word	0x0800689d
 8006874:	2302      	movs	r3, #2
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687a:	e01a      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006882:	e016      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688a:	e012      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006892:	e00e      	b.n	80068b2 <UART_SetConfig+0x5a6>
 8006894:	2320      	movs	r3, #32
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e00a      	b.n	80068b2 <UART_SetConfig+0x5a6>
 800689c:	2340      	movs	r3, #64	; 0x40
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a2:	e006      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068aa:	e002      	b.n	80068b2 <UART_SetConfig+0x5a6>
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a3f      	ldr	r2, [pc, #252]	; (80069b4 <UART_SetConfig+0x6a8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	f040 80f8 	bne.w	8006aae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	dc46      	bgt.n	8006954 <UART_SetConfig+0x648>
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	f2c0 8082 	blt.w	80069d0 <UART_SetConfig+0x6c4>
 80068cc:	3b02      	subs	r3, #2
 80068ce:	2b1e      	cmp	r3, #30
 80068d0:	d87e      	bhi.n	80069d0 <UART_SetConfig+0x6c4>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <UART_SetConfig+0x5cc>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	0800695b 	.word	0x0800695b
 80068dc:	080069d1 	.word	0x080069d1
 80068e0:	08006963 	.word	0x08006963
 80068e4:	080069d1 	.word	0x080069d1
 80068e8:	080069d1 	.word	0x080069d1
 80068ec:	080069d1 	.word	0x080069d1
 80068f0:	08006973 	.word	0x08006973
 80068f4:	080069d1 	.word	0x080069d1
 80068f8:	080069d1 	.word	0x080069d1
 80068fc:	080069d1 	.word	0x080069d1
 8006900:	080069d1 	.word	0x080069d1
 8006904:	080069d1 	.word	0x080069d1
 8006908:	080069d1 	.word	0x080069d1
 800690c:	080069d1 	.word	0x080069d1
 8006910:	08006983 	.word	0x08006983
 8006914:	080069d1 	.word	0x080069d1
 8006918:	080069d1 	.word	0x080069d1
 800691c:	080069d1 	.word	0x080069d1
 8006920:	080069d1 	.word	0x080069d1
 8006924:	080069d1 	.word	0x080069d1
 8006928:	080069d1 	.word	0x080069d1
 800692c:	080069d1 	.word	0x080069d1
 8006930:	080069d1 	.word	0x080069d1
 8006934:	080069d1 	.word	0x080069d1
 8006938:	080069d1 	.word	0x080069d1
 800693c:	080069d1 	.word	0x080069d1
 8006940:	080069d1 	.word	0x080069d1
 8006944:	080069d1 	.word	0x080069d1
 8006948:	080069d1 	.word	0x080069d1
 800694c:	080069d1 	.word	0x080069d1
 8006950:	080069c3 	.word	0x080069c3
 8006954:	2b40      	cmp	r3, #64	; 0x40
 8006956:	d037      	beq.n	80069c8 <UART_SetConfig+0x6bc>
 8006958:	e03a      	b.n	80069d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800695a:	f7ff f865 	bl	8005a28 <HAL_RCCEx_GetD3PCLK1Freq>
 800695e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006960:	e03c      	b.n	80069dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff f874 	bl	8005a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006970:	e034      	b.n	80069dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006972:	f107 0318 	add.w	r3, r7, #24
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff f9c0 	bl	8005cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006980:	e02c      	b.n	80069dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006982:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <UART_SetConfig+0x69c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800698e:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <UART_SetConfig+0x69c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	08db      	lsrs	r3, r3, #3
 8006994:	f003 0303 	and.w	r3, r3, #3
 8006998:	4a07      	ldr	r2, [pc, #28]	; (80069b8 <UART_SetConfig+0x6ac>)
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069a0:	e01c      	b.n	80069dc <UART_SetConfig+0x6d0>
 80069a2:	bf00      	nop
 80069a4:	40011400 	.word	0x40011400
 80069a8:	58024400 	.word	0x58024400
 80069ac:	40007800 	.word	0x40007800
 80069b0:	40007c00 	.word	0x40007c00
 80069b4:	58000c00 	.word	0x58000c00
 80069b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80069bc:	4b9d      	ldr	r3, [pc, #628]	; (8006c34 <UART_SetConfig+0x928>)
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069c0:	e00c      	b.n	80069dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069c2:	4b9d      	ldr	r3, [pc, #628]	; (8006c38 <UART_SetConfig+0x92c>)
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069c6:	e009      	b.n	80069dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ce:	e005      	b.n	80069dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80069da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 81de 	beq.w	8006da0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	4a94      	ldr	r2, [pc, #592]	; (8006c3c <UART_SetConfig+0x930>)
 80069ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ee:	461a      	mov	r2, r3
 80069f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80069f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	4613      	mov	r3, r2
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	4413      	add	r3, r2
 8006a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d305      	bcc.n	8006a14 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d903      	bls.n	8006a1c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a1a:	e1c1      	b.n	8006da0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1e:	2200      	movs	r2, #0
 8006a20:	60bb      	str	r3, [r7, #8]
 8006a22:	60fa      	str	r2, [r7, #12]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	4a84      	ldr	r2, [pc, #528]	; (8006c3c <UART_SetConfig+0x930>)
 8006a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2200      	movs	r2, #0
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a3e:	f7f9 fca7 	bl	8000390 <__aeabi_uldivmod>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4610      	mov	r0, r2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	020b      	lsls	r3, r1, #8
 8006a54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a58:	0202      	lsls	r2, r0, #8
 8006a5a:	6979      	ldr	r1, [r7, #20]
 8006a5c:	6849      	ldr	r1, [r1, #4]
 8006a5e:	0849      	lsrs	r1, r1, #1
 8006a60:	2000      	movs	r0, #0
 8006a62:	460c      	mov	r4, r1
 8006a64:	4605      	mov	r5, r0
 8006a66:	eb12 0804 	adds.w	r8, r2, r4
 8006a6a:	eb43 0905 	adc.w	r9, r3, r5
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	469a      	mov	sl, r3
 8006a76:	4693      	mov	fp, r2
 8006a78:	4652      	mov	r2, sl
 8006a7a:	465b      	mov	r3, fp
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	4649      	mov	r1, r9
 8006a80:	f7f9 fc86 	bl	8000390 <__aeabi_uldivmod>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4613      	mov	r3, r2
 8006a8a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a92:	d308      	bcc.n	8006aa6 <UART_SetConfig+0x79a>
 8006a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a9a:	d204      	bcs.n	8006aa6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aa2:	60da      	str	r2, [r3, #12]
 8006aa4:	e17c      	b.n	8006da0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006aac:	e178      	b.n	8006da0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab6:	f040 80c5 	bne.w	8006c44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006aba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	dc48      	bgt.n	8006b54 <UART_SetConfig+0x848>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	db7b      	blt.n	8006bbe <UART_SetConfig+0x8b2>
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d879      	bhi.n	8006bbe <UART_SetConfig+0x8b2>
 8006aca:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <UART_SetConfig+0x7c4>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006b5b 	.word	0x08006b5b
 8006ad4:	08006b63 	.word	0x08006b63
 8006ad8:	08006bbf 	.word	0x08006bbf
 8006adc:	08006bbf 	.word	0x08006bbf
 8006ae0:	08006b6b 	.word	0x08006b6b
 8006ae4:	08006bbf 	.word	0x08006bbf
 8006ae8:	08006bbf 	.word	0x08006bbf
 8006aec:	08006bbf 	.word	0x08006bbf
 8006af0:	08006b7b 	.word	0x08006b7b
 8006af4:	08006bbf 	.word	0x08006bbf
 8006af8:	08006bbf 	.word	0x08006bbf
 8006afc:	08006bbf 	.word	0x08006bbf
 8006b00:	08006bbf 	.word	0x08006bbf
 8006b04:	08006bbf 	.word	0x08006bbf
 8006b08:	08006bbf 	.word	0x08006bbf
 8006b0c:	08006bbf 	.word	0x08006bbf
 8006b10:	08006b8b 	.word	0x08006b8b
 8006b14:	08006bbf 	.word	0x08006bbf
 8006b18:	08006bbf 	.word	0x08006bbf
 8006b1c:	08006bbf 	.word	0x08006bbf
 8006b20:	08006bbf 	.word	0x08006bbf
 8006b24:	08006bbf 	.word	0x08006bbf
 8006b28:	08006bbf 	.word	0x08006bbf
 8006b2c:	08006bbf 	.word	0x08006bbf
 8006b30:	08006bbf 	.word	0x08006bbf
 8006b34:	08006bbf 	.word	0x08006bbf
 8006b38:	08006bbf 	.word	0x08006bbf
 8006b3c:	08006bbf 	.word	0x08006bbf
 8006b40:	08006bbf 	.word	0x08006bbf
 8006b44:	08006bbf 	.word	0x08006bbf
 8006b48:	08006bbf 	.word	0x08006bbf
 8006b4c:	08006bbf 	.word	0x08006bbf
 8006b50:	08006bb1 	.word	0x08006bb1
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	d02e      	beq.n	8006bb6 <UART_SetConfig+0x8aa>
 8006b58:	e031      	b.n	8006bbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b5a:	f7fd fd2f 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8006b5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b60:	e033      	b.n	8006bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b62:	f7fd fd41 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 8006b66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b68:	e02f      	b.n	8006bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe ff70 	bl	8005a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b78:	e027      	b.n	8006bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b7a:	f107 0318 	add.w	r3, r7, #24
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff f8bc 	bl	8005cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b88:	e01f      	b.n	8006bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b8a:	4b2d      	ldr	r3, [pc, #180]	; (8006c40 <UART_SetConfig+0x934>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b96:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <UART_SetConfig+0x934>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	08db      	lsrs	r3, r3, #3
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	4a24      	ldr	r2, [pc, #144]	; (8006c34 <UART_SetConfig+0x928>)
 8006ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ba8:	e00f      	b.n	8006bca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006baa:	4b22      	ldr	r3, [pc, #136]	; (8006c34 <UART_SetConfig+0x928>)
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bae:	e00c      	b.n	8006bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bb0:	4b21      	ldr	r3, [pc, #132]	; (8006c38 <UART_SetConfig+0x92c>)
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bb4:	e009      	b.n	8006bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bbc:	e005      	b.n	8006bca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006bc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80e7 	beq.w	8006da0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	4a19      	ldr	r2, [pc, #100]	; (8006c3c <UART_SetConfig+0x930>)
 8006bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006be4:	005a      	lsls	r2, r3, #1
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	441a      	add	r2, r3
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	2b0f      	cmp	r3, #15
 8006bfc:	d916      	bls.n	8006c2c <UART_SetConfig+0x920>
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c04:	d212      	bcs.n	8006c2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f023 030f 	bic.w	r3, r3, #15
 8006c0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	085b      	lsrs	r3, r3, #1
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	e0b9      	b.n	8006da0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c32:	e0b5      	b.n	8006da0 <UART_SetConfig+0xa94>
 8006c34:	03d09000 	.word	0x03d09000
 8006c38:	003d0900 	.word	0x003d0900
 8006c3c:	080109c0 	.word	0x080109c0
 8006c40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	dc49      	bgt.n	8006ce0 <UART_SetConfig+0x9d4>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	db7c      	blt.n	8006d4a <UART_SetConfig+0xa3e>
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	d87a      	bhi.n	8006d4a <UART_SetConfig+0xa3e>
 8006c54:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <UART_SetConfig+0x950>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006ce7 	.word	0x08006ce7
 8006c60:	08006cef 	.word	0x08006cef
 8006c64:	08006d4b 	.word	0x08006d4b
 8006c68:	08006d4b 	.word	0x08006d4b
 8006c6c:	08006cf7 	.word	0x08006cf7
 8006c70:	08006d4b 	.word	0x08006d4b
 8006c74:	08006d4b 	.word	0x08006d4b
 8006c78:	08006d4b 	.word	0x08006d4b
 8006c7c:	08006d07 	.word	0x08006d07
 8006c80:	08006d4b 	.word	0x08006d4b
 8006c84:	08006d4b 	.word	0x08006d4b
 8006c88:	08006d4b 	.word	0x08006d4b
 8006c8c:	08006d4b 	.word	0x08006d4b
 8006c90:	08006d4b 	.word	0x08006d4b
 8006c94:	08006d4b 	.word	0x08006d4b
 8006c98:	08006d4b 	.word	0x08006d4b
 8006c9c:	08006d17 	.word	0x08006d17
 8006ca0:	08006d4b 	.word	0x08006d4b
 8006ca4:	08006d4b 	.word	0x08006d4b
 8006ca8:	08006d4b 	.word	0x08006d4b
 8006cac:	08006d4b 	.word	0x08006d4b
 8006cb0:	08006d4b 	.word	0x08006d4b
 8006cb4:	08006d4b 	.word	0x08006d4b
 8006cb8:	08006d4b 	.word	0x08006d4b
 8006cbc:	08006d4b 	.word	0x08006d4b
 8006cc0:	08006d4b 	.word	0x08006d4b
 8006cc4:	08006d4b 	.word	0x08006d4b
 8006cc8:	08006d4b 	.word	0x08006d4b
 8006ccc:	08006d4b 	.word	0x08006d4b
 8006cd0:	08006d4b 	.word	0x08006d4b
 8006cd4:	08006d4b 	.word	0x08006d4b
 8006cd8:	08006d4b 	.word	0x08006d4b
 8006cdc:	08006d3d 	.word	0x08006d3d
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	d02e      	beq.n	8006d42 <UART_SetConfig+0xa36>
 8006ce4:	e031      	b.n	8006d4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce6:	f7fd fc69 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8006cea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cec:	e033      	b.n	8006d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cee:	f7fd fc7b 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 8006cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cf4:	e02f      	b.n	8006d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe feaa 	bl	8005a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d04:	e027      	b.n	8006d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d06:	f107 0318 	add.w	r3, r7, #24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fff6 	bl	8005cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d14:	e01f      	b.n	8006d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d16:	4b2d      	ldr	r3, [pc, #180]	; (8006dcc <UART_SetConfig+0xac0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d009      	beq.n	8006d36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d22:	4b2a      	ldr	r3, [pc, #168]	; (8006dcc <UART_SetConfig+0xac0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	08db      	lsrs	r3, r3, #3
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	4a28      	ldr	r2, [pc, #160]	; (8006dd0 <UART_SetConfig+0xac4>)
 8006d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d34:	e00f      	b.n	8006d56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d36:	4b26      	ldr	r3, [pc, #152]	; (8006dd0 <UART_SetConfig+0xac4>)
 8006d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d3a:	e00c      	b.n	8006d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d3c:	4b25      	ldr	r3, [pc, #148]	; (8006dd4 <UART_SetConfig+0xac8>)
 8006d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d40:	e009      	b.n	8006d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d48:	e005      	b.n	8006d56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d54:	bf00      	nop
    }

    if (pclk != 0U)
 8006d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d021      	beq.n	8006da0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <UART_SetConfig+0xacc>)
 8006d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d66:	461a      	mov	r2, r3
 8006d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	085b      	lsrs	r3, r3, #1
 8006d74:	441a      	add	r2, r3
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	2b0f      	cmp	r3, #15
 8006d84:	d909      	bls.n	8006d9a <UART_SetConfig+0xa8e>
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8c:	d205      	bcs.n	8006d9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60da      	str	r2, [r3, #12]
 8006d98:	e002      	b.n	8006da0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2200      	movs	r2, #0
 8006db4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2200      	movs	r2, #0
 8006dba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006dbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3748      	adds	r7, #72	; 0x48
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dca:	bf00      	nop
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	03d09000 	.word	0x03d09000
 8006dd4:	003d0900 	.word	0x003d0900
 8006dd8:	080109c0 	.word	0x080109c0

08006ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01a      	beq.n	8006ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eda:	d10a      	bne.n	8006ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	605a      	str	r2, [r3, #4]
  }
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b098      	sub	sp, #96	; 0x60
 8006f24:	af02      	add	r7, sp, #8
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f30:	f7fa f944 	bl	80011bc <HAL_GetTick>
 8006f34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d12f      	bne.n	8006fa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f88e 	bl	8007074 <UART_WaitOnFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d022      	beq.n	8006fa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f72:	653b      	str	r3, [r7, #80]	; 0x50
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e6      	bne.n	8006f5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e063      	b.n	800706c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d149      	bne.n	8007046 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f857 	bl	8007074 <UART_WaitOnFlagUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d03c      	beq.n	8007046 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fea:	633b      	str	r3, [r7, #48]	; 0x30
 8006fec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e6      	bne.n	8006fcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	60fb      	str	r3, [r7, #12]
   return(result);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f023 0301 	bic.w	r3, r3, #1
 8007014:	64bb      	str	r3, [r7, #72]	; 0x48
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3308      	adds	r3, #8
 800701c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800701e:	61fa      	str	r2, [r7, #28]
 8007020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	69b9      	ldr	r1, [r7, #24]
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	617b      	str	r3, [r7, #20]
   return(result);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e5      	bne.n	8006ffe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e012      	b.n	800706c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3758      	adds	r7, #88	; 0x58
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	603b      	str	r3, [r7, #0]
 8007080:	4613      	mov	r3, r2
 8007082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007084:	e04f      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d04b      	beq.n	8007126 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800708e:	f7fa f895 	bl	80011bc <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	429a      	cmp	r2, r3
 800709c:	d302      	bcc.n	80070a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e04e      	b.n	8007146 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d037      	beq.n	8007126 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b80      	cmp	r3, #128	; 0x80
 80070ba:	d034      	beq.n	8007126 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b40      	cmp	r3, #64	; 0x40
 80070c0:	d031      	beq.n	8007126 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d110      	bne.n	80070f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2208      	movs	r2, #8
 80070d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f839 	bl	8007150 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2208      	movs	r2, #8
 80070e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e029      	b.n	8007146 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007100:	d111      	bne.n	8007126 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800710a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f81f 	bl	8007150 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2220      	movs	r2, #32
 8007116:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e00f      	b.n	8007146 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	69da      	ldr	r2, [r3, #28]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	4013      	ands	r3, r2
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	429a      	cmp	r2, r3
 8007134:	bf0c      	ite	eq
 8007136:	2301      	moveq	r3, #1
 8007138:	2300      	movne	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	429a      	cmp	r2, r3
 8007142:	d0a0      	beq.n	8007086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b095      	sub	sp, #84	; 0x54
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800716c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007176:	643b      	str	r3, [r7, #64]	; 0x40
 8007178:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800717c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e6      	bne.n	8007158 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3308      	adds	r3, #8
 8007190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	61fb      	str	r3, [r7, #28]
   return(result);
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	4b1e      	ldr	r3, [pc, #120]	; (8007218 <UART_EndRxTransfer+0xc8>)
 800719e:	4013      	ands	r3, r2
 80071a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3308      	adds	r3, #8
 80071a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e5      	bne.n	800718a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d118      	bne.n	80071f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f023 0310 	bic.w	r3, r3, #16
 80071da:	647b      	str	r3, [r7, #68]	; 0x44
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	6979      	ldr	r1, [r7, #20]
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	613b      	str	r3, [r7, #16]
   return(result);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e6      	bne.n	80071c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800720c:	bf00      	nop
 800720e:	3754      	adds	r7, #84	; 0x54
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	effffffe 	.word	0xeffffffe

0800721c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_UARTEx_DisableFifoMode+0x16>
 800722e:	2302      	movs	r3, #2
 8007230:	e027      	b.n	8007282 <HAL_UARTEx_DisableFifoMode+0x66>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2224      	movs	r2, #36	; 0x24
 800723e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0201 	bic.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007260:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e02d      	b.n	8007302 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2224      	movs	r2, #36	; 0x24
 80072b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0201 	bic.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f850 	bl	8007388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800731e:	2302      	movs	r3, #2
 8007320:	e02d      	b.n	800737e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2224      	movs	r2, #36	; 0x24
 800732e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0201 	bic.w	r2, r2, #1
 8007348:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f812 	bl	8007388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2220      	movs	r2, #32
 8007370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007394:	2b00      	cmp	r3, #0
 8007396:	d108      	bne.n	80073aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073a8:	e031      	b.n	800740e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073aa:	2310      	movs	r3, #16
 80073ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073ae:	2310      	movs	r3, #16
 80073b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	0e5b      	lsrs	r3, r3, #25
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	0f5b      	lsrs	r3, r3, #29
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	7b3a      	ldrb	r2, [r7, #12]
 80073d6:	4911      	ldr	r1, [pc, #68]	; (800741c <UARTEx_SetNbDataToProcess+0x94>)
 80073d8:	5c8a      	ldrb	r2, [r1, r2]
 80073da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073de:	7b3a      	ldrb	r2, [r7, #12]
 80073e0:	490f      	ldr	r1, [pc, #60]	; (8007420 <UARTEx_SetNbDataToProcess+0x98>)
 80073e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	7b7a      	ldrb	r2, [r7, #13]
 80073f4:	4909      	ldr	r1, [pc, #36]	; (800741c <UARTEx_SetNbDataToProcess+0x94>)
 80073f6:	5c8a      	ldrb	r2, [r1, r2]
 80073f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073fc:	7b7a      	ldrb	r2, [r7, #13]
 80073fe:	4908      	ldr	r1, [pc, #32]	; (8007420 <UARTEx_SetNbDataToProcess+0x98>)
 8007400:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007402:	fb93 f3f2 	sdiv	r3, r3, r2
 8007406:	b29a      	uxth	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800740e:	bf00      	nop
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	080109d8 	.word	0x080109d8
 8007420:	080109e0 	.word	0x080109e0

08007424 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007424:	b084      	sub	sp, #16
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	f107 001c 	add.w	r0, r7, #28
 8007432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007436:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800743a:	2b01      	cmp	r3, #1
 800743c:	d121      	bne.n	8007482 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007442:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	4b2c      	ldr	r3, [pc, #176]	; (8007500 <USB_CoreInit+0xdc>)
 8007450:	4013      	ands	r3, r2
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007462:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007466:	2b01      	cmp	r3, #1
 8007468:	d105      	bne.n	8007476 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 faf6 	bl	8008a68 <USB_CoreReset>
 800747c:	4603      	mov	r3, r0
 800747e:	73fb      	strb	r3, [r7, #15]
 8007480:	e01b      	b.n	80074ba <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 faea 	bl	8008a68 <USB_CoreReset>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007498:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	639a      	str	r2, [r3, #56]	; 0x38
 80074ac:	e005      	b.n	80074ba <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074ba:	7fbb      	ldrb	r3, [r7, #30]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d116      	bne.n	80074ee <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80074ce:	4b0d      	ldr	r3, [pc, #52]	; (8007504 <USB_CoreInit+0xe0>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f043 0206 	orr.w	r2, r3, #6
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f043 0220 	orr.w	r2, r3, #32
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074fa:	b004      	add	sp, #16
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	ffbdffbf 	.word	0xffbdffbf
 8007504:	03ee0000 	.word	0x03ee0000

08007508 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d165      	bne.n	80075e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4a41      	ldr	r2, [pc, #260]	; (8007624 <USB_SetTurnaroundTime+0x11c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d906      	bls.n	8007532 <USB_SetTurnaroundTime+0x2a>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	4a40      	ldr	r2, [pc, #256]	; (8007628 <USB_SetTurnaroundTime+0x120>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d202      	bcs.n	8007532 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800752c:	230f      	movs	r3, #15
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	e062      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4a3c      	ldr	r2, [pc, #240]	; (8007628 <USB_SetTurnaroundTime+0x120>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d306      	bcc.n	8007548 <USB_SetTurnaroundTime+0x40>
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4a3b      	ldr	r2, [pc, #236]	; (800762c <USB_SetTurnaroundTime+0x124>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d202      	bcs.n	8007548 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007542:	230e      	movs	r3, #14
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	e057      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4a38      	ldr	r2, [pc, #224]	; (800762c <USB_SetTurnaroundTime+0x124>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d306      	bcc.n	800755e <USB_SetTurnaroundTime+0x56>
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	4a37      	ldr	r2, [pc, #220]	; (8007630 <USB_SetTurnaroundTime+0x128>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d202      	bcs.n	800755e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007558:	230d      	movs	r3, #13
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	e04c      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	4a33      	ldr	r2, [pc, #204]	; (8007630 <USB_SetTurnaroundTime+0x128>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d306      	bcc.n	8007574 <USB_SetTurnaroundTime+0x6c>
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4a32      	ldr	r2, [pc, #200]	; (8007634 <USB_SetTurnaroundTime+0x12c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d802      	bhi.n	8007574 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800756e:	230c      	movs	r3, #12
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	e041      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4a2f      	ldr	r2, [pc, #188]	; (8007634 <USB_SetTurnaroundTime+0x12c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d906      	bls.n	800758a <USB_SetTurnaroundTime+0x82>
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4a2e      	ldr	r2, [pc, #184]	; (8007638 <USB_SetTurnaroundTime+0x130>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d802      	bhi.n	800758a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007584:	230b      	movs	r3, #11
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	e036      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	4a2a      	ldr	r2, [pc, #168]	; (8007638 <USB_SetTurnaroundTime+0x130>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d906      	bls.n	80075a0 <USB_SetTurnaroundTime+0x98>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4a29      	ldr	r2, [pc, #164]	; (800763c <USB_SetTurnaroundTime+0x134>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d802      	bhi.n	80075a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800759a:	230a      	movs	r3, #10
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	e02b      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4a26      	ldr	r2, [pc, #152]	; (800763c <USB_SetTurnaroundTime+0x134>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d906      	bls.n	80075b6 <USB_SetTurnaroundTime+0xae>
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4a25      	ldr	r2, [pc, #148]	; (8007640 <USB_SetTurnaroundTime+0x138>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d202      	bcs.n	80075b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80075b0:	2309      	movs	r3, #9
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	e020      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4a21      	ldr	r2, [pc, #132]	; (8007640 <USB_SetTurnaroundTime+0x138>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d306      	bcc.n	80075cc <USB_SetTurnaroundTime+0xc4>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	4a20      	ldr	r2, [pc, #128]	; (8007644 <USB_SetTurnaroundTime+0x13c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d802      	bhi.n	80075cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80075c6:	2308      	movs	r3, #8
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	e015      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <USB_SetTurnaroundTime+0x13c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d906      	bls.n	80075e2 <USB_SetTurnaroundTime+0xda>
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <USB_SetTurnaroundTime+0x140>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d202      	bcs.n	80075e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075dc:	2307      	movs	r3, #7
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e00a      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075e2:	2306      	movs	r3, #6
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	e007      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075ee:	2309      	movs	r3, #9
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	e001      	b.n	80075f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80075f4:	2309      	movs	r3, #9
 80075f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	029b      	lsls	r3, r3, #10
 800760c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	00d8acbf 	.word	0x00d8acbf
 8007628:	00e4e1c0 	.word	0x00e4e1c0
 800762c:	00f42400 	.word	0x00f42400
 8007630:	01067380 	.word	0x01067380
 8007634:	011a499f 	.word	0x011a499f
 8007638:	01312cff 	.word	0x01312cff
 800763c:	014ca43f 	.word	0x014ca43f
 8007640:	016e3600 	.word	0x016e3600
 8007644:	01a6ab1f 	.word	0x01a6ab1f
 8007648:	01e84800 	.word	0x01e84800

0800764c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f043 0201 	orr.w	r2, r3, #1
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f023 0201 	bic.w	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d115      	bne.n	80076de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076be:	200a      	movs	r0, #10
 80076c0:	f7f9 fd88 	bl	80011d4 <HAL_Delay>
      ms += 10U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	330a      	adds	r3, #10
 80076c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 f93b 	bl	8008946 <USB_GetMode>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d01e      	beq.n	8007714 <USB_SetCurrentMode+0x84>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2bc7      	cmp	r3, #199	; 0xc7
 80076da:	d9f0      	bls.n	80076be <USB_SetCurrentMode+0x2e>
 80076dc:	e01a      	b.n	8007714 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d115      	bne.n	8007710 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076f0:	200a      	movs	r0, #10
 80076f2:	f7f9 fd6f 	bl	80011d4 <HAL_Delay>
      ms += 10U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	330a      	adds	r3, #10
 80076fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 f922 	bl	8008946 <USB_GetMode>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <USB_SetCurrentMode+0x84>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2bc7      	cmp	r3, #199	; 0xc7
 800770c:	d9f0      	bls.n	80076f0 <USB_SetCurrentMode+0x60>
 800770e:	e001      	b.n	8007714 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e005      	b.n	8007720 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2bc8      	cmp	r3, #200	; 0xc8
 8007718:	d101      	bne.n	800771e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007728:	b084      	sub	sp, #16
 800772a:	b580      	push	{r7, lr}
 800772c:	b086      	sub	sp, #24
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007742:	2300      	movs	r3, #0
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	e009      	b.n	800775c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	3340      	adds	r3, #64	; 0x40
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	2200      	movs	r2, #0
 8007754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	3301      	adds	r3, #1
 800775a:	613b      	str	r3, [r7, #16]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b0e      	cmp	r3, #14
 8007760:	d9f2      	bls.n	8007748 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007762:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007766:	2b00      	cmp	r3, #0
 8007768:	d11c      	bne.n	80077a4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007778:	f043 0302 	orr.w	r3, r3, #2
 800777c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e005      	b.n	80077b0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077b6:	461a      	mov	r2, r3
 80077b8:	2300      	movs	r3, #0
 80077ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d10d      	bne.n	80077e0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077cc:	2100      	movs	r1, #0
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f968 	bl	8007aa4 <USB_SetDevSpeed>
 80077d4:	e008      	b.n	80077e8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077d6:	2101      	movs	r1, #1
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f963 	bl	8007aa4 <USB_SetDevSpeed>
 80077de:	e003      	b.n	80077e8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077e0:	2103      	movs	r1, #3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f95e 	bl	8007aa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077e8:	2110      	movs	r1, #16
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f8fa 	bl	80079e4 <USB_FlushTxFifo>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f924 	bl	8007a48 <USB_FlushRxFifo>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007810:	461a      	mov	r2, r3
 8007812:	2300      	movs	r3, #0
 8007814:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781c:	461a      	mov	r2, r3
 800781e:	2300      	movs	r3, #0
 8007820:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007828:	461a      	mov	r2, r3
 800782a:	2300      	movs	r3, #0
 800782c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800782e:	2300      	movs	r3, #0
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	e043      	b.n	80078bc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800784a:	d118      	bne.n	800787e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785e:	461a      	mov	r2, r3
 8007860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	e013      	b.n	8007890 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007874:	461a      	mov	r2, r3
 8007876:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	e008      	b.n	8007890 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788a:	461a      	mov	r2, r3
 800788c:	2300      	movs	r3, #0
 800788e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	461a      	mov	r2, r3
 800789e:	2300      	movs	r3, #0
 80078a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ae:	461a      	mov	r2, r3
 80078b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3301      	adds	r3, #1
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078c0:	461a      	mov	r2, r3
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d3b5      	bcc.n	8007834 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078c8:	2300      	movs	r3, #0
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	e043      	b.n	8007956 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078e4:	d118      	bne.n	8007918 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f8:	461a      	mov	r2, r3
 80078fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	e013      	b.n	800792a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790e:	461a      	mov	r2, r3
 8007910:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	e008      	b.n	800792a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	461a      	mov	r2, r3
 8007926:	2300      	movs	r3, #0
 8007928:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007936:	461a      	mov	r2, r3
 8007938:	2300      	movs	r3, #0
 800793a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007948:	461a      	mov	r2, r3
 800794a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800794e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	3301      	adds	r3, #1
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800795a:	461a      	mov	r2, r3
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4293      	cmp	r3, r2
 8007960:	d3b5      	bcc.n	80078ce <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007974:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007982:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007988:	2b00      	cmp	r3, #0
 800798a:	d105      	bne.n	8007998 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f043 0210 	orr.w	r2, r3, #16
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <USB_DevInit+0x2b4>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	f043 0208 	orr.w	r2, r3, #8
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d105      	bne.n	80079cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	699a      	ldr	r2, [r3, #24]
 80079c4:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <USB_DevInit+0x2b8>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079d8:	b004      	add	sp, #16
 80079da:	4770      	bx	lr
 80079dc:	803c3800 	.word	0x803c3800
 80079e0:	40000004 	.word	0x40000004

080079e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80079fe:	d901      	bls.n	8007a04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e01b      	b.n	8007a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	daf2      	bge.n	80079f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	019b      	lsls	r3, r3, #6
 8007a14:	f043 0220 	orr.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007a28:	d901      	bls.n	8007a2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e006      	b.n	8007a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d0f0      	beq.n	8007a1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3301      	adds	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007a60:	d901      	bls.n	8007a66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e018      	b.n	8007a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	daf2      	bge.n	8007a54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2210      	movs	r2, #16
 8007a76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007a84:	d901      	bls.n	8007a8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e006      	b.n	8007a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d0f0      	beq.n	8007a78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	68f9      	ldr	r1, [r7, #12]
 8007ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b087      	sub	sp, #28
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 0306 	and.w	r3, r3, #6
 8007aee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007af6:	2300      	movs	r3, #0
 8007af8:	75fb      	strb	r3, [r7, #23]
 8007afa:	e00a      	b.n	8007b12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d002      	beq.n	8007b08 <USB_GetDevSpeed+0x32>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b06      	cmp	r3, #6
 8007b06:	d102      	bne.n	8007b0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b08:	2302      	movs	r3, #2
 8007b0a:	75fb      	strb	r3, [r7, #23]
 8007b0c:	e001      	b.n	8007b12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b0e:	230f      	movs	r3, #15
 8007b10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	785b      	ldrb	r3, [r3, #1]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d139      	bne.n	8007bb0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b42:	69da      	ldr	r2, [r3, #28]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	68f9      	ldr	r1, [r7, #12]
 8007b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d153      	bne.n	8007c1c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	791b      	ldrb	r3, [r3, #4]
 8007b8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	059b      	lsls	r3, r3, #22
 8007b96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	0159      	lsls	r1, r3, #5
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	440b      	add	r3, r1
 8007ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4b20      	ldr	r3, [pc, #128]	; (8007c2c <USB_ActivateEndpoint+0x10c>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	600b      	str	r3, [r1, #0]
 8007bae:	e035      	b.n	8007c1c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc6:	041b      	lsls	r3, r3, #16
 8007bc8:	68f9      	ldr	r1, [r7, #12]
 8007bca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d119      	bne.n	8007c1c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	791b      	ldrb	r3, [r3, #4]
 8007c02:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c04:	430b      	orrs	r3, r1
 8007c06:	431a      	orrs	r2, r3
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	0159      	lsls	r1, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	440b      	add	r3, r1
 8007c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c14:	4619      	mov	r1, r3
 8007c16:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <USB_ActivateEndpoint+0x10c>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	10008000 	.word	0x10008000

08007c30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d161      	bne.n	8007d10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c62:	d11f      	bne.n	8007ca4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	0151      	lsls	r1, r2, #5
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	440a      	add	r2, r1
 8007c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	0151      	lsls	r1, r2, #5
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	440a      	add	r2, r1
 8007c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	f003 030f 	and.w	r3, r3, #15
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	69da      	ldr	r2, [r3, #28]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	2101      	movs	r1, #1
 8007cda:	fa01 f303 	lsl.w	r3, r1, r3
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	43db      	mvns	r3, r3
 8007ce2:	68f9      	ldr	r1, [r7, #12]
 8007ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ce8:	4013      	ands	r3, r2
 8007cea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	0159      	lsls	r1, r3, #5
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	440b      	add	r3, r1
 8007d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d06:	4619      	mov	r1, r3
 8007d08:	4b35      	ldr	r3, [pc, #212]	; (8007de0 <USB_DeactivateEndpoint+0x1b0>)
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	600b      	str	r3, [r1, #0]
 8007d0e:	e060      	b.n	8007dd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d26:	d11f      	bne.n	8007d68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	0151      	lsls	r1, r2, #5
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	440a      	add	r2, r1
 8007d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	2101      	movs	r1, #1
 8007d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7e:	041b      	lsls	r3, r3, #16
 8007d80:	43db      	mvns	r3, r3
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d88:	4013      	ands	r3, r2
 8007d8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d92:	69da      	ldr	r2, [r3, #28]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	f003 030f 	and.w	r3, r3, #15
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007da2:	041b      	lsls	r3, r3, #16
 8007da4:	43db      	mvns	r3, r3
 8007da6:	68f9      	ldr	r1, [r7, #12]
 8007da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dac:	4013      	ands	r3, r2
 8007dae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	0159      	lsls	r1, r3, #5
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	440b      	add	r3, r1
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <USB_DeactivateEndpoint+0x1b4>)
 8007dce:	4013      	ands	r3, r2
 8007dd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	ec337800 	.word	0xec337800
 8007de4:	eff37800 	.word	0xeff37800

08007de8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08a      	sub	sp, #40	; 0x28
 8007dec:	af02      	add	r7, sp, #8
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4613      	mov	r3, r2
 8007df4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	f040 8181 	bne.w	800810c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d132      	bne.n	8007e78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1e:	691a      	ldr	r2, [r3, #16]
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	0159      	lsls	r1, r3, #5
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	440b      	add	r3, r1
 8007e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4ba5      	ldr	r3, [pc, #660]	; (80080c4 <USB_EPStartXfer+0x2dc>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	0151      	lsls	r1, r2, #5
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	440a      	add	r2, r1
 8007e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	0159      	lsls	r1, r3, #5
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	440b      	add	r3, r1
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4b95      	ldr	r3, [pc, #596]	; (80080c8 <USB_EPStartXfer+0x2e0>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	610b      	str	r3, [r1, #16]
 8007e76:	e092      	b.n	8007f9e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e84:	691a      	ldr	r2, [r3, #16]
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	0159      	lsls	r1, r3, #5
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	440b      	add	r3, r1
 8007e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e92:	4619      	mov	r1, r3
 8007e94:	4b8c      	ldr	r3, [pc, #560]	; (80080c8 <USB_EPStartXfer+0x2e0>)
 8007e96:	4013      	ands	r3, r2
 8007e98:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	0159      	lsls	r1, r3, #5
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	440b      	add	r3, r1
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4b83      	ldr	r3, [pc, #524]	; (80080c4 <USB_EPStartXfer+0x2dc>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d11a      	bne.n	8007ef8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d903      	bls.n	8007ed6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ef4:	6113      	str	r3, [r2, #16]
 8007ef6:	e01b      	b.n	8007f30 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f04:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	6919      	ldr	r1, [r3, #16]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	440b      	add	r3, r1
 8007f10:	1e59      	subs	r1, r3, #1
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f1a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f1c:	4b6b      	ldr	r3, [pc, #428]	; (80080cc <USB_EPStartXfer+0x2e4>)
 8007f1e:	400b      	ands	r3, r1
 8007f20:	69b9      	ldr	r1, [r7, #24]
 8007f22:	0148      	lsls	r0, r1, #5
 8007f24:	69f9      	ldr	r1, [r7, #28]
 8007f26:	4401      	add	r1, r0
 8007f28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f46:	69b9      	ldr	r1, [r7, #24]
 8007f48:	0148      	lsls	r0, r1, #5
 8007f4a:	69f9      	ldr	r1, [r7, #28]
 8007f4c:	4401      	add	r1, r0
 8007f4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f52:	4313      	orrs	r3, r2
 8007f54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	791b      	ldrb	r3, [r3, #4]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d11f      	bne.n	8007f9e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	0151      	lsls	r1, r2, #5
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	440a      	add	r2, r1
 8007f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007f7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	0151      	lsls	r1, r2, #5
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	440a      	add	r2, r1
 8007f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d14b      	bne.n	800803c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d009      	beq.n	8007fc0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	791b      	ldrb	r3, [r3, #4]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d128      	bne.n	800801a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d110      	bne.n	8007ffa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	e00f      	b.n	800801a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	0151      	lsls	r1, r2, #5
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	440a      	add	r2, r1
 8008010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008018:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	69fa      	ldr	r2, [r7, #28]
 800802e:	440a      	add	r2, r1
 8008030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	e16a      	b.n	8008312 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	440a      	add	r2, r1
 8008052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008056:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800805a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	791b      	ldrb	r3, [r3, #4]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d015      	beq.n	8008090 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 8152 	beq.w	8008312 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	2101      	movs	r1, #1
 8008080:	fa01 f303 	lsl.w	r3, r1, r3
 8008084:	69f9      	ldr	r1, [r7, #28]
 8008086:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800808a:	4313      	orrs	r3, r2
 800808c:	634b      	str	r3, [r1, #52]	; 0x34
 800808e:	e140      	b.n	8008312 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800809c:	2b00      	cmp	r3, #0
 800809e:	d117      	bne.n	80080d0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	e016      	b.n	80080f0 <USB_EPStartXfer+0x308>
 80080c2:	bf00      	nop
 80080c4:	e007ffff 	.word	0xe007ffff
 80080c8:	fff80000 	.word	0xfff80000
 80080cc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	68d9      	ldr	r1, [r3, #12]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	b298      	uxth	r0, r3
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4603      	mov	r3, r0
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f9b9 	bl	800847c <USB_WritePacket>
 800810a:	e102      	b.n	8008312 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	0159      	lsls	r1, r3, #5
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	440b      	add	r3, r1
 8008122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008126:	4619      	mov	r1, r3
 8008128:	4b7c      	ldr	r3, [pc, #496]	; (800831c <USB_EPStartXfer+0x534>)
 800812a:	4013      	ands	r3, r2
 800812c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	0159      	lsls	r1, r3, #5
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	440b      	add	r3, r1
 8008144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008148:	4619      	mov	r1, r3
 800814a:	4b75      	ldr	r3, [pc, #468]	; (8008320 <USB_EPStartXfer+0x538>)
 800814c:	4013      	ands	r3, r2
 800814e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d12f      	bne.n	80081b6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817a:	691a      	ldr	r2, [r3, #16]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008184:	69b9      	ldr	r1, [r7, #24]
 8008186:	0148      	lsls	r0, r1, #5
 8008188:	69f9      	ldr	r1, [r7, #28]
 800818a:	4401      	add	r1, r0
 800818c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008190:	4313      	orrs	r3, r2
 8008192:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	0151      	lsls	r1, r2, #5
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	440a      	add	r2, r1
 80081aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081b2:	6113      	str	r3, [r2, #16]
 80081b4:	e05f      	b.n	8008276 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d123      	bne.n	8008206 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d4:	69b9      	ldr	r1, [r7, #24]
 80081d6:	0148      	lsls	r0, r1, #5
 80081d8:	69f9      	ldr	r1, [r7, #28]
 80081da:	4401      	add	r1, r0
 80081dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081e0:	4313      	orrs	r3, r2
 80081e2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	0151      	lsls	r1, r2, #5
 80081f6:	69fa      	ldr	r2, [r7, #28]
 80081f8:	440a      	add	r2, r1
 80081fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008202:	6113      	str	r3, [r2, #16]
 8008204:	e037      	b.n	8008276 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	691a      	ldr	r2, [r3, #16]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	4413      	add	r3, r2
 8008210:	1e5a      	subs	r2, r3, #1
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	fbb2 f3f3 	udiv	r3, r2, r3
 800821a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	8afa      	ldrh	r2, [r7, #22]
 8008222:	fb03 f202 	mul.w	r2, r3, r2
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	8afb      	ldrh	r3, [r7, #22]
 800823a:	04d9      	lsls	r1, r3, #19
 800823c:	4b39      	ldr	r3, [pc, #228]	; (8008324 <USB_EPStartXfer+0x53c>)
 800823e:	400b      	ands	r3, r1
 8008240:	69b9      	ldr	r1, [r7, #24]
 8008242:	0148      	lsls	r0, r1, #5
 8008244:	69f9      	ldr	r1, [r7, #28]
 8008246:	4401      	add	r1, r0
 8008248:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800824c:	4313      	orrs	r3, r2
 800824e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008266:	69b9      	ldr	r1, [r7, #24]
 8008268:	0148      	lsls	r0, r1, #5
 800826a:	69f9      	ldr	r1, [r7, #28]
 800826c:	4401      	add	r1, r0
 800826e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008272:	4313      	orrs	r3, r2
 8008274:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d10d      	bne.n	8008298 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d009      	beq.n	8008298 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	68d9      	ldr	r1, [r3, #12]
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	460a      	mov	r2, r1
 8008296:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	791b      	ldrb	r3, [r3, #4]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d128      	bne.n	80082f2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d110      	bne.n	80082d2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	0151      	lsls	r1, r2, #5
 80082c2:	69fa      	ldr	r2, [r7, #28]
 80082c4:	440a      	add	r2, r1
 80082c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	e00f      	b.n	80082f2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082f0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	69fa      	ldr	r2, [r7, #28]
 8008306:	440a      	add	r2, r1
 8008308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800830c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008310:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3720      	adds	r7, #32
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	fff80000 	.word	0xfff80000
 8008320:	e007ffff 	.word	0xe007ffff
 8008324:	1ff80000 	.word	0x1ff80000

08008328 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008332:	2300      	movs	r3, #0
 8008334:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	785b      	ldrb	r3, [r3, #1]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d14a      	bne.n	80083dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800835a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800835e:	f040 8086 	bne.w	800846e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	7812      	ldrb	r2, [r2, #0]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	440a      	add	r2, r1
 800837c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008380:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008384:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	7812      	ldrb	r2, [r2, #0]
 800839a:	0151      	lsls	r1, r2, #5
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	440a      	add	r2, r1
 80083a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3301      	adds	r3, #1
 80083ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d902      	bls.n	80083c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	75fb      	strb	r3, [r7, #23]
          break;
 80083be:	e056      	b.n	800846e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083d8:	d0e7      	beq.n	80083aa <USB_EPStopXfer+0x82>
 80083da:	e048      	b.n	800846e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083f4:	d13b      	bne.n	800846e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	7812      	ldrb	r2, [r2, #0]
 800840a:	0151      	lsls	r1, r2, #5
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	440a      	add	r2, r1
 8008410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008414:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008418:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	7812      	ldrb	r2, [r2, #0]
 800842e:	0151      	lsls	r1, r2, #5
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	440a      	add	r2, r1
 8008434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800843c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	3301      	adds	r3, #1
 8008442:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f242 7210 	movw	r2, #10000	; 0x2710
 800844a:	4293      	cmp	r3, r2
 800844c:	d902      	bls.n	8008454 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	75fb      	strb	r3, [r7, #23]
          break;
 8008452:	e00c      	b.n	800846e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	4413      	add	r3, r2
 800845e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800846c:	d0e7      	beq.n	800843e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800846e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008470:	4618      	mov	r0, r3
 8008472:	371c      	adds	r7, #28
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800847c:	b480      	push	{r7}
 800847e:	b089      	sub	sp, #36	; 0x24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	4611      	mov	r1, r2
 8008488:	461a      	mov	r2, r3
 800848a:	460b      	mov	r3, r1
 800848c:	71fb      	strb	r3, [r7, #7]
 800848e:	4613      	mov	r3, r2
 8008490:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800849a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d123      	bne.n	80084ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80084a2:	88bb      	ldrh	r3, [r7, #4]
 80084a4:	3303      	adds	r3, #3
 80084a6:	089b      	lsrs	r3, r3, #2
 80084a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80084aa:	2300      	movs	r3, #0
 80084ac:	61bb      	str	r3, [r7, #24]
 80084ae:	e018      	b.n	80084e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80084b0:	79fb      	ldrb	r3, [r7, #7]
 80084b2:	031a      	lsls	r2, r3, #12
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084bc:	461a      	mov	r2, r3
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	3301      	adds	r3, #1
 80084c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	3301      	adds	r3, #1
 80084ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	3301      	adds	r3, #1
 80084d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	3301      	adds	r3, #1
 80084da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	3301      	adds	r3, #1
 80084e0:	61bb      	str	r3, [r7, #24]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3e2      	bcc.n	80084b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3724      	adds	r7, #36	; 0x24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b08b      	sub	sp, #44	; 0x2c
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	4613      	mov	r3, r2
 8008504:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800850e:	88fb      	ldrh	r3, [r7, #6]
 8008510:	089b      	lsrs	r3, r3, #2
 8008512:	b29b      	uxth	r3, r3
 8008514:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800851e:	2300      	movs	r3, #0
 8008520:	623b      	str	r3, [r7, #32]
 8008522:	e014      	b.n	800854e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	3301      	adds	r3, #1
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	3301      	adds	r3, #1
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	3301      	adds	r3, #1
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	3301      	adds	r3, #1
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	3301      	adds	r3, #1
 800854c:	623b      	str	r3, [r7, #32]
 800854e:	6a3a      	ldr	r2, [r7, #32]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	429a      	cmp	r2, r3
 8008554:	d3e6      	bcc.n	8008524 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008556:	8bfb      	ldrh	r3, [r7, #30]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01e      	beq.n	800859a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008566:	461a      	mov	r2, r3
 8008568:	f107 0310 	add.w	r3, r7, #16
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	fa22 f303 	lsr.w	r3, r2, r3
 800857c:	b2da      	uxtb	r2, r3
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	701a      	strb	r2, [r3, #0]
      i++;
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	3301      	adds	r3, #1
 8008586:	623b      	str	r3, [r7, #32]
      pDest++;
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	3301      	adds	r3, #1
 800858c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800858e:	8bfb      	ldrh	r3, [r7, #30]
 8008590:	3b01      	subs	r3, #1
 8008592:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008594:	8bfb      	ldrh	r3, [r7, #30]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1ea      	bne.n	8008570 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800859c:	4618      	mov	r0, r3
 800859e:	372c      	adds	r7, #44	; 0x2c
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	785b      	ldrb	r3, [r3, #1]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d12c      	bne.n	800861e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	db12      	blt.n	80085fc <USB_EPSetStall+0x54>
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00f      	beq.n	80085fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	0151      	lsls	r1, r2, #5
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	440a      	add	r2, r1
 80085f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	0151      	lsls	r1, r2, #5
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	440a      	add	r2, r1
 8008612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	e02b      	b.n	8008676 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	db12      	blt.n	8008656 <USB_EPSetStall+0xae>
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00f      	beq.n	8008656 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	440a      	add	r2, r1
 800864c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008650:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008654:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	0151      	lsls	r1, r2, #5
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	440a      	add	r2, r1
 800866c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008674:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d128      	bne.n	80086f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	0151      	lsls	r1, r2, #5
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	440a      	add	r2, r1
 80086b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	791b      	ldrb	r3, [r3, #4]
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d003      	beq.n	80086d0 <USB_EPClearStall+0x4c>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	791b      	ldrb	r3, [r3, #4]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d138      	bne.n	8008742 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	e027      	b.n	8008742 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	440a      	add	r2, r1
 8008708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800870c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008710:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	791b      	ldrb	r3, [r3, #4]
 8008716:	2b03      	cmp	r3, #3
 8008718:	d003      	beq.n	8008722 <USB_EPClearStall+0x9e>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	791b      	ldrb	r3, [r3, #4]
 800871e:	2b02      	cmp	r3, #2
 8008720:	d10f      	bne.n	8008742 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	0151      	lsls	r1, r2, #5
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	440a      	add	r2, r1
 8008738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800873c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008740:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800876e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008772:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008784:	68f9      	ldr	r1, [r7, #12]
 8008786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800878a:	4313      	orrs	r3, r2
 800878c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ca:	f023 0302 	bic.w	r3, r3, #2
 80087ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80087de:	b480      	push	{r7}
 80087e0:	b085      	sub	sp, #20
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087f8:	f023 0303 	bic.w	r3, r3, #3
 80087fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800880c:	f043 0302 	orr.w	r3, r3, #2
 8008810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4013      	ands	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008838:	68fb      	ldr	r3, [r7, #12]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008846:	b480      	push	{r7}
 8008848:	b085      	sub	sp, #20
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	4013      	ands	r3, r2
 8008868:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	0c1b      	lsrs	r3, r3, #16
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	4013      	ands	r3, r2
 800889c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	b29b      	uxth	r3, r3
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b085      	sub	sp, #20
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	460b      	mov	r3, r1
 80088b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	4013      	ands	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088dc:	68bb      	ldr	r3, [r7, #8]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b087      	sub	sp, #28
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	460b      	mov	r3, r1
 80088f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800890e:	78fb      	ldrb	r3, [r7, #3]
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	fa22 f303 	lsr.w	r3, r2, r3
 800891a:	01db      	lsls	r3, r3, #7
 800891c:	b2db      	uxtb	r3, r3
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	4313      	orrs	r3, r2
 8008922:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4013      	ands	r3, r2
 8008936:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008938:	68bb      	ldr	r3, [r7, #8]
}
 800893a:	4618      	mov	r0, r3
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	f003 0301 	and.w	r3, r3, #1
}
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897e:	4619      	mov	r1, r3
 8008980:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <USB_ActivateSetup+0x44>)
 8008982:	4013      	ands	r3, r2
 8008984:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	fffff800 	.word	0xfffff800

080089ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	460b      	mov	r3, r1
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	333c      	adds	r3, #60	; 0x3c
 80089c2:	3304      	adds	r3, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	4a26      	ldr	r2, [pc, #152]	; (8008a64 <USB_EP0_OutStart+0xb8>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d90a      	bls.n	80089e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089e0:	d101      	bne.n	80089e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e037      	b.n	8008a56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ec:	461a      	mov	r2, r3
 80089ee:	2300      	movs	r3, #0
 80089f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a14:	f043 0318 	orr.w	r3, r3, #24
 8008a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008a2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d10f      	bne.n	8008a54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008a52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	371c      	adds	r7, #28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	4f54300a 	.word	0x4f54300a

08008a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008a80:	d901      	bls.n	8008a86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e01b      	b.n	8008abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	daf2      	bge.n	8008a74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	f043 0201 	orr.w	r2, r3, #1
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008aaa:	d901      	bls.n	8008ab0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e006      	b.n	8008abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d0f0      	beq.n	8008a9e <USB_CoreReset+0x36>

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
	...

08008acc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ad8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008adc:	f002 fd00 	bl	800b4e0 <USBD_static_malloc>
 8008ae0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	32b0      	adds	r2, #176	; 0xb0
 8008af2:	2100      	movs	r1, #0
 8008af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008af8:	2302      	movs	r3, #2
 8008afa:	e0d4      	b.n	8008ca6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008afc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008b00:	2100      	movs	r1, #0
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f005 fddd 	bl	800e6c2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	32b0      	adds	r2, #176	; 0xb0
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32b0      	adds	r2, #176	; 0xb0
 8008b22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7c1b      	ldrb	r3, [r3, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d138      	bne.n	8008ba6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b34:	4b5e      	ldr	r3, [pc, #376]	; (8008cb0 <USBD_CDC_Init+0x1e4>)
 8008b36:	7819      	ldrb	r1, [r3, #0]
 8008b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f002 fbab 	bl	800b29a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b44:	4b5a      	ldr	r3, [pc, #360]	; (8008cb0 <USBD_CDC_Init+0x1e4>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	f003 020f 	and.w	r2, r3, #15
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	440b      	add	r3, r1
 8008b58:	3324      	adds	r3, #36	; 0x24
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b5e:	4b55      	ldr	r3, [pc, #340]	; (8008cb4 <USBD_CDC_Init+0x1e8>)
 8008b60:	7819      	ldrb	r1, [r3, #0]
 8008b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b66:	2202      	movs	r2, #2
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f002 fb96 	bl	800b29a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b6e:	4b51      	ldr	r3, [pc, #324]	; (8008cb4 <USBD_CDC_Init+0x1e8>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	f003 020f 	and.w	r2, r3, #15
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	440b      	add	r3, r1
 8008b82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b86:	2201      	movs	r2, #1
 8008b88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008b8a:	4b4b      	ldr	r3, [pc, #300]	; (8008cb8 <USBD_CDC_Init+0x1ec>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	f003 020f 	and.w	r2, r3, #15
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	4613      	mov	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	3326      	adds	r3, #38	; 0x26
 8008ba0:	2210      	movs	r2, #16
 8008ba2:	801a      	strh	r2, [r3, #0]
 8008ba4:	e035      	b.n	8008c12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008ba6:	4b42      	ldr	r3, [pc, #264]	; (8008cb0 <USBD_CDC_Init+0x1e4>)
 8008ba8:	7819      	ldrb	r1, [r3, #0]
 8008baa:	2340      	movs	r3, #64	; 0x40
 8008bac:	2202      	movs	r2, #2
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f002 fb73 	bl	800b29a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008bb4:	4b3e      	ldr	r3, [pc, #248]	; (8008cb0 <USBD_CDC_Init+0x1e4>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 020f 	and.w	r2, r3, #15
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	3324      	adds	r3, #36	; 0x24
 8008bca:	2201      	movs	r2, #1
 8008bcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008bce:	4b39      	ldr	r3, [pc, #228]	; (8008cb4 <USBD_CDC_Init+0x1e8>)
 8008bd0:	7819      	ldrb	r1, [r3, #0]
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f002 fb5f 	bl	800b29a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008bdc:	4b35      	ldr	r3, [pc, #212]	; (8008cb4 <USBD_CDC_Init+0x1e8>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008bf8:	4b2f      	ldr	r3, [pc, #188]	; (8008cb8 <USBD_CDC_Init+0x1ec>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	f003 020f 	and.w	r2, r3, #15
 8008c00:	6879      	ldr	r1, [r7, #4]
 8008c02:	4613      	mov	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	440b      	add	r3, r1
 8008c0c:	3326      	adds	r3, #38	; 0x26
 8008c0e:	2210      	movs	r2, #16
 8008c10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c12:	4b29      	ldr	r3, [pc, #164]	; (8008cb8 <USBD_CDC_Init+0x1ec>)
 8008c14:	7819      	ldrb	r1, [r3, #0]
 8008c16:	2308      	movs	r3, #8
 8008c18:	2203      	movs	r2, #3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f002 fb3d 	bl	800b29a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008c20:	4b25      	ldr	r3, [pc, #148]	; (8008cb8 <USBD_CDC_Init+0x1ec>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	f003 020f 	and.w	r2, r3, #15
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	3324      	adds	r3, #36	; 0x24
 8008c36:	2201      	movs	r2, #1
 8008c38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	33b0      	adds	r3, #176	; 0xb0
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008c70:	2302      	movs	r3, #2
 8008c72:	e018      	b.n	8008ca6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	7c1b      	ldrb	r3, [r3, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c7c:	4b0d      	ldr	r3, [pc, #52]	; (8008cb4 <USBD_CDC_Init+0x1e8>)
 8008c7e:	7819      	ldrb	r1, [r3, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f002 fbf4 	bl	800b478 <USBD_LL_PrepareReceive>
 8008c90:	e008      	b.n	8008ca4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c92:	4b08      	ldr	r3, [pc, #32]	; (8008cb4 <USBD_CDC_Init+0x1e8>)
 8008c94:	7819      	ldrb	r1, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f002 fbea 	bl	800b478 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	24000097 	.word	0x24000097
 8008cb4:	24000098 	.word	0x24000098
 8008cb8:	24000099 	.word	0x24000099

08008cbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008cc8:	4b3a      	ldr	r3, [pc, #232]	; (8008db4 <USBD_CDC_DeInit+0xf8>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f002 fb09 	bl	800b2e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008cd4:	4b37      	ldr	r3, [pc, #220]	; (8008db4 <USBD_CDC_DeInit+0xf8>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	f003 020f 	and.w	r2, r3, #15
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	440b      	add	r3, r1
 8008ce8:	3324      	adds	r3, #36	; 0x24
 8008cea:	2200      	movs	r2, #0
 8008cec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008cee:	4b32      	ldr	r3, [pc, #200]	; (8008db8 <USBD_CDC_DeInit+0xfc>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f002 faf6 	bl	800b2e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008cfa:	4b2f      	ldr	r3, [pc, #188]	; (8008db8 <USBD_CDC_DeInit+0xfc>)
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	f003 020f 	and.w	r2, r3, #15
 8008d02:	6879      	ldr	r1, [r7, #4]
 8008d04:	4613      	mov	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d12:	2200      	movs	r2, #0
 8008d14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008d16:	4b29      	ldr	r3, [pc, #164]	; (8008dbc <USBD_CDC_DeInit+0x100>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f002 fae2 	bl	800b2e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008d22:	4b26      	ldr	r3, [pc, #152]	; (8008dbc <USBD_CDC_DeInit+0x100>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	f003 020f 	and.w	r2, r3, #15
 8008d2a:	6879      	ldr	r1, [r7, #4]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	440b      	add	r3, r1
 8008d36:	3324      	adds	r3, #36	; 0x24
 8008d38:	2200      	movs	r2, #0
 8008d3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008d3c:	4b1f      	ldr	r3, [pc, #124]	; (8008dbc <USBD_CDC_DeInit+0x100>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	f003 020f 	and.w	r2, r3, #15
 8008d44:	6879      	ldr	r1, [r7, #4]
 8008d46:	4613      	mov	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	440b      	add	r3, r1
 8008d50:	3326      	adds	r3, #38	; 0x26
 8008d52:	2200      	movs	r2, #0
 8008d54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	32b0      	adds	r2, #176	; 0xb0
 8008d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01f      	beq.n	8008da8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	33b0      	adds	r3, #176	; 0xb0
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	32b0      	adds	r2, #176	; 0xb0
 8008d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f002 fbb6 	bl	800b4fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	32b0      	adds	r2, #176	; 0xb0
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	24000097 	.word	0x24000097
 8008db8:	24000098 	.word	0x24000098
 8008dbc:	24000099 	.word	0x24000099

08008dc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	32b0      	adds	r2, #176	; 0xb0
 8008dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e0bf      	b.n	8008f70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d050      	beq.n	8008e9e <USBD_CDC_Setup+0xde>
 8008dfc:	2b20      	cmp	r3, #32
 8008dfe:	f040 80af 	bne.w	8008f60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	88db      	ldrh	r3, [r3, #6]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d03a      	beq.n	8008e80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	b25b      	sxtb	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	da1b      	bge.n	8008e4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	33b0      	adds	r3, #176	; 0xb0
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008e2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	88d2      	ldrh	r2, [r2, #6]
 8008e30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	88db      	ldrh	r3, [r3, #6]
 8008e36:	2b07      	cmp	r3, #7
 8008e38:	bf28      	it	cs
 8008e3a:	2307      	movcs	r3, #7
 8008e3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	89fa      	ldrh	r2, [r7, #14]
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fdbf 	bl	800a9c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008e4a:	e090      	b.n	8008f6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	785a      	ldrb	r2, [r3, #1]
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	88db      	ldrh	r3, [r3, #6]
 8008e5a:	2b3f      	cmp	r3, #63	; 0x3f
 8008e5c:	d803      	bhi.n	8008e66 <USBD_CDC_Setup+0xa6>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	88db      	ldrh	r3, [r3, #6]
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	e000      	b.n	8008e68 <USBD_CDC_Setup+0xa8>
 8008e66:	2240      	movs	r2, #64	; 0x40
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008e6e:	6939      	ldr	r1, [r7, #16]
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008e76:	461a      	mov	r2, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 fdd1 	bl	800aa20 <USBD_CtlPrepareRx>
      break;
 8008e7e:	e076      	b.n	8008f6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	33b0      	adds	r3, #176	; 0xb0
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	7850      	ldrb	r0, [r2, #1]
 8008e96:	2200      	movs	r2, #0
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	4798      	blx	r3
      break;
 8008e9c:	e067      	b.n	8008f6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	2b0b      	cmp	r3, #11
 8008ea4:	d851      	bhi.n	8008f4a <USBD_CDC_Setup+0x18a>
 8008ea6:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <USBD_CDC_Setup+0xec>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008edd 	.word	0x08008edd
 8008eb0:	08008f59 	.word	0x08008f59
 8008eb4:	08008f4b 	.word	0x08008f4b
 8008eb8:	08008f4b 	.word	0x08008f4b
 8008ebc:	08008f4b 	.word	0x08008f4b
 8008ec0:	08008f4b 	.word	0x08008f4b
 8008ec4:	08008f4b 	.word	0x08008f4b
 8008ec8:	08008f4b 	.word	0x08008f4b
 8008ecc:	08008f4b 	.word	0x08008f4b
 8008ed0:	08008f4b 	.word	0x08008f4b
 8008ed4:	08008f07 	.word	0x08008f07
 8008ed8:	08008f31 	.word	0x08008f31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d107      	bne.n	8008ef8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ee8:	f107 030a 	add.w	r3, r7, #10
 8008eec:	2202      	movs	r2, #2
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 fd69 	bl	800a9c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ef6:	e032      	b.n	8008f5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 fce7 	bl	800a8ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008f00:	2303      	movs	r3, #3
 8008f02:	75fb      	strb	r3, [r7, #23]
          break;
 8008f04:	e02b      	b.n	8008f5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d107      	bne.n	8008f22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f12:	f107 030d 	add.w	r3, r7, #13
 8008f16:	2201      	movs	r2, #1
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f001 fd54 	bl	800a9c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f20:	e01d      	b.n	8008f5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f001 fcd2 	bl	800a8ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f2e:	e016      	b.n	8008f5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d00f      	beq.n	8008f5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f001 fcc5 	bl	800a8ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008f44:	2303      	movs	r3, #3
 8008f46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f48:	e008      	b.n	8008f5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 fcbe 	bl	800a8ce <USBD_CtlError>
          ret = USBD_FAIL;
 8008f52:	2303      	movs	r3, #3
 8008f54:	75fb      	strb	r3, [r7, #23]
          break;
 8008f56:	e002      	b.n	8008f5e <USBD_CDC_Setup+0x19e>
          break;
 8008f58:	bf00      	nop
 8008f5a:	e008      	b.n	8008f6e <USBD_CDC_Setup+0x1ae>
          break;
 8008f5c:	bf00      	nop
      }
      break;
 8008f5e:	e006      	b.n	8008f6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 fcb3 	bl	800a8ce <USBD_CtlError>
      ret = USBD_FAIL;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	32b0      	adds	r2, #176	; 0xb0
 8008f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e065      	b.n	800906e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	32b0      	adds	r2, #176	; 0xb0
 8008fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	f003 020f 	and.w	r2, r3, #15
 8008fb8:	6879      	ldr	r1, [r7, #4]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	3318      	adds	r3, #24
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d02f      	beq.n	800902c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	f003 020f 	and.w	r2, r3, #15
 8008fd2:	6879      	ldr	r1, [r7, #4]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	440b      	add	r3, r1
 8008fde:	3318      	adds	r3, #24
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	f003 010f 	and.w	r1, r3, #15
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	460b      	mov	r3, r1
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	440b      	add	r3, r1
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4403      	add	r3, r0
 8008ff4:	331c      	adds	r3, #28
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ffc:	fb01 f303 	mul.w	r3, r1, r3
 8009000:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009002:	2b00      	cmp	r3, #0
 8009004:	d112      	bne.n	800902c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	f003 020f 	and.w	r2, r3, #15
 800900c:	6879      	ldr	r1, [r7, #4]
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	440b      	add	r3, r1
 8009018:	3318      	adds	r3, #24
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800901e:	78f9      	ldrb	r1, [r7, #3]
 8009020:	2300      	movs	r3, #0
 8009022:	2200      	movs	r2, #0
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f002 fa06 	bl	800b436 <USBD_LL_Transmit>
 800902a:	e01f      	b.n	800906c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2200      	movs	r2, #0
 8009030:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	33b0      	adds	r3, #176	; 0xb0
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d010      	beq.n	800906c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	33b0      	adds	r3, #176	; 0xb0
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009068:	78fa      	ldrb	r2, [r7, #3]
 800906a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	32b0      	adds	r2, #176	; 0xb0
 800908c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009090:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	32b0      	adds	r2, #176	; 0xb0
 800909c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e01a      	b.n	80090de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f002 fa04 	bl	800b4ba <USBD_LL_GetRxDataSize>
 80090b2:	4602      	mov	r2, r0
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	33b0      	adds	r3, #176	; 0xb0
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80090d8:	4611      	mov	r1, r2
 80090da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	32b0      	adds	r2, #176	; 0xb0
 80090f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009104:	2303      	movs	r3, #3
 8009106:	e025      	b.n	8009154 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	33b0      	adds	r3, #176	; 0xb0
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01a      	beq.n	8009152 <USBD_CDC_EP0_RxReady+0x6c>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009122:	2bff      	cmp	r3, #255	; 0xff
 8009124:	d015      	beq.n	8009152 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	33b0      	adds	r3, #176	; 0xb0
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800913e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009146:	b292      	uxth	r2, r2
 8009148:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	22ff      	movs	r2, #255	; 0xff
 800914e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009164:	2182      	movs	r1, #130	; 0x82
 8009166:	4818      	ldr	r0, [pc, #96]	; (80091c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009168:	f000 fd4f 	bl	8009c0a <USBD_GetEpDesc>
 800916c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800916e:	2101      	movs	r1, #1
 8009170:	4815      	ldr	r0, [pc, #84]	; (80091c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009172:	f000 fd4a 	bl	8009c0a <USBD_GetEpDesc>
 8009176:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009178:	2181      	movs	r1, #129	; 0x81
 800917a:	4813      	ldr	r0, [pc, #76]	; (80091c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800917c:	f000 fd45 	bl	8009c0a <USBD_GetEpDesc>
 8009180:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2210      	movs	r2, #16
 800918c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d006      	beq.n	80091a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	2200      	movs	r2, #0
 8009198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800919c:	711a      	strb	r2, [r3, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d006      	beq.n	80091b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091b0:	711a      	strb	r2, [r3, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2243      	movs	r2, #67	; 0x43
 80091ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091bc:	4b02      	ldr	r3, [pc, #8]	; (80091c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	24000054 	.word	0x24000054

080091cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091d4:	2182      	movs	r1, #130	; 0x82
 80091d6:	4818      	ldr	r0, [pc, #96]	; (8009238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091d8:	f000 fd17 	bl	8009c0a <USBD_GetEpDesc>
 80091dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80091de:	2101      	movs	r1, #1
 80091e0:	4815      	ldr	r0, [pc, #84]	; (8009238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091e2:	f000 fd12 	bl	8009c0a <USBD_GetEpDesc>
 80091e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091e8:	2181      	movs	r1, #129	; 0x81
 80091ea:	4813      	ldr	r0, [pc, #76]	; (8009238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091ec:	f000 fd0d 	bl	8009c0a <USBD_GetEpDesc>
 80091f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2210      	movs	r2, #16
 80091fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d006      	beq.n	8009212 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2200      	movs	r2, #0
 8009208:	711a      	strb	r2, [r3, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f042 0202 	orr.w	r2, r2, #2
 8009210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d006      	beq.n	8009226 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	711a      	strb	r2, [r3, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f042 0202 	orr.w	r2, r2, #2
 8009224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2243      	movs	r2, #67	; 0x43
 800922a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800922e:	4618      	mov	r0, r3
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	24000054 	.word	0x24000054

0800923c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009244:	2182      	movs	r1, #130	; 0x82
 8009246:	4818      	ldr	r0, [pc, #96]	; (80092a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009248:	f000 fcdf 	bl	8009c0a <USBD_GetEpDesc>
 800924c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800924e:	2101      	movs	r1, #1
 8009250:	4815      	ldr	r0, [pc, #84]	; (80092a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009252:	f000 fcda 	bl	8009c0a <USBD_GetEpDesc>
 8009256:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009258:	2181      	movs	r1, #129	; 0x81
 800925a:	4813      	ldr	r0, [pc, #76]	; (80092a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800925c:	f000 fcd5 	bl	8009c0a <USBD_GetEpDesc>
 8009260:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2210      	movs	r2, #16
 800926c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d006      	beq.n	8009282 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	2200      	movs	r2, #0
 8009278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800927c:	711a      	strb	r2, [r3, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d006      	beq.n	8009296 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009290:	711a      	strb	r2, [r3, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2243      	movs	r2, #67	; 0x43
 800929a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800929c:	4b02      	ldr	r3, [pc, #8]	; (80092a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	24000054 	.word	0x24000054

080092ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	220a      	movs	r2, #10
 80092b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80092ba:	4b03      	ldr	r3, [pc, #12]	; (80092c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	24000010 	.word	0x24000010

080092cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80092dc:	2303      	movs	r3, #3
 80092de:	e009      	b.n	80092f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	33b0      	adds	r3, #176	; 0xb0
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	32b0      	adds	r2, #176	; 0xb0
 8009316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d101      	bne.n	8009326 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009322:	2303      	movs	r3, #3
 8009324:	e008      	b.n	8009338 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	371c      	adds	r7, #28
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	32b0      	adds	r2, #176	; 0xb0
 8009358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d101      	bne.n	8009368 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009364:	2303      	movs	r3, #3
 8009366:	e004      	b.n	8009372 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
	...

08009380 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	32b0      	adds	r2, #176	; 0xb0
 8009392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009396:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009398:	2301      	movs	r3, #1
 800939a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e025      	b.n	80093f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d11f      	bne.n	80093f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80093b8:	4b10      	ldr	r3, [pc, #64]	; (80093fc <USBD_CDC_TransmitPacket+0x7c>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	f003 020f 	and.w	r2, r3, #15
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4403      	add	r3, r0
 80093d2:	3318      	adds	r3, #24
 80093d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80093d6:	4b09      	ldr	r3, [pc, #36]	; (80093fc <USBD_CDC_TransmitPacket+0x7c>)
 80093d8:	7819      	ldrb	r1, [r3, #0]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f002 f825 	bl	800b436 <USBD_LL_Transmit>

    ret = USBD_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	24000097 	.word	0x24000097

08009400 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	32b0      	adds	r2, #176	; 0xb0
 8009412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009416:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	32b0      	adds	r2, #176	; 0xb0
 8009422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800942a:	2303      	movs	r3, #3
 800942c:	e018      	b.n	8009460 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	7c1b      	ldrb	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009436:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <USBD_CDC_ReceivePacket+0x68>)
 8009438:	7819      	ldrb	r1, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f002 f817 	bl	800b478 <USBD_LL_PrepareReceive>
 800944a:	e008      	b.n	800945e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <USBD_CDC_ReceivePacket+0x68>)
 800944e:	7819      	ldrb	r1, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009456:	2340      	movs	r3, #64	; 0x40
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f002 f80d 	bl	800b478 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	24000098 	.word	0x24000098

0800946c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	4613      	mov	r3, r2
 8009478:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009480:	2303      	movs	r3, #3
 8009482:	e01f      	b.n	80094c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	79fa      	ldrb	r2, [r7, #7]
 80094b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f001 fe83 	bl	800b1c4 <USBD_LL_Init>
 80094be:	4603      	mov	r3, r0
 80094c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3718      	adds	r7, #24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e025      	b.n	8009530 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	32ae      	adds	r2, #174	; 0xae
 80094f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00f      	beq.n	8009520 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	32ae      	adds	r2, #174	; 0xae
 800950a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009510:	f107 020e 	add.w	r2, r7, #14
 8009514:	4610      	mov	r0, r2
 8009516:	4798      	blx	r3
 8009518:	4602      	mov	r2, r0
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f001 fe8f 	bl	800b264 <USBD_LL_Start>
 8009546:	4603      	mov	r3, r0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009558:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800955a:	4618      	mov	r0, r3
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957c:	2b00      	cmp	r3, #0
 800957e:	d009      	beq.n	8009594 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	4611      	mov	r1, r2
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	4798      	blx	r3
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	460b      	mov	r3, r1
 80095a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	78fa      	ldrb	r2, [r7, #3]
 80095b8:	4611      	mov	r1, r2
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80095c4:	2303      	movs	r3, #3
 80095c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f001 f938 	bl	800a85a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80095f8:	461a      	mov	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009606:	f003 031f 	and.w	r3, r3, #31
 800960a:	2b02      	cmp	r3, #2
 800960c:	d01a      	beq.n	8009644 <USBD_LL_SetupStage+0x72>
 800960e:	2b02      	cmp	r3, #2
 8009610:	d822      	bhi.n	8009658 <USBD_LL_SetupStage+0x86>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <USBD_LL_SetupStage+0x4a>
 8009616:	2b01      	cmp	r3, #1
 8009618:	d00a      	beq.n	8009630 <USBD_LL_SetupStage+0x5e>
 800961a:	e01d      	b.n	8009658 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fb65 	bl	8009cf4 <USBD_StdDevReq>
 800962a:	4603      	mov	r3, r0
 800962c:	73fb      	strb	r3, [r7, #15]
      break;
 800962e:	e020      	b.n	8009672 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fbcd 	bl	8009dd8 <USBD_StdItfReq>
 800963e:	4603      	mov	r3, r0
 8009640:	73fb      	strb	r3, [r7, #15]
      break;
 8009642:	e016      	b.n	8009672 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fc2f 	bl	8009eb0 <USBD_StdEPReq>
 8009652:	4603      	mov	r3, r0
 8009654:	73fb      	strb	r3, [r7, #15]
      break;
 8009656:	e00c      	b.n	8009672 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800965e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009662:	b2db      	uxtb	r3, r3
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 fe5c 	bl	800b324 <USBD_LL_StallEP>
 800966c:	4603      	mov	r3, r0
 800966e:	73fb      	strb	r3, [r7, #15]
      break;
 8009670:	bf00      	nop
  }

  return ret;
 8009672:	7bfb      	ldrb	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	460b      	mov	r3, r1
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800968e:	7afb      	ldrb	r3, [r7, #11]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d16e      	bne.n	8009772 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800969a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	f040 8098 	bne.w	80097d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d913      	bls.n	80096dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	689a      	ldr	r2, [r3, #8]
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	1ad2      	subs	r2, r2, r3
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	68da      	ldr	r2, [r3, #12]
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	4293      	cmp	r3, r2
 80096cc:	bf28      	it	cs
 80096ce:	4613      	movcs	r3, r2
 80096d0:	461a      	mov	r2, r3
 80096d2:	6879      	ldr	r1, [r7, #4]
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f001 f9c0 	bl	800aa5a <USBD_CtlContinueRx>
 80096da:	e07d      	b.n	80097d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80096e2:	f003 031f 	and.w	r3, r3, #31
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d014      	beq.n	8009714 <USBD_LL_DataOutStage+0x98>
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d81d      	bhi.n	800972a <USBD_LL_DataOutStage+0xae>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <USBD_LL_DataOutStage+0x7c>
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d003      	beq.n	80096fe <USBD_LL_DataOutStage+0x82>
 80096f6:	e018      	b.n	800972a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80096f8:	2300      	movs	r3, #0
 80096fa:	75bb      	strb	r3, [r7, #22]
            break;
 80096fc:	e018      	b.n	8009730 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009704:	b2db      	uxtb	r3, r3
 8009706:	4619      	mov	r1, r3
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 fa64 	bl	8009bd6 <USBD_CoreFindIF>
 800970e:	4603      	mov	r3, r0
 8009710:	75bb      	strb	r3, [r7, #22]
            break;
 8009712:	e00d      	b.n	8009730 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800971a:	b2db      	uxtb	r3, r3
 800971c:	4619      	mov	r1, r3
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 fa66 	bl	8009bf0 <USBD_CoreFindEP>
 8009724:	4603      	mov	r3, r0
 8009726:	75bb      	strb	r3, [r7, #22]
            break;
 8009728:	e002      	b.n	8009730 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	75bb      	strb	r3, [r7, #22]
            break;
 800972e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009730:	7dbb      	ldrb	r3, [r7, #22]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d119      	bne.n	800976a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b03      	cmp	r3, #3
 8009740:	d113      	bne.n	800976a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009742:	7dba      	ldrb	r2, [r7, #22]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	32ae      	adds	r2, #174	; 0xae
 8009748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00b      	beq.n	800976a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009752:	7dba      	ldrb	r2, [r7, #22]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800975a:	7dba      	ldrb	r2, [r7, #22]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	32ae      	adds	r2, #174	; 0xae
 8009760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f001 f986 	bl	800aa7c <USBD_CtlSendStatus>
 8009770:	e032      	b.n	80097d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009778:	b2db      	uxtb	r3, r3
 800977a:	4619      	mov	r1, r3
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 fa37 	bl	8009bf0 <USBD_CoreFindEP>
 8009782:	4603      	mov	r3, r0
 8009784:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009786:	7dbb      	ldrb	r3, [r7, #22]
 8009788:	2bff      	cmp	r3, #255	; 0xff
 800978a:	d025      	beq.n	80097d8 <USBD_LL_DataOutStage+0x15c>
 800978c:	7dbb      	ldrb	r3, [r7, #22]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d122      	bne.n	80097d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b03      	cmp	r3, #3
 800979c:	d117      	bne.n	80097ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800979e:	7dba      	ldrb	r2, [r7, #22]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	32ae      	adds	r2, #174	; 0xae
 80097a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00f      	beq.n	80097ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80097ae:	7dba      	ldrb	r2, [r7, #22]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80097b6:	7dba      	ldrb	r2, [r7, #22]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	32ae      	adds	r2, #174	; 0xae
 80097bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	7afa      	ldrb	r2, [r7, #11]
 80097c4:	4611      	mov	r1, r2
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	4798      	blx	r3
 80097ca:	4603      	mov	r3, r0
 80097cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	e000      	b.n	80097da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b086      	sub	sp, #24
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	460b      	mov	r3, r1
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80097f0:	7afb      	ldrb	r3, [r7, #11]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d16f      	bne.n	80098d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3314      	adds	r3, #20
 80097fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009802:	2b02      	cmp	r3, #2
 8009804:	d15a      	bne.n	80098bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	689a      	ldr	r2, [r3, #8]
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	429a      	cmp	r2, r3
 8009810:	d914      	bls.n	800983c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	461a      	mov	r2, r3
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f001 f8e8 	bl	800a9fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800982e:	2300      	movs	r3, #0
 8009830:	2200      	movs	r2, #0
 8009832:	2100      	movs	r1, #0
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f001 fe1f 	bl	800b478 <USBD_LL_PrepareReceive>
 800983a:	e03f      	b.n	80098bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	68da      	ldr	r2, [r3, #12]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	429a      	cmp	r2, r3
 8009846:	d11c      	bne.n	8009882 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009850:	429a      	cmp	r2, r3
 8009852:	d316      	bcc.n	8009882 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800985e:	429a      	cmp	r2, r3
 8009860:	d20f      	bcs.n	8009882 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009862:	2200      	movs	r2, #0
 8009864:	2100      	movs	r1, #0
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f001 f8c9 	bl	800a9fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009874:	2300      	movs	r3, #0
 8009876:	2200      	movs	r2, #0
 8009878:	2100      	movs	r1, #0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f001 fdfc 	bl	800b478 <USBD_LL_PrepareReceive>
 8009880:	e01c      	b.n	80098bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d10f      	bne.n	80098ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d009      	beq.n	80098ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80098ae:	2180      	movs	r1, #128	; 0x80
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f001 fd37 	bl	800b324 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f001 f8f3 	bl	800aaa2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d03a      	beq.n	800993c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f7ff fe42 	bl	8009550 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80098d4:	e032      	b.n	800993c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	4619      	mov	r1, r3
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 f985 	bl	8009bf0 <USBD_CoreFindEP>
 80098e6:	4603      	mov	r3, r0
 80098e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	2bff      	cmp	r3, #255	; 0xff
 80098ee:	d025      	beq.n	800993c <USBD_LL_DataInStage+0x15a>
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d122      	bne.n	800993c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d11c      	bne.n	800993c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009902:	7dfa      	ldrb	r2, [r7, #23]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	32ae      	adds	r2, #174	; 0xae
 8009908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d014      	beq.n	800993c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009912:	7dfa      	ldrb	r2, [r7, #23]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800991a:	7dfa      	ldrb	r2, [r7, #23]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	32ae      	adds	r2, #174	; 0xae
 8009920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	7afa      	ldrb	r2, [r7, #11]
 8009928:	4611      	mov	r1, r2
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	4798      	blx	r3
 800992e:	4603      	mov	r3, r0
 8009930:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009932:	7dbb      	ldrb	r3, [r7, #22]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009938:	7dbb      	ldrb	r3, [r7, #22]
 800993a:	e000      	b.n	800993e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d014      	beq.n	80099ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00e      	beq.n	80099ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	6852      	ldr	r2, [r2, #4]
 800999a:	b2d2      	uxtb	r2, r2
 800999c:	4611      	mov	r1, r2
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	4798      	blx	r3
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80099a8:	2303      	movs	r3, #3
 80099aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099ac:	2340      	movs	r3, #64	; 0x40
 80099ae:	2200      	movs	r2, #0
 80099b0:	2100      	movs	r1, #0
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f001 fc71 	bl	800b29a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2240      	movs	r2, #64	; 0x40
 80099c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099c8:	2340      	movs	r3, #64	; 0x40
 80099ca:	2200      	movs	r2, #0
 80099cc:	2180      	movs	r1, #128	; 0x80
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 fc63 	bl	800b29a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2240      	movs	r2, #64	; 0x40
 80099de:	621a      	str	r2, [r3, #32]

  return ret;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	78fa      	ldrb	r2, [r7, #3]
 80099fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	d006      	beq.n	8009a2c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2204      	movs	r2, #4
 8009a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	d106      	bne.n	8009a64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d110      	bne.n	8009aa8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00b      	beq.n	8009aa8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d005      	beq.n	8009aa8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	460b      	mov	r3, r1
 8009abc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	32ae      	adds	r2, #174	; 0xae
 8009ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e01c      	b.n	8009b0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d115      	bne.n	8009b0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	32ae      	adds	r2, #174	; 0xae
 8009aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00b      	beq.n	8009b0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	32ae      	adds	r2, #174	; 0xae
 8009afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	78fa      	ldrb	r2, [r7, #3]
 8009b06:	4611      	mov	r1, r2
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	32ae      	adds	r2, #174	; 0xae
 8009b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d101      	bne.n	8009b38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e01c      	b.n	8009b72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b03      	cmp	r3, #3
 8009b42:	d115      	bne.n	8009b70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	32ae      	adds	r2, #174	; 0xae
 8009b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	32ae      	adds	r2, #174	; 0xae
 8009b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b68:	78fa      	ldrb	r2, [r7, #3]
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b083      	sub	sp, #12
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00e      	beq.n	8009bcc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	6852      	ldr	r2, [r2, #4]
 8009bba:	b2d2      	uxtb	r2, r2
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	4798      	blx	r3
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	460b      	mov	r3, r1
 8009be0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009be2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009bfc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b086      	sub	sp, #24
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	460b      	mov	r3, r1
 8009c14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	885b      	ldrh	r3, [r3, #2]
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d920      	bls.n	8009c74 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009c3a:	e013      	b.n	8009c64 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009c3c:	f107 030a 	add.w	r3, r7, #10
 8009c40:	4619      	mov	r1, r3
 8009c42:	6978      	ldr	r0, [r7, #20]
 8009c44:	f000 f81b 	bl	8009c7e <USBD_GetNextDesc>
 8009c48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	785b      	ldrb	r3, [r3, #1]
 8009c4e:	2b05      	cmp	r3, #5
 8009c50:	d108      	bne.n	8009c64 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	789b      	ldrb	r3, [r3, #2]
 8009c5a:	78fa      	ldrb	r2, [r7, #3]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d008      	beq.n	8009c72 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	885b      	ldrh	r3, [r3, #2]
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	897b      	ldrh	r3, [r7, #10]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d8e5      	bhi.n	8009c3c <USBD_GetEpDesc+0x32>
 8009c70:	e000      	b.n	8009c74 <USBD_GetEpDesc+0x6a>
          break;
 8009c72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009c74:	693b      	ldr	r3, [r7, #16]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b085      	sub	sp, #20
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	881a      	ldrh	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	4413      	add	r3, r2
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009caa:	68fb      	ldr	r3, [r7, #12]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009cd6:	8a3b      	ldrh	r3, [r7, #16]
 8009cd8:	021b      	lsls	r3, r3, #8
 8009cda:	b21a      	sxth	r2, r3
 8009cdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	b21b      	sxth	r3, r3
 8009ce4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ce6:	89fb      	ldrh	r3, [r7, #14]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	371c      	adds	r7, #28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d0a:	2b40      	cmp	r3, #64	; 0x40
 8009d0c:	d005      	beq.n	8009d1a <USBD_StdDevReq+0x26>
 8009d0e:	2b40      	cmp	r3, #64	; 0x40
 8009d10:	d857      	bhi.n	8009dc2 <USBD_StdDevReq+0xce>
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00f      	beq.n	8009d36 <USBD_StdDevReq+0x42>
 8009d16:	2b20      	cmp	r3, #32
 8009d18:	d153      	bne.n	8009dc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	32ae      	adds	r2, #174	; 0xae
 8009d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	4798      	blx	r3
 8009d30:	4603      	mov	r3, r0
 8009d32:	73fb      	strb	r3, [r7, #15]
      break;
 8009d34:	e04a      	b.n	8009dcc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	785b      	ldrb	r3, [r3, #1]
 8009d3a:	2b09      	cmp	r3, #9
 8009d3c:	d83b      	bhi.n	8009db6 <USBD_StdDevReq+0xc2>
 8009d3e:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <USBD_StdDevReq+0x50>)
 8009d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d44:	08009d99 	.word	0x08009d99
 8009d48:	08009dad 	.word	0x08009dad
 8009d4c:	08009db7 	.word	0x08009db7
 8009d50:	08009da3 	.word	0x08009da3
 8009d54:	08009db7 	.word	0x08009db7
 8009d58:	08009d77 	.word	0x08009d77
 8009d5c:	08009d6d 	.word	0x08009d6d
 8009d60:	08009db7 	.word	0x08009db7
 8009d64:	08009d8f 	.word	0x08009d8f
 8009d68:	08009d81 	.word	0x08009d81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fa3c 	bl	800a1ec <USBD_GetDescriptor>
          break;
 8009d74:	e024      	b.n	8009dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fbcb 	bl	800a514 <USBD_SetAddress>
          break;
 8009d7e:	e01f      	b.n	8009dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fc0a 	bl	800a59c <USBD_SetConfig>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
          break;
 8009d8c:	e018      	b.n	8009dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fcad 	bl	800a6f0 <USBD_GetConfig>
          break;
 8009d96:	e013      	b.n	8009dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fcde 	bl	800a75c <USBD_GetStatus>
          break;
 8009da0:	e00e      	b.n	8009dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fd0d 	bl	800a7c4 <USBD_SetFeature>
          break;
 8009daa:	e009      	b.n	8009dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fd31 	bl	800a816 <USBD_ClrFeature>
          break;
 8009db4:	e004      	b.n	8009dc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fd88 	bl	800a8ce <USBD_CtlError>
          break;
 8009dbe:	bf00      	nop
      }
      break;
 8009dc0:	e004      	b.n	8009dcc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fd82 	bl	800a8ce <USBD_CtlError>
      break;
 8009dca:	bf00      	nop
  }

  return ret;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop

08009dd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dee:	2b40      	cmp	r3, #64	; 0x40
 8009df0:	d005      	beq.n	8009dfe <USBD_StdItfReq+0x26>
 8009df2:	2b40      	cmp	r3, #64	; 0x40
 8009df4:	d852      	bhi.n	8009e9c <USBD_StdItfReq+0xc4>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <USBD_StdItfReq+0x26>
 8009dfa:	2b20      	cmp	r3, #32
 8009dfc:	d14e      	bne.n	8009e9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d840      	bhi.n	8009e8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	889b      	ldrh	r3, [r3, #4]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d836      	bhi.n	8009e84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	889b      	ldrh	r3, [r3, #4]
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff fed9 	bl	8009bd6 <USBD_CoreFindIF>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	2bff      	cmp	r3, #255	; 0xff
 8009e2c:	d01d      	beq.n	8009e6a <USBD_StdItfReq+0x92>
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d11a      	bne.n	8009e6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009e34:	7bba      	ldrb	r2, [r7, #14]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	32ae      	adds	r2, #174	; 0xae
 8009e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00f      	beq.n	8009e64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009e44:	7bba      	ldrb	r2, [r7, #14]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e4c:	7bba      	ldrb	r2, [r7, #14]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	32ae      	adds	r2, #174	; 0xae
 8009e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	4798      	blx	r3
 8009e5e:	4603      	mov	r3, r0
 8009e60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009e62:	e004      	b.n	8009e6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009e64:	2303      	movs	r3, #3
 8009e66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009e68:	e001      	b.n	8009e6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	88db      	ldrh	r3, [r3, #6]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d110      	bne.n	8009e98 <USBD_StdItfReq+0xc0>
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10d      	bne.n	8009e98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fdfd 	bl	800aa7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e82:	e009      	b.n	8009e98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fd21 	bl	800a8ce <USBD_CtlError>
          break;
 8009e8c:	e004      	b.n	8009e98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fd1c 	bl	800a8ce <USBD_CtlError>
          break;
 8009e96:	e000      	b.n	8009e9a <USBD_StdItfReq+0xc2>
          break;
 8009e98:	bf00      	nop
      }
      break;
 8009e9a:	e004      	b.n	8009ea6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fd15 	bl	800a8ce <USBD_CtlError>
      break;
 8009ea4:	bf00      	nop
  }

  return ret;
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	889b      	ldrh	r3, [r3, #4]
 8009ec2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ecc:	2b40      	cmp	r3, #64	; 0x40
 8009ece:	d007      	beq.n	8009ee0 <USBD_StdEPReq+0x30>
 8009ed0:	2b40      	cmp	r3, #64	; 0x40
 8009ed2:	f200 817f 	bhi.w	800a1d4 <USBD_StdEPReq+0x324>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d02a      	beq.n	8009f30 <USBD_StdEPReq+0x80>
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	f040 817a 	bne.w	800a1d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff fe83 	bl	8009bf0 <USBD_CoreFindEP>
 8009eea:	4603      	mov	r3, r0
 8009eec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009eee:	7b7b      	ldrb	r3, [r7, #13]
 8009ef0:	2bff      	cmp	r3, #255	; 0xff
 8009ef2:	f000 8174 	beq.w	800a1de <USBD_StdEPReq+0x32e>
 8009ef6:	7b7b      	ldrb	r3, [r7, #13]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f040 8170 	bne.w	800a1de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009efe:	7b7a      	ldrb	r2, [r7, #13]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009f06:	7b7a      	ldrb	r2, [r7, #13]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	32ae      	adds	r2, #174	; 0xae
 8009f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f000 8163 	beq.w	800a1de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009f18:	7b7a      	ldrb	r2, [r7, #13]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	32ae      	adds	r2, #174	; 0xae
 8009f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	4798      	blx	r3
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009f2e:	e156      	b.n	800a1de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	785b      	ldrb	r3, [r3, #1]
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	d008      	beq.n	8009f4a <USBD_StdEPReq+0x9a>
 8009f38:	2b03      	cmp	r3, #3
 8009f3a:	f300 8145 	bgt.w	800a1c8 <USBD_StdEPReq+0x318>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 809b 	beq.w	800a07a <USBD_StdEPReq+0x1ca>
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d03c      	beq.n	8009fc2 <USBD_StdEPReq+0x112>
 8009f48:	e13e      	b.n	800a1c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d002      	beq.n	8009f5c <USBD_StdEPReq+0xac>
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d016      	beq.n	8009f88 <USBD_StdEPReq+0xd8>
 8009f5a:	e02c      	b.n	8009fb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00d      	beq.n	8009f7e <USBD_StdEPReq+0xce>
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	2b80      	cmp	r3, #128	; 0x80
 8009f66:	d00a      	beq.n	8009f7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 f9d9 	bl	800b324 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f72:	2180      	movs	r1, #128	; 0x80
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 f9d5 	bl	800b324 <USBD_LL_StallEP>
 8009f7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f7c:	e020      	b.n	8009fc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fca4 	bl	800a8ce <USBD_CtlError>
              break;
 8009f86:	e01b      	b.n	8009fc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	885b      	ldrh	r3, [r3, #2]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10e      	bne.n	8009fae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00b      	beq.n	8009fae <USBD_StdEPReq+0xfe>
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
 8009f98:	2b80      	cmp	r3, #128	; 0x80
 8009f9a:	d008      	beq.n	8009fae <USBD_StdEPReq+0xfe>
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	88db      	ldrh	r3, [r3, #6]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d104      	bne.n	8009fae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009fa4:	7bbb      	ldrb	r3, [r7, #14]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 f9bb 	bl	800b324 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fd64 	bl	800aa7c <USBD_CtlSendStatus>

              break;
 8009fb4:	e004      	b.n	8009fc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fc88 	bl	800a8ce <USBD_CtlError>
              break;
 8009fbe:	bf00      	nop
          }
          break;
 8009fc0:	e107      	b.n	800a1d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	d002      	beq.n	8009fd4 <USBD_StdEPReq+0x124>
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d016      	beq.n	800a000 <USBD_StdEPReq+0x150>
 8009fd2:	e04b      	b.n	800a06c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00d      	beq.n	8009ff6 <USBD_StdEPReq+0x146>
 8009fda:	7bbb      	ldrb	r3, [r7, #14]
 8009fdc:	2b80      	cmp	r3, #128	; 0x80
 8009fde:	d00a      	beq.n	8009ff6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009fe0:	7bbb      	ldrb	r3, [r7, #14]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f001 f99d 	bl	800b324 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fea:	2180      	movs	r1, #128	; 0x80
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f001 f999 	bl	800b324 <USBD_LL_StallEP>
 8009ff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ff4:	e040      	b.n	800a078 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ff6:	6839      	ldr	r1, [r7, #0]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fc68 	bl	800a8ce <USBD_CtlError>
              break;
 8009ffe:	e03b      	b.n	800a078 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	885b      	ldrh	r3, [r3, #2]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d136      	bne.n	800a076 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a008:	7bbb      	ldrb	r3, [r7, #14]
 800a00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 f9a3 	bl	800b362 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fd2d 	bl	800aa7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7ff fde2 	bl	8009bf0 <USBD_CoreFindEP>
 800a02c:	4603      	mov	r3, r0
 800a02e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a030:	7b7b      	ldrb	r3, [r7, #13]
 800a032:	2bff      	cmp	r3, #255	; 0xff
 800a034:	d01f      	beq.n	800a076 <USBD_StdEPReq+0x1c6>
 800a036:	7b7b      	ldrb	r3, [r7, #13]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d11c      	bne.n	800a076 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a03c:	7b7a      	ldrb	r2, [r7, #13]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a044:	7b7a      	ldrb	r2, [r7, #13]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	32ae      	adds	r2, #174	; 0xae
 800a04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d010      	beq.n	800a076 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a054:	7b7a      	ldrb	r2, [r7, #13]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	32ae      	adds	r2, #174	; 0xae
 800a05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	4798      	blx	r3
 800a066:	4603      	mov	r3, r0
 800a068:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a06a:	e004      	b.n	800a076 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fc2d 	bl	800a8ce <USBD_CtlError>
              break;
 800a074:	e000      	b.n	800a078 <USBD_StdEPReq+0x1c8>
              break;
 800a076:	bf00      	nop
          }
          break;
 800a078:	e0ab      	b.n	800a1d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b02      	cmp	r3, #2
 800a084:	d002      	beq.n	800a08c <USBD_StdEPReq+0x1dc>
 800a086:	2b03      	cmp	r3, #3
 800a088:	d032      	beq.n	800a0f0 <USBD_StdEPReq+0x240>
 800a08a:	e097      	b.n	800a1bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a08c:	7bbb      	ldrb	r3, [r7, #14]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d007      	beq.n	800a0a2 <USBD_StdEPReq+0x1f2>
 800a092:	7bbb      	ldrb	r3, [r7, #14]
 800a094:	2b80      	cmp	r3, #128	; 0x80
 800a096:	d004      	beq.n	800a0a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fc17 	bl	800a8ce <USBD_CtlError>
                break;
 800a0a0:	e091      	b.n	800a1c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	da0b      	bge.n	800a0c2 <USBD_StdEPReq+0x212>
 800a0aa:	7bbb      	ldrb	r3, [r7, #14]
 800a0ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	3310      	adds	r3, #16
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	4413      	add	r3, r2
 800a0be:	3304      	adds	r3, #4
 800a0c0:	e00b      	b.n	800a0da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	3304      	adds	r3, #4
 800a0da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fc6d 	bl	800a9c8 <USBD_CtlSendData>
              break;
 800a0ee:	e06a      	b.n	800a1c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	da11      	bge.n	800a11c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	f003 020f 	and.w	r2, r3, #15
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	440b      	add	r3, r1
 800a10a:	3324      	adds	r3, #36	; 0x24
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d117      	bne.n	800a142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fbda 	bl	800a8ce <USBD_CtlError>
                  break;
 800a11a:	e054      	b.n	800a1c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	f003 020f 	and.w	r2, r3, #15
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d104      	bne.n	800a142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fbc7 	bl	800a8ce <USBD_CtlError>
                  break;
 800a140:	e041      	b.n	800a1c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a146:	2b00      	cmp	r3, #0
 800a148:	da0b      	bge.n	800a162 <USBD_StdEPReq+0x2b2>
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
 800a14c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	3310      	adds	r3, #16
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	3304      	adds	r3, #4
 800a160:	e00b      	b.n	800a17a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a162:	7bbb      	ldrb	r3, [r7, #14]
 800a164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a168:	4613      	mov	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	4413      	add	r3, r2
 800a178:	3304      	adds	r3, #4
 800a17a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d002      	beq.n	800a188 <USBD_StdEPReq+0x2d8>
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	2b80      	cmp	r3, #128	; 0x80
 800a186:	d103      	bne.n	800a190 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2200      	movs	r2, #0
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	e00e      	b.n	800a1ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a190:	7bbb      	ldrb	r3, [r7, #14]
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 f903 	bl	800b3a0 <USBD_LL_IsStallEP>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	e002      	b.n	800a1ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fc07 	bl	800a9c8 <USBD_CtlSendData>
              break;
 800a1ba:	e004      	b.n	800a1c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fb85 	bl	800a8ce <USBD_CtlError>
              break;
 800a1c4:	bf00      	nop
          }
          break;
 800a1c6:	e004      	b.n	800a1d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fb7f 	bl	800a8ce <USBD_CtlError>
          break;
 800a1d0:	bf00      	nop
      }
      break;
 800a1d2:	e005      	b.n	800a1e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fb79 	bl	800a8ce <USBD_CtlError>
      break;
 800a1dc:	e000      	b.n	800a1e0 <USBD_StdEPReq+0x330>
      break;
 800a1de:	bf00      	nop
  }

  return ret;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
	...

0800a1ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	885b      	ldrh	r3, [r3, #2]
 800a206:	0a1b      	lsrs	r3, r3, #8
 800a208:	b29b      	uxth	r3, r3
 800a20a:	3b01      	subs	r3, #1
 800a20c:	2b0e      	cmp	r3, #14
 800a20e:	f200 8152 	bhi.w	800a4b6 <USBD_GetDescriptor+0x2ca>
 800a212:	a201      	add	r2, pc, #4	; (adr r2, 800a218 <USBD_GetDescriptor+0x2c>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a289 	.word	0x0800a289
 800a21c:	0800a2a1 	.word	0x0800a2a1
 800a220:	0800a2e1 	.word	0x0800a2e1
 800a224:	0800a4b7 	.word	0x0800a4b7
 800a228:	0800a4b7 	.word	0x0800a4b7
 800a22c:	0800a457 	.word	0x0800a457
 800a230:	0800a483 	.word	0x0800a483
 800a234:	0800a4b7 	.word	0x0800a4b7
 800a238:	0800a4b7 	.word	0x0800a4b7
 800a23c:	0800a4b7 	.word	0x0800a4b7
 800a240:	0800a4b7 	.word	0x0800a4b7
 800a244:	0800a4b7 	.word	0x0800a4b7
 800a248:	0800a4b7 	.word	0x0800a4b7
 800a24c:	0800a4b7 	.word	0x0800a4b7
 800a250:	0800a255 	.word	0x0800a255
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a25a:	69db      	ldr	r3, [r3, #28]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00b      	beq.n	800a278 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	7c12      	ldrb	r2, [r2, #16]
 800a26c:	f107 0108 	add.w	r1, r7, #8
 800a270:	4610      	mov	r0, r2
 800a272:	4798      	blx	r3
 800a274:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a276:	e126      	b.n	800a4c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fb27 	bl	800a8ce <USBD_CtlError>
        err++;
 800a280:	7afb      	ldrb	r3, [r7, #11]
 800a282:	3301      	adds	r3, #1
 800a284:	72fb      	strb	r3, [r7, #11]
      break;
 800a286:	e11e      	b.n	800a4c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	7c12      	ldrb	r2, [r2, #16]
 800a294:	f107 0108 	add.w	r1, r7, #8
 800a298:	4610      	mov	r0, r2
 800a29a:	4798      	blx	r3
 800a29c:	60f8      	str	r0, [r7, #12]
      break;
 800a29e:	e112      	b.n	800a4c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	7c1b      	ldrb	r3, [r3, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10d      	bne.n	800a2c4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b0:	f107 0208 	add.w	r2, r7, #8
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	4798      	blx	r3
 800a2b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	2202      	movs	r2, #2
 800a2c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a2c2:	e100      	b.n	800a4c6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2cc:	f107 0208 	add.w	r2, r7, #8
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	4798      	blx	r3
 800a2d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	2202      	movs	r2, #2
 800a2dc:	701a      	strb	r2, [r3, #0]
      break;
 800a2de:	e0f2      	b.n	800a4c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	885b      	ldrh	r3, [r3, #2]
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b05      	cmp	r3, #5
 800a2e8:	f200 80ac 	bhi.w	800a444 <USBD_GetDescriptor+0x258>
 800a2ec:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <USBD_GetDescriptor+0x108>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a30d 	.word	0x0800a30d
 800a2f8:	0800a341 	.word	0x0800a341
 800a2fc:	0800a375 	.word	0x0800a375
 800a300:	0800a3a9 	.word	0x0800a3a9
 800a304:	0800a3dd 	.word	0x0800a3dd
 800a308:	0800a411 	.word	0x0800a411
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00b      	beq.n	800a330 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	7c12      	ldrb	r2, [r2, #16]
 800a324:	f107 0108 	add.w	r1, r7, #8
 800a328:	4610      	mov	r0, r2
 800a32a:	4798      	blx	r3
 800a32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a32e:	e091      	b.n	800a454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 facb 	bl	800a8ce <USBD_CtlError>
            err++;
 800a338:	7afb      	ldrb	r3, [r7, #11]
 800a33a:	3301      	adds	r3, #1
 800a33c:	72fb      	strb	r3, [r7, #11]
          break;
 800a33e:	e089      	b.n	800a454 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	7c12      	ldrb	r2, [r2, #16]
 800a358:	f107 0108 	add.w	r1, r7, #8
 800a35c:	4610      	mov	r0, r2
 800a35e:	4798      	blx	r3
 800a360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a362:	e077      	b.n	800a454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fab1 	bl	800a8ce <USBD_CtlError>
            err++;
 800a36c:	7afb      	ldrb	r3, [r7, #11]
 800a36e:	3301      	adds	r3, #1
 800a370:	72fb      	strb	r3, [r7, #11]
          break;
 800a372:	e06f      	b.n	800a454 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	7c12      	ldrb	r2, [r2, #16]
 800a38c:	f107 0108 	add.w	r1, r7, #8
 800a390:	4610      	mov	r0, r2
 800a392:	4798      	blx	r3
 800a394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a396:	e05d      	b.n	800a454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fa97 	bl	800a8ce <USBD_CtlError>
            err++;
 800a3a0:	7afb      	ldrb	r3, [r7, #11]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3a6:	e055      	b.n	800a454 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00b      	beq.n	800a3cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	7c12      	ldrb	r2, [r2, #16]
 800a3c0:	f107 0108 	add.w	r1, r7, #8
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4798      	blx	r3
 800a3c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ca:	e043      	b.n	800a454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fa7d 	bl	800a8ce <USBD_CtlError>
            err++;
 800a3d4:	7afb      	ldrb	r3, [r7, #11]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3da:	e03b      	b.n	800a454 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00b      	beq.n	800a400 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ee:	695b      	ldr	r3, [r3, #20]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	7c12      	ldrb	r2, [r2, #16]
 800a3f4:	f107 0108 	add.w	r1, r7, #8
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	4798      	blx	r3
 800a3fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3fe:	e029      	b.n	800a454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fa63 	bl	800a8ce <USBD_CtlError>
            err++;
 800a408:	7afb      	ldrb	r3, [r7, #11]
 800a40a:	3301      	adds	r3, #1
 800a40c:	72fb      	strb	r3, [r7, #11]
          break;
 800a40e:	e021      	b.n	800a454 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00b      	beq.n	800a434 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	7c12      	ldrb	r2, [r2, #16]
 800a428:	f107 0108 	add.w	r1, r7, #8
 800a42c:	4610      	mov	r0, r2
 800a42e:	4798      	blx	r3
 800a430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a432:	e00f      	b.n	800a454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fa49 	bl	800a8ce <USBD_CtlError>
            err++;
 800a43c:	7afb      	ldrb	r3, [r7, #11]
 800a43e:	3301      	adds	r3, #1
 800a440:	72fb      	strb	r3, [r7, #11]
          break;
 800a442:	e007      	b.n	800a454 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fa41 	bl	800a8ce <USBD_CtlError>
          err++;
 800a44c:	7afb      	ldrb	r3, [r7, #11]
 800a44e:	3301      	adds	r3, #1
 800a450:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a452:	bf00      	nop
      }
      break;
 800a454:	e037      	b.n	800a4c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	7c1b      	ldrb	r3, [r3, #16]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d109      	bne.n	800a472 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a466:	f107 0208 	add.w	r2, r7, #8
 800a46a:	4610      	mov	r0, r2
 800a46c:	4798      	blx	r3
 800a46e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a470:	e029      	b.n	800a4c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fa2a 	bl	800a8ce <USBD_CtlError>
        err++;
 800a47a:	7afb      	ldrb	r3, [r7, #11]
 800a47c:	3301      	adds	r3, #1
 800a47e:	72fb      	strb	r3, [r7, #11]
      break;
 800a480:	e021      	b.n	800a4c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	7c1b      	ldrb	r3, [r3, #16]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10d      	bne.n	800a4a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a492:	f107 0208 	add.w	r2, r7, #8
 800a496:	4610      	mov	r0, r2
 800a498:	4798      	blx	r3
 800a49a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	2207      	movs	r2, #7
 800a4a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4a4:	e00f      	b.n	800a4c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fa10 	bl	800a8ce <USBD_CtlError>
        err++;
 800a4ae:	7afb      	ldrb	r3, [r7, #11]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a4b4:	e007      	b.n	800a4c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fa08 	bl	800a8ce <USBD_CtlError>
      err++;
 800a4be:	7afb      	ldrb	r3, [r7, #11]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a4c4:	bf00      	nop
  }

  if (err != 0U)
 800a4c6:	7afb      	ldrb	r3, [r7, #11]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d11e      	bne.n	800a50a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	88db      	ldrh	r3, [r3, #6]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d016      	beq.n	800a502 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a4d4:	893b      	ldrh	r3, [r7, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00e      	beq.n	800a4f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	88da      	ldrh	r2, [r3, #6]
 800a4de:	893b      	ldrh	r3, [r7, #8]
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	bf28      	it	cs
 800a4e4:	4613      	movcs	r3, r2
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a4ea:	893b      	ldrh	r3, [r7, #8]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	68f9      	ldr	r1, [r7, #12]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fa69 	bl	800a9c8 <USBD_CtlSendData>
 800a4f6:	e009      	b.n	800a50c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f9e7 	bl	800a8ce <USBD_CtlError>
 800a500:	e004      	b.n	800a50c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 faba 	bl	800aa7c <USBD_CtlSendStatus>
 800a508:	e000      	b.n	800a50c <USBD_GetDescriptor+0x320>
    return;
 800a50a:	bf00      	nop
  }
}
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop

0800a514 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	889b      	ldrh	r3, [r3, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d131      	bne.n	800a58a <USBD_SetAddress+0x76>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	88db      	ldrh	r3, [r3, #6]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d12d      	bne.n	800a58a <USBD_SetAddress+0x76>
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	885b      	ldrh	r3, [r3, #2]
 800a532:	2b7f      	cmp	r3, #127	; 0x7f
 800a534:	d829      	bhi.n	800a58a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	885b      	ldrh	r3, [r3, #2]
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a540:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d104      	bne.n	800a558 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f9bc 	bl	800a8ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a556:	e01d      	b.n	800a594 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	7bfa      	ldrb	r2, [r7, #15]
 800a55c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	4619      	mov	r1, r3
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 ff47 	bl	800b3f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fa86 	bl	800aa7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a570:	7bfb      	ldrb	r3, [r7, #15]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2202      	movs	r2, #2
 800a57a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a57e:	e009      	b.n	800a594 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a588:	e004      	b.n	800a594 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f99e 	bl	800a8ce <USBD_CtlError>
  }
}
 800a592:	bf00      	nop
 800a594:	bf00      	nop
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	885b      	ldrh	r3, [r3, #2]
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	4b4e      	ldr	r3, [pc, #312]	; (800a6ec <USBD_SetConfig+0x150>)
 800a5b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a5b4:	4b4d      	ldr	r3, [pc, #308]	; (800a6ec <USBD_SetConfig+0x150>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d905      	bls.n	800a5c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a5bc:	6839      	ldr	r1, [r7, #0]
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f985 	bl	800a8ce <USBD_CtlError>
    return USBD_FAIL;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e08c      	b.n	800a6e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d002      	beq.n	800a5da <USBD_SetConfig+0x3e>
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d029      	beq.n	800a62c <USBD_SetConfig+0x90>
 800a5d8:	e075      	b.n	800a6c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a5da:	4b44      	ldr	r3, [pc, #272]	; (800a6ec <USBD_SetConfig+0x150>)
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d020      	beq.n	800a624 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a5e2:	4b42      	ldr	r3, [pc, #264]	; (800a6ec <USBD_SetConfig+0x150>)
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a5ec:	4b3f      	ldr	r3, [pc, #252]	; (800a6ec <USBD_SetConfig+0x150>)
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7fe ffb7 	bl	8009566 <USBD_SetClassConfig>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d008      	beq.n	800a614 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f962 	bl	800a8ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2202      	movs	r2, #2
 800a60e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a612:	e065      	b.n	800a6e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fa31 	bl	800aa7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2203      	movs	r2, #3
 800a61e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a622:	e05d      	b.n	800a6e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fa29 	bl	800aa7c <USBD_CtlSendStatus>
      break;
 800a62a:	e059      	b.n	800a6e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a62c:	4b2f      	ldr	r3, [pc, #188]	; (800a6ec <USBD_SetConfig+0x150>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d112      	bne.n	800a65a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a63c:	4b2b      	ldr	r3, [pc, #172]	; (800a6ec <USBD_SetConfig+0x150>)
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	461a      	mov	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a646:	4b29      	ldr	r3, [pc, #164]	; (800a6ec <USBD_SetConfig+0x150>)
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7fe ffa6 	bl	800959e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fa12 	bl	800aa7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a658:	e042      	b.n	800a6e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a65a:	4b24      	ldr	r3, [pc, #144]	; (800a6ec <USBD_SetConfig+0x150>)
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	429a      	cmp	r2, r3
 800a666:	d02a      	beq.n	800a6be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7fe ff94 	bl	800959e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a676:	4b1d      	ldr	r3, [pc, #116]	; (800a6ec <USBD_SetConfig+0x150>)
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a680:	4b1a      	ldr	r3, [pc, #104]	; (800a6ec <USBD_SetConfig+0x150>)
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7fe ff6d 	bl	8009566 <USBD_SetClassConfig>
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00f      	beq.n	800a6b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f918 	bl	800a8ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7fe ff79 	bl	800959e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a6b4:	e014      	b.n	800a6e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f9e0 	bl	800aa7c <USBD_CtlSendStatus>
      break;
 800a6bc:	e010      	b.n	800a6e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f9dc 	bl	800aa7c <USBD_CtlSendStatus>
      break;
 800a6c4:	e00c      	b.n	800a6e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f900 	bl	800a8ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a6ce:	4b07      	ldr	r3, [pc, #28]	; (800a6ec <USBD_SetConfig+0x150>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7fe ff62 	bl	800959e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a6de:	bf00      	nop
  }

  return ret;
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	24000be8 	.word	0x24000be8

0800a6f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	88db      	ldrh	r3, [r3, #6]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d004      	beq.n	800a70c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f8e2 	bl	800a8ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a70a:	e023      	b.n	800a754 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b02      	cmp	r3, #2
 800a716:	dc02      	bgt.n	800a71e <USBD_GetConfig+0x2e>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	dc03      	bgt.n	800a724 <USBD_GetConfig+0x34>
 800a71c:	e015      	b.n	800a74a <USBD_GetConfig+0x5a>
 800a71e:	2b03      	cmp	r3, #3
 800a720:	d00b      	beq.n	800a73a <USBD_GetConfig+0x4a>
 800a722:	e012      	b.n	800a74a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3308      	adds	r3, #8
 800a72e:	2201      	movs	r2, #1
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f948 	bl	800a9c8 <USBD_CtlSendData>
        break;
 800a738:	e00c      	b.n	800a754 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3304      	adds	r3, #4
 800a73e:	2201      	movs	r2, #1
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f940 	bl	800a9c8 <USBD_CtlSendData>
        break;
 800a748:	e004      	b.n	800a754 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f8be 	bl	800a8ce <USBD_CtlError>
        break;
 800a752:	bf00      	nop
}
 800a754:	bf00      	nop
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	3b01      	subs	r3, #1
 800a770:	2b02      	cmp	r3, #2
 800a772:	d81e      	bhi.n	800a7b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	88db      	ldrh	r3, [r3, #6]
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d004      	beq.n	800a786 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f8a5 	bl	800a8ce <USBD_CtlError>
        break;
 800a784:	e01a      	b.n	800a7bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a792:	2b00      	cmp	r3, #0
 800a794:	d005      	beq.n	800a7a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	f043 0202 	orr.w	r2, r3, #2
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	330c      	adds	r3, #12
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f90c 	bl	800a9c8 <USBD_CtlSendData>
      break;
 800a7b0:	e004      	b.n	800a7bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f88a 	bl	800a8ce <USBD_CtlError>
      break;
 800a7ba:	bf00      	nop
  }
}
 800a7bc:	bf00      	nop
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	885b      	ldrh	r3, [r3, #2]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d107      	bne.n	800a7e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f94c 	bl	800aa7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a7e4:	e013      	b.n	800a80e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	885b      	ldrh	r3, [r3, #2]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d10b      	bne.n	800a806 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	889b      	ldrh	r3, [r3, #4]
 800a7f2:	0a1b      	lsrs	r3, r3, #8
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f93c 	bl	800aa7c <USBD_CtlSendStatus>
}
 800a804:	e003      	b.n	800a80e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f860 	bl	800a8ce <USBD_CtlError>
}
 800a80e:	bf00      	nop
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b082      	sub	sp, #8
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a826:	b2db      	uxtb	r3, r3
 800a828:	3b01      	subs	r3, #1
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d80b      	bhi.n	800a846 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	885b      	ldrh	r3, [r3, #2]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d10c      	bne.n	800a850 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f91c 	bl	800aa7c <USBD_CtlSendStatus>
      }
      break;
 800a844:	e004      	b.n	800a850 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f840 	bl	800a8ce <USBD_CtlError>
      break;
 800a84e:	e000      	b.n	800a852 <USBD_ClrFeature+0x3c>
      break;
 800a850:	bf00      	nop
  }
}
 800a852:	bf00      	nop
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	781a      	ldrb	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3301      	adds	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	781a      	ldrb	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3301      	adds	r3, #1
 800a882:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f7ff fa17 	bl	8009cb8 <SWAPBYTE>
 800a88a:	4603      	mov	r3, r0
 800a88c:	461a      	mov	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3301      	adds	r3, #1
 800a896:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3301      	adds	r3, #1
 800a89c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7ff fa0a 	bl	8009cb8 <SWAPBYTE>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f7ff f9fd 	bl	8009cb8 <SWAPBYTE>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	80da      	strh	r2, [r3, #6]
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b082      	sub	sp, #8
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8d8:	2180      	movs	r1, #128	; 0x80
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fd22 	bl	800b324 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fd1e 	bl	800b324 <USBD_LL_StallEP>
}
 800a8e8:	bf00      	nop
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d042      	beq.n	800a98c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a90a:	6938      	ldr	r0, [r7, #16]
 800a90c:	f000 f842 	bl	800a994 <USBD_GetLen>
 800a910:	4603      	mov	r3, r0
 800a912:	3301      	adds	r3, #1
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a91a:	d808      	bhi.n	800a92e <USBD_GetString+0x3e>
 800a91c:	6938      	ldr	r0, [r7, #16]
 800a91e:	f000 f839 	bl	800a994 <USBD_GetLen>
 800a922:	4603      	mov	r3, r0
 800a924:	3301      	adds	r3, #1
 800a926:	b29b      	uxth	r3, r3
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	e001      	b.n	800a932 <USBD_GetString+0x42>
 800a92e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	4413      	add	r3, r2
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	7812      	ldrb	r2, [r2, #0]
 800a940:	701a      	strb	r2, [r3, #0]
  idx++;
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	3301      	adds	r3, #1
 800a946:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a948:	7dfb      	ldrb	r3, [r7, #23]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	4413      	add	r3, r2
 800a94e:	2203      	movs	r2, #3
 800a950:	701a      	strb	r2, [r3, #0]
  idx++;
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	3301      	adds	r3, #1
 800a956:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a958:	e013      	b.n	800a982 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a95a:	7dfb      	ldrb	r3, [r7, #23]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	4413      	add	r3, r2
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	7812      	ldrb	r2, [r2, #0]
 800a964:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	3301      	adds	r3, #1
 800a96a:	613b      	str	r3, [r7, #16]
    idx++;
 800a96c:	7dfb      	ldrb	r3, [r7, #23]
 800a96e:	3301      	adds	r3, #1
 800a970:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a972:	7dfb      	ldrb	r3, [r7, #23]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	4413      	add	r3, r2
 800a978:	2200      	movs	r2, #0
 800a97a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
 800a97e:	3301      	adds	r3, #1
 800a980:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e7      	bne.n	800a95a <USBD_GetString+0x6a>
 800a98a:	e000      	b.n	800a98e <USBD_GetString+0x9e>
    return;
 800a98c:	bf00      	nop
  }
}
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a9a4:	e005      	b.n	800a9b2 <USBD_GetLen+0x1e>
  {
    len++;
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1f5      	bne.n	800a9a6 <USBD_GetLen+0x12>
  }

  return len;
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f000 fd21 	bl	800b436 <USBD_LL_Transmit>

  return USBD_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	2100      	movs	r1, #0
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 fd10 	bl	800b436 <USBD_LL_Transmit>

  return USBD_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2203      	movs	r2, #3
 800aa30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	2100      	movs	r1, #0
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f000 fd14 	bl	800b478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b084      	sub	sp, #16
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 fd03 	bl	800b478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2204      	movs	r2, #4
 800aa88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	2200      	movs	r2, #0
 800aa90:	2100      	movs	r1, #0
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fccf 	bl	800b436 <USBD_LL_Transmit>

  return USBD_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2205      	movs	r2, #5
 800aaae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aab2:	2300      	movs	r3, #0
 800aab4:	2200      	movs	r2, #0
 800aab6:	2100      	movs	r1, #0
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fcdd 	bl	800b478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aacc:	2200      	movs	r2, #0
 800aace:	4913      	ldr	r1, [pc, #76]	; (800ab1c <MX_USB_DEVICE_Init+0x54>)
 800aad0:	4813      	ldr	r0, [pc, #76]	; (800ab20 <MX_USB_DEVICE_Init+0x58>)
 800aad2:	f7fe fccb 	bl	800946c <USBD_Init>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aadc:	f7f6 f874 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aae0:	4910      	ldr	r1, [pc, #64]	; (800ab24 <MX_USB_DEVICE_Init+0x5c>)
 800aae2:	480f      	ldr	r0, [pc, #60]	; (800ab20 <MX_USB_DEVICE_Init+0x58>)
 800aae4:	f7fe fcf2 	bl	80094cc <USBD_RegisterClass>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aaee:	f7f6 f86b 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aaf2:	490d      	ldr	r1, [pc, #52]	; (800ab28 <MX_USB_DEVICE_Init+0x60>)
 800aaf4:	480a      	ldr	r0, [pc, #40]	; (800ab20 <MX_USB_DEVICE_Init+0x58>)
 800aaf6:	f7fe fbe9 	bl	80092cc <USBD_CDC_RegisterInterface>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ab00:	f7f6 f862 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ab04:	4806      	ldr	r0, [pc, #24]	; (800ab20 <MX_USB_DEVICE_Init+0x58>)
 800ab06:	f7fe fd17 	bl	8009538 <USBD_Start>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ab10:	f7f6 f85a 	bl	8000bc8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ab14:	f7f8 fd88 	bl	8003628 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ab18:	bf00      	nop
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	240000b0 	.word	0x240000b0
 800ab20:	24000bec 	.word	0x24000bec
 800ab24:	2400001c 	.word	0x2400001c
 800ab28:	2400009c 	.word	0x2400009c

0800ab2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab30:	2200      	movs	r2, #0
 800ab32:	4905      	ldr	r1, [pc, #20]	; (800ab48 <CDC_Init_FS+0x1c>)
 800ab34:	4805      	ldr	r0, [pc, #20]	; (800ab4c <CDC_Init_FS+0x20>)
 800ab36:	f7fe fbe3 	bl	8009300 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab3a:	4905      	ldr	r1, [pc, #20]	; (800ab50 <CDC_Init_FS+0x24>)
 800ab3c:	4803      	ldr	r0, [pc, #12]	; (800ab4c <CDC_Init_FS+0x20>)
 800ab3e:	f7fe fc01 	bl	8009344 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	240016c8 	.word	0x240016c8
 800ab4c:	24000bec 	.word	0x24000bec
 800ab50:	24000ec8 	.word	0x24000ec8

0800ab54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab54:	b480      	push	{r7}
 800ab56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	6039      	str	r1, [r7, #0]
 800ab6e:	71fb      	strb	r3, [r7, #7]
 800ab70:	4613      	mov	r3, r2
 800ab72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	2b23      	cmp	r3, #35	; 0x23
 800ab78:	d84a      	bhi.n	800ac10 <CDC_Control_FS+0xac>
 800ab7a:	a201      	add	r2, pc, #4	; (adr r2, 800ab80 <CDC_Control_FS+0x1c>)
 800ab7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab80:	0800ac11 	.word	0x0800ac11
 800ab84:	0800ac11 	.word	0x0800ac11
 800ab88:	0800ac11 	.word	0x0800ac11
 800ab8c:	0800ac11 	.word	0x0800ac11
 800ab90:	0800ac11 	.word	0x0800ac11
 800ab94:	0800ac11 	.word	0x0800ac11
 800ab98:	0800ac11 	.word	0x0800ac11
 800ab9c:	0800ac11 	.word	0x0800ac11
 800aba0:	0800ac11 	.word	0x0800ac11
 800aba4:	0800ac11 	.word	0x0800ac11
 800aba8:	0800ac11 	.word	0x0800ac11
 800abac:	0800ac11 	.word	0x0800ac11
 800abb0:	0800ac11 	.word	0x0800ac11
 800abb4:	0800ac11 	.word	0x0800ac11
 800abb8:	0800ac11 	.word	0x0800ac11
 800abbc:	0800ac11 	.word	0x0800ac11
 800abc0:	0800ac11 	.word	0x0800ac11
 800abc4:	0800ac11 	.word	0x0800ac11
 800abc8:	0800ac11 	.word	0x0800ac11
 800abcc:	0800ac11 	.word	0x0800ac11
 800abd0:	0800ac11 	.word	0x0800ac11
 800abd4:	0800ac11 	.word	0x0800ac11
 800abd8:	0800ac11 	.word	0x0800ac11
 800abdc:	0800ac11 	.word	0x0800ac11
 800abe0:	0800ac11 	.word	0x0800ac11
 800abe4:	0800ac11 	.word	0x0800ac11
 800abe8:	0800ac11 	.word	0x0800ac11
 800abec:	0800ac11 	.word	0x0800ac11
 800abf0:	0800ac11 	.word	0x0800ac11
 800abf4:	0800ac11 	.word	0x0800ac11
 800abf8:	0800ac11 	.word	0x0800ac11
 800abfc:	0800ac11 	.word	0x0800ac11
 800ac00:	0800ac11 	.word	0x0800ac11
 800ac04:	0800ac11 	.word	0x0800ac11
 800ac08:	0800ac11 	.word	0x0800ac11
 800ac0c:	0800ac11 	.word	0x0800ac11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ac10:	bf00      	nop
  }

  return (USBD_OK);
 800ac12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	4805      	ldr	r0, [pc, #20]	; (800ac44 <CDC_Receive_FS+0x24>)
 800ac2e:	f7fe fb89 	bl	8009344 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac32:	4804      	ldr	r0, [pc, #16]	; (800ac44 <CDC_Receive_FS+0x24>)
 800ac34:	f7fe fbe4 	bl	8009400 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ac38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	24000bec 	.word	0x24000bec

0800ac48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ac58:	4b0d      	ldr	r3, [pc, #52]	; (800ac90 <CDC_Transmit_FS+0x48>)
 800ac5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e00b      	b.n	800ac86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ac6e:	887b      	ldrh	r3, [r7, #2]
 800ac70:	461a      	mov	r2, r3
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	4806      	ldr	r0, [pc, #24]	; (800ac90 <CDC_Transmit_FS+0x48>)
 800ac76:	f7fe fb43 	bl	8009300 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ac7a:	4805      	ldr	r0, [pc, #20]	; (800ac90 <CDC_Transmit_FS+0x48>)
 800ac7c:	f7fe fb80 	bl	8009380 <USBD_CDC_TransmitPacket>
 800ac80:	4603      	mov	r3, r0
 800ac82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	24000bec 	.word	0x24000bec

0800ac94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	371c      	adds	r7, #28
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
	...

0800acb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	6039      	str	r1, [r7, #0]
 800acc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2212      	movs	r2, #18
 800acc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800acca:	4b03      	ldr	r3, [pc, #12]	; (800acd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800accc:	4618      	mov	r0, r3
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	240000d0 	.word	0x240000d0

0800acdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	6039      	str	r1, [r7, #0]
 800ace6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2204      	movs	r2, #4
 800acec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800acee:	4b03      	ldr	r3, [pc, #12]	; (800acfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	240000e4 	.word	0x240000e4

0800ad00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	4603      	mov	r3, r0
 800ad08:	6039      	str	r1, [r7, #0]
 800ad0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d105      	bne.n	800ad1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	4907      	ldr	r1, [pc, #28]	; (800ad34 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad16:	4808      	ldr	r0, [pc, #32]	; (800ad38 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad18:	f7ff fdea 	bl	800a8f0 <USBD_GetString>
 800ad1c:	e004      	b.n	800ad28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	4904      	ldr	r1, [pc, #16]	; (800ad34 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad22:	4805      	ldr	r0, [pc, #20]	; (800ad38 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad24:	f7ff fde4 	bl	800a8f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad28:	4b02      	ldr	r3, [pc, #8]	; (800ad34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	24001ec8 	.word	0x24001ec8
 800ad38:	080107c0 	.word	0x080107c0

0800ad3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	6039      	str	r1, [r7, #0]
 800ad46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	4904      	ldr	r1, [pc, #16]	; (800ad5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ad4c:	4804      	ldr	r0, [pc, #16]	; (800ad60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ad4e:	f7ff fdcf 	bl	800a8f0 <USBD_GetString>
  return USBD_StrDesc;
 800ad52:	4b02      	ldr	r3, [pc, #8]	; (800ad5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	24001ec8 	.word	0x24001ec8
 800ad60:	080107d8 	.word	0x080107d8

0800ad64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	6039      	str	r1, [r7, #0]
 800ad6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	221a      	movs	r2, #26
 800ad74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad76:	f000 f843 	bl	800ae00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ad7a:	4b02      	ldr	r3, [pc, #8]	; (800ad84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	240000e8 	.word	0x240000e8

0800ad88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	6039      	str	r1, [r7, #0]
 800ad92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d105      	bne.n	800ada6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	4907      	ldr	r1, [pc, #28]	; (800adbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad9e:	4808      	ldr	r0, [pc, #32]	; (800adc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ada0:	f7ff fda6 	bl	800a8f0 <USBD_GetString>
 800ada4:	e004      	b.n	800adb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	4904      	ldr	r1, [pc, #16]	; (800adbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800adaa:	4805      	ldr	r0, [pc, #20]	; (800adc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800adac:	f7ff fda0 	bl	800a8f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800adb0:	4b02      	ldr	r3, [pc, #8]	; (800adbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	24001ec8 	.word	0x24001ec8
 800adc0:	080107ec 	.word	0x080107ec

0800adc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	6039      	str	r1, [r7, #0]
 800adce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800add0:	79fb      	ldrb	r3, [r7, #7]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d105      	bne.n	800ade2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	4907      	ldr	r1, [pc, #28]	; (800adf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800adda:	4808      	ldr	r0, [pc, #32]	; (800adfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800addc:	f7ff fd88 	bl	800a8f0 <USBD_GetString>
 800ade0:	e004      	b.n	800adec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	4904      	ldr	r1, [pc, #16]	; (800adf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ade6:	4805      	ldr	r0, [pc, #20]	; (800adfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ade8:	f7ff fd82 	bl	800a8f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800adec:	4b02      	ldr	r3, [pc, #8]	; (800adf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	24001ec8 	.word	0x24001ec8
 800adfc:	080107f8 	.word	0x080107f8

0800ae00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae06:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <Get_SerialNum+0x44>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae0c:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <Get_SerialNum+0x48>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae12:	4b0e      	ldr	r3, [pc, #56]	; (800ae4c <Get_SerialNum+0x4c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d009      	beq.n	800ae3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae26:	2208      	movs	r2, #8
 800ae28:	4909      	ldr	r1, [pc, #36]	; (800ae50 <Get_SerialNum+0x50>)
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 f814 	bl	800ae58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae30:	2204      	movs	r2, #4
 800ae32:	4908      	ldr	r1, [pc, #32]	; (800ae54 <Get_SerialNum+0x54>)
 800ae34:	68b8      	ldr	r0, [r7, #8]
 800ae36:	f000 f80f 	bl	800ae58 <IntToUnicode>
  }
}
 800ae3a:	bf00      	nop
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	1ff1e800 	.word	0x1ff1e800
 800ae48:	1ff1e804 	.word	0x1ff1e804
 800ae4c:	1ff1e808 	.word	0x1ff1e808
 800ae50:	240000ea 	.word	0x240000ea
 800ae54:	240000fa 	.word	0x240000fa

0800ae58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	4613      	mov	r3, r2
 800ae64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	75fb      	strb	r3, [r7, #23]
 800ae6e:	e027      	b.n	800aec0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	0f1b      	lsrs	r3, r3, #28
 800ae74:	2b09      	cmp	r3, #9
 800ae76:	d80b      	bhi.n	800ae90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	0f1b      	lsrs	r3, r3, #28
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	7dfb      	ldrb	r3, [r7, #23]
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	4619      	mov	r1, r3
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	440b      	add	r3, r1
 800ae88:	3230      	adds	r2, #48	; 0x30
 800ae8a:	b2d2      	uxtb	r2, r2
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	e00a      	b.n	800aea6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	0f1b      	lsrs	r3, r3, #28
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	7dfb      	ldrb	r3, [r7, #23]
 800ae98:	005b      	lsls	r3, r3, #1
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	440b      	add	r3, r1
 800aea0:	3237      	adds	r2, #55	; 0x37
 800aea2:	b2d2      	uxtb	r2, r2
 800aea4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aeac:	7dfb      	ldrb	r3, [r7, #23]
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	3301      	adds	r3, #1
 800aebe:	75fb      	strb	r3, [r7, #23]
 800aec0:	7dfa      	ldrb	r2, [r7, #23]
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d3d3      	bcc.n	800ae70 <IntToUnicode+0x18>
  }
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	371c      	adds	r7, #28
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
	...

0800aed8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b0ba      	sub	sp, #232	; 0xe8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aee0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]
 800aee8:	605a      	str	r2, [r3, #4]
 800aeea:	609a      	str	r2, [r3, #8]
 800aeec:	60da      	str	r2, [r3, #12]
 800aeee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aef0:	f107 0310 	add.w	r3, r7, #16
 800aef4:	22c0      	movs	r2, #192	; 0xc0
 800aef6:	2100      	movs	r1, #0
 800aef8:	4618      	mov	r0, r3
 800aefa:	f003 fbe2 	bl	800e6c2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a34      	ldr	r2, [pc, #208]	; (800afd4 <HAL_PCD_MspInit+0xfc>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d161      	bne.n	800afcc <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800af08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800af0c:	f04f 0300 	mov.w	r3, #0
 800af10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800af14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800af18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800af1c:	f107 0310 	add.w	r3, r7, #16
 800af20:	4618      	mov	r0, r3
 800af22:	f7f9 fb77 	bl	8004614 <HAL_RCCEx_PeriphCLKConfig>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800af2c:	f7f5 fe4c 	bl	8000bc8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800af30:	f7f8 fb7a 	bl	8003628 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af34:	4b28      	ldr	r3, [pc, #160]	; (800afd8 <HAL_PCD_MspInit+0x100>)
 800af36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af3a:	4a27      	ldr	r2, [pc, #156]	; (800afd8 <HAL_PCD_MspInit+0x100>)
 800af3c:	f043 0301 	orr.w	r3, r3, #1
 800af40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af44:	4b24      	ldr	r3, [pc, #144]	; (800afd8 <HAL_PCD_MspInit+0x100>)
 800af46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800af52:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800af56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af5a:	2302      	movs	r3, #2
 800af5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af60:	2300      	movs	r3, #0
 800af62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af66:	2300      	movs	r3, #0
 800af68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800af6c:	230a      	movs	r3, #10
 800af6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800af76:	4619      	mov	r1, r3
 800af78:	4818      	ldr	r0, [pc, #96]	; (800afdc <HAL_PCD_MspInit+0x104>)
 800af7a:	f7f6 feb3 	bl	8001ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800af7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af86:	2300      	movs	r3, #0
 800af88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af8c:	2300      	movs	r3, #0
 800af8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800af96:	4619      	mov	r1, r3
 800af98:	4810      	ldr	r0, [pc, #64]	; (800afdc <HAL_PCD_MspInit+0x104>)
 800af9a:	f7f6 fea3 	bl	8001ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af9e:	4b0e      	ldr	r3, [pc, #56]	; (800afd8 <HAL_PCD_MspInit+0x100>)
 800afa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800afa4:	4a0c      	ldr	r2, [pc, #48]	; (800afd8 <HAL_PCD_MspInit+0x100>)
 800afa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800afaa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800afae:	4b0a      	ldr	r3, [pc, #40]	; (800afd8 <HAL_PCD_MspInit+0x100>)
 800afb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800afb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afb8:	60bb      	str	r3, [r7, #8]
 800afba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800afbc:	2200      	movs	r2, #0
 800afbe:	2100      	movs	r1, #0
 800afc0:	2065      	movs	r0, #101	; 0x65
 800afc2:	f7f6 fa26 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800afc6:	2065      	movs	r0, #101	; 0x65
 800afc8:	f7f6 fa3d 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800afcc:	bf00      	nop
 800afce:	37e8      	adds	r7, #232	; 0xe8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	40080000 	.word	0x40080000
 800afd8:	58024400 	.word	0x58024400
 800afdc:	58020000 	.word	0x58020000

0800afe0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	f7fe faeb 	bl	80095d2 <USBD_LL_SetupStage>
}
 800affc:	bf00      	nop
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b016:	78fa      	ldrb	r2, [r7, #3]
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	4613      	mov	r3, r2
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	4413      	add	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	440b      	add	r3, r1
 800b024:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	4619      	mov	r1, r3
 800b02e:	f7fe fb25 	bl	800967c <USBD_LL_DataOutStage>
}
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b082      	sub	sp, #8
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	460b      	mov	r3, r1
 800b044:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b04c:	78fa      	ldrb	r2, [r7, #3]
 800b04e:	6879      	ldr	r1, [r7, #4]
 800b050:	4613      	mov	r3, r2
 800b052:	00db      	lsls	r3, r3, #3
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	440b      	add	r3, r1
 800b05a:	3320      	adds	r3, #32
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	78fb      	ldrb	r3, [r7, #3]
 800b060:	4619      	mov	r1, r3
 800b062:	f7fe fbbe 	bl	80097e2 <USBD_LL_DataInStage>
}
 800b066:	bf00      	nop
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b082      	sub	sp, #8
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fe fcf8 	bl	8009a72 <USBD_LL_SOF>
}
 800b082:	bf00      	nop
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b092:	2301      	movs	r3, #1
 800b094:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	79db      	ldrb	r3, [r3, #7]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d102      	bne.n	800b0a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]
 800b0a2:	e008      	b.n	800b0b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	79db      	ldrb	r3, [r3, #7]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d102      	bne.n	800b0b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	73fb      	strb	r3, [r7, #15]
 800b0b0:	e001      	b.n	800b0b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b0b2:	f7f5 fd89 	bl	8000bc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b0bc:	7bfa      	ldrb	r2, [r7, #15]
 800b0be:	4611      	mov	r1, r2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fe fc92 	bl	80099ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fe fc3a 	bl	8009946 <USBD_LL_Reset>
}
 800b0d2:	bf00      	nop
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fc8d 	bl	8009a0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	6812      	ldr	r2, [r2, #0]
 800b0fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	7adb      	ldrb	r3, [r3, #11]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d005      	beq.n	800b11c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b110:	4b04      	ldr	r3, [pc, #16]	; (800b124 <HAL_PCD_SuspendCallback+0x48>)
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	4a03      	ldr	r2, [pc, #12]	; (800b124 <HAL_PCD_SuspendCallback+0x48>)
 800b116:	f043 0306 	orr.w	r3, r3, #6
 800b11a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b11c:	bf00      	nop
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	e000ed00 	.word	0xe000ed00

0800b128 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe fc83 	bl	8009a42 <USBD_LL_Resume>
}
 800b13c:	bf00      	nop
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b156:	78fa      	ldrb	r2, [r7, #3]
 800b158:	4611      	mov	r1, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe fcdb 	bl	8009b16 <USBD_LL_IsoOUTIncomplete>
}
 800b160:	bf00      	nop
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	460b      	mov	r3, r1
 800b172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b17a:	78fa      	ldrb	r2, [r7, #3]
 800b17c:	4611      	mov	r1, r2
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fe fc97 	bl	8009ab2 <USBD_LL_IsoINIncomplete>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe fced 	bl	8009b7a <USBD_LL_DevConnected>
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fe fcea 	bl	8009b90 <USBD_LL_DevDisconnected>
}
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d13e      	bne.n	800b252 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b1d4:	4a21      	ldr	r2, [pc, #132]	; (800b25c <USBD_LL_Init+0x98>)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a1f      	ldr	r2, [pc, #124]	; (800b25c <USBD_LL_Init+0x98>)
 800b1e0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1e4:	4b1d      	ldr	r3, [pc, #116]	; (800b25c <USBD_LL_Init+0x98>)
 800b1e6:	4a1e      	ldr	r2, [pc, #120]	; (800b260 <USBD_LL_Init+0x9c>)
 800b1e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800b1ea:	4b1c      	ldr	r3, [pc, #112]	; (800b25c <USBD_LL_Init+0x98>)
 800b1ec:	2209      	movs	r2, #9
 800b1ee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b1f0:	4b1a      	ldr	r3, [pc, #104]	; (800b25c <USBD_LL_Init+0x98>)
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b1f6:	4b19      	ldr	r3, [pc, #100]	; (800b25c <USBD_LL_Init+0x98>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b1fc:	4b17      	ldr	r3, [pc, #92]	; (800b25c <USBD_LL_Init+0x98>)
 800b1fe:	2202      	movs	r2, #2
 800b200:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b202:	4b16      	ldr	r3, [pc, #88]	; (800b25c <USBD_LL_Init+0x98>)
 800b204:	2201      	movs	r2, #1
 800b206:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b208:	4b14      	ldr	r3, [pc, #80]	; (800b25c <USBD_LL_Init+0x98>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b20e:	4b13      	ldr	r3, [pc, #76]	; (800b25c <USBD_LL_Init+0x98>)
 800b210:	2200      	movs	r2, #0
 800b212:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800b214:	4b11      	ldr	r3, [pc, #68]	; (800b25c <USBD_LL_Init+0x98>)
 800b216:	2201      	movs	r2, #1
 800b218:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b21a:	4b10      	ldr	r3, [pc, #64]	; (800b25c <USBD_LL_Init+0x98>)
 800b21c:	2201      	movs	r2, #1
 800b21e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b220:	4b0e      	ldr	r3, [pc, #56]	; (800b25c <USBD_LL_Init+0x98>)
 800b222:	2200      	movs	r2, #0
 800b224:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b226:	480d      	ldr	r0, [pc, #52]	; (800b25c <USBD_LL_Init+0x98>)
 800b228:	f7f6 ff25 	bl	8002076 <HAL_PCD_Init>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b232:	f7f5 fcc9 	bl	8000bc8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b236:	2180      	movs	r1, #128	; 0x80
 800b238:	4808      	ldr	r0, [pc, #32]	; (800b25c <USBD_LL_Init+0x98>)
 800b23a:	f7f8 f97a 	bl	8003532 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b23e:	2240      	movs	r2, #64	; 0x40
 800b240:	2100      	movs	r1, #0
 800b242:	4806      	ldr	r0, [pc, #24]	; (800b25c <USBD_LL_Init+0x98>)
 800b244:	f7f8 f92e 	bl	80034a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b248:	2280      	movs	r2, #128	; 0x80
 800b24a:	2101      	movs	r1, #1
 800b24c:	4803      	ldr	r0, [pc, #12]	; (800b25c <USBD_LL_Init+0x98>)
 800b24e:	f7f8 f929 	bl	80034a4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	240020c8 	.word	0x240020c8
 800b260:	40080000 	.word	0x40080000

0800b264 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7f7 f807 	bl	800228e <HAL_PCD_Start>
 800b280:	4603      	mov	r3, r0
 800b282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b284:	7bfb      	ldrb	r3, [r7, #15]
 800b286:	4618      	mov	r0, r3
 800b288:	f000 f942 	bl	800b510 <USBD_Get_USB_Status>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b290:	7bbb      	ldrb	r3, [r7, #14]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	4608      	mov	r0, r1
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	70fb      	strb	r3, [r7, #3]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	70bb      	strb	r3, [r7, #2]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2c2:	78bb      	ldrb	r3, [r7, #2]
 800b2c4:	883a      	ldrh	r2, [r7, #0]
 800b2c6:	78f9      	ldrb	r1, [r7, #3]
 800b2c8:	f7f7 fd08 	bl	8002cdc <HAL_PCD_EP_Open>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f000 f91c 	bl	800b510 <USBD_Get_USB_Status>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b300:	78fa      	ldrb	r2, [r7, #3]
 800b302:	4611      	mov	r1, r2
 800b304:	4618      	mov	r0, r3
 800b306:	f7f7 fd51 	bl	8002dac <HAL_PCD_EP_Close>
 800b30a:	4603      	mov	r3, r0
 800b30c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b30e:	7bfb      	ldrb	r3, [r7, #15]
 800b310:	4618      	mov	r0, r3
 800b312:	f000 f8fd 	bl	800b510 <USBD_Get_USB_Status>
 800b316:	4603      	mov	r3, r0
 800b318:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b31a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b33e:	78fa      	ldrb	r2, [r7, #3]
 800b340:	4611      	mov	r1, r2
 800b342:	4618      	mov	r0, r3
 800b344:	f7f7 fe09 	bl	8002f5a <HAL_PCD_EP_SetStall>
 800b348:	4603      	mov	r3, r0
 800b34a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 f8de 	bl	800b510 <USBD_Get_USB_Status>
 800b354:	4603      	mov	r3, r0
 800b356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b358:	7bbb      	ldrb	r3, [r7, #14]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b084      	sub	sp, #16
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	460b      	mov	r3, r1
 800b36c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b37c:	78fa      	ldrb	r2, [r7, #3]
 800b37e:	4611      	mov	r1, r2
 800b380:	4618      	mov	r0, r3
 800b382:	f7f7 fe4d 	bl	8003020 <HAL_PCD_EP_ClrStall>
 800b386:	4603      	mov	r3, r0
 800b388:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 f8bf 	bl	800b510 <USBD_Get_USB_Status>
 800b392:	4603      	mov	r3, r0
 800b394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b396:	7bbb      	ldrb	r3, [r7, #14]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b3b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	da0b      	bge.n	800b3d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b3bc:	78fb      	ldrb	r3, [r7, #3]
 800b3be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3c2:	68f9      	ldr	r1, [r7, #12]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	00db      	lsls	r3, r3, #3
 800b3c8:	4413      	add	r3, r2
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	440b      	add	r3, r1
 800b3ce:	3316      	adds	r3, #22
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	e00b      	b.n	800b3ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b3d4:	78fb      	ldrb	r3, [r7, #3]
 800b3d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3da:	68f9      	ldr	r1, [r7, #12]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	4413      	add	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	440b      	add	r3, r1
 800b3e6:	f203 2356 	addw	r3, r3, #598	; 0x256
 800b3ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b412:	78fa      	ldrb	r2, [r7, #3]
 800b414:	4611      	mov	r1, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f7f7 fc3c 	bl	8002c94 <HAL_PCD_SetAddress>
 800b41c:	4603      	mov	r3, r0
 800b41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	4618      	mov	r0, r3
 800b424:	f000 f874 	bl	800b510 <USBD_Get_USB_Status>
 800b428:	4603      	mov	r3, r0
 800b42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b086      	sub	sp, #24
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	60f8      	str	r0, [r7, #12]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	603b      	str	r3, [r7, #0]
 800b442:	460b      	mov	r3, r1
 800b444:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b446:	2300      	movs	r3, #0
 800b448:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b44a:	2300      	movs	r3, #0
 800b44c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b454:	7af9      	ldrb	r1, [r7, #11]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	f7f7 fd44 	bl	8002ee6 <HAL_PCD_EP_Transmit>
 800b45e:	4603      	mov	r3, r0
 800b460:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b462:	7dfb      	ldrb	r3, [r7, #23]
 800b464:	4618      	mov	r0, r3
 800b466:	f000 f853 	bl	800b510 <USBD_Get_USB_Status>
 800b46a:	4603      	mov	r3, r0
 800b46c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b46e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3718      	adds	r7, #24
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	607a      	str	r2, [r7, #4]
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	460b      	mov	r3, r1
 800b486:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b496:	7af9      	ldrb	r1, [r7, #11]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	f7f7 fcd0 	bl	8002e40 <HAL_PCD_EP_Receive>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 f832 	bl	800b510 <USBD_Get_USB_Status>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b082      	sub	sp, #8
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4cc:	78fa      	ldrb	r2, [r7, #3]
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7f7 fcf0 	bl	8002eb6 <HAL_PCD_EP_GetRxCount>
 800b4d6:	4603      	mov	r3, r0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b4e8:	4b03      	ldr	r3, [pc, #12]	; (800b4f8 <USBD_static_malloc+0x18>)
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	240025ac 	.word	0x240025ac

0800b4fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	4603      	mov	r3, r0
 800b518:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	2b03      	cmp	r3, #3
 800b522:	d817      	bhi.n	800b554 <USBD_Get_USB_Status+0x44>
 800b524:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <USBD_Get_USB_Status+0x1c>)
 800b526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52a:	bf00      	nop
 800b52c:	0800b53d 	.word	0x0800b53d
 800b530:	0800b543 	.word	0x0800b543
 800b534:	0800b549 	.word	0x0800b549
 800b538:	0800b54f 	.word	0x0800b54f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b53c:	2300      	movs	r3, #0
 800b53e:	73fb      	strb	r3, [r7, #15]
    break;
 800b540:	e00b      	b.n	800b55a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b542:	2303      	movs	r3, #3
 800b544:	73fb      	strb	r3, [r7, #15]
    break;
 800b546:	e008      	b.n	800b55a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]
    break;
 800b54c:	e005      	b.n	800b55a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b54e:	2303      	movs	r3, #3
 800b550:	73fb      	strb	r3, [r7, #15]
    break;
 800b552:	e002      	b.n	800b55a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b554:	2303      	movs	r3, #3
 800b556:	73fb      	strb	r3, [r7, #15]
    break;
 800b558:	bf00      	nop
  }
  return usb_status;
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d009      	beq.n	800b58c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800b578:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800b57a:	461a      	mov	r2, r3
        err.type, err.code);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	4806      	ldr	r0, [pc, #24]	; (800b5a0 <ai_log_err+0x38>)
 800b586:	f003 f827 	bl	800e5d8 <iprintf>
 800b58a:	e008      	b.n	800b59e <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800b58c:	793b      	ldrb	r3, [r7, #4]
 800b58e:	4619      	mov	r1, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800b596:	461a      	mov	r2, r3
 800b598:	4802      	ldr	r0, [pc, #8]	; (800b5a4 <ai_log_err+0x3c>)
 800b59a:	f003 f81d 	bl	800e5d8 <iprintf>

  do {} while (1);
 800b59e:	e7fe      	b.n	800b59e <ai_log_err+0x36>
 800b5a0:	08010808 	.word	0x08010808
 800b5a4:	0801083c 	.word	0x0801083c

0800b5a8 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	6879      	ldr	r1, [r7, #4]
 800b5b4:	4828      	ldr	r0, [pc, #160]	; (800b658 <ai_boostrap+0xb0>)
 800b5b6:	f000 fa91 	bl	800badc <ai_network_create_and_init>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800b5be:	7b3b      	ldrb	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d006      	beq.n	800b5d2 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 800b5c4:	4925      	ldr	r1, [pc, #148]	; (800b65c <ai_boostrap+0xb4>)
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f7ff ffce 	bl	800b568 <ai_log_err>
    return -1;
 800b5cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d0:	e03e      	b.n	800b650 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 800b5d2:	4b21      	ldr	r3, [pc, #132]	; (800b658 <ai_boostrap+0xb0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f000 fafd 	bl	800bbd8 <ai_network_inputs_get>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	4a1f      	ldr	r2, [pc, #124]	; (800b660 <ai_boostrap+0xb8>)
 800b5e2:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800b5e4:	4b1c      	ldr	r3, [pc, #112]	; (800b658 <ai_boostrap+0xb0>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 fb0e 	bl	800bc0c <ai_network_outputs_get>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	4a1c      	ldr	r2, [pc, #112]	; (800b664 <ai_boostrap+0xbc>)
 800b5f4:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	617b      	str	r3, [r7, #20]
 800b5fa:	e00f      	b.n	800b61c <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800b5fc:	4b18      	ldr	r3, [pc, #96]	; (800b660 <ai_boostrap+0xb8>)
 800b5fe:	6819      	ldr	r1, [r3, #0]
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	4613      	mov	r3, r2
 800b604:	00db      	lsls	r3, r3, #3
 800b606:	1a9b      	subs	r3, r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	440b      	add	r3, r1
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	4916      	ldr	r1, [pc, #88]	; (800b668 <ai_boostrap+0xc0>)
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	3301      	adds	r3, #1
 800b61a:	617b      	str	r3, [r7, #20]
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	ddec      	ble.n	800b5fc <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 800b622:	2300      	movs	r3, #0
 800b624:	613b      	str	r3, [r7, #16]
 800b626:	e00f      	b.n	800b648 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800b628:	4b0e      	ldr	r3, [pc, #56]	; (800b664 <ai_boostrap+0xbc>)
 800b62a:	6819      	ldr	r1, [r3, #0]
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	4613      	mov	r3, r2
 800b630:	00db      	lsls	r3, r3, #3
 800b632:	1a9b      	subs	r3, r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	440b      	add	r3, r1
 800b638:	685a      	ldr	r2, [r3, #4]
 800b63a:	490c      	ldr	r1, [pc, #48]	; (800b66c <ai_boostrap+0xc4>)
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	3301      	adds	r3, #1
 800b646:	613b      	str	r3, [r7, #16]
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	ddec      	ble.n	800b628 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3718      	adds	r7, #24
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	24002920 	.word	0x24002920
 800b65c:	0801086c 	.word	0x0801086c
 800b660:	24002924 	.word	0x24002924
 800b664:	24002928 	.word	0x24002928
 800b668:	240027cc 	.word	0x240027cc
 800b66c:	240027d0 	.word	0x240027d0

0800b670 <ai_run>:

static int ai_run(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 800b676:	4b0f      	ldr	r3, [pc, #60]	; (800b6b4 <ai_run+0x44>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a0f      	ldr	r2, [pc, #60]	; (800b6b8 <ai_run+0x48>)
 800b67c:	6811      	ldr	r1, [r2, #0]
 800b67e:	4a0f      	ldr	r2, [pc, #60]	; (800b6bc <ai_run+0x4c>)
 800b680:	6812      	ldr	r2, [r2, #0]
 800b682:	4618      	mov	r0, r3
 800b684:	f000 fb18 	bl	800bcb8 <ai_network_run>
 800b688:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d00c      	beq.n	800b6aa <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 800b690:	4b08      	ldr	r3, [pc, #32]	; (800b6b4 <ai_run+0x44>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4618      	mov	r0, r3
 800b696:	f000 f9ff 	bl	800ba98 <ai_network_get_error>
 800b69a:	4603      	mov	r3, r0
 800b69c:	4908      	ldr	r1, [pc, #32]	; (800b6c0 <ai_run+0x50>)
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff ff62 	bl	800b568 <ai_log_err>
        "ai_network_run");
    return -1;
 800b6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a8:	e000      	b.n	800b6ac <ai_run+0x3c>
  }

  return 0;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	24002920 	.word	0x24002920
 800b6b8:	24002924 	.word	0x24002924
 800b6bc:	24002928 	.word	0x24002928
 800b6c0:	08010888 	.word	0x08010888

0800b6c4 <acquire_and_process_data>:

// Index to track which input we are passing
int global_index = 0;

int acquire_and_process_data(ai_i8* data[])
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b0b6      	sub	sp, #216	; 0xd8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
    float* input_data = (float*)data[0];
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    // Use predefined inputs to feed the model
    *input_data = predefined_inputs[global_index];
 800b6d4:	4b24      	ldr	r3, [pc, #144]	; (800b768 <acquire_and_process_data+0xa4>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a24      	ldr	r2, [pc, #144]	; (800b76c <acquire_and_process_data+0xa8>)
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6e4:	601a      	str	r2, [r3, #0]

    char buffer[100];
    sprintf(buffer, "Input value passed to the model: %f\r\n", *input_data);
 800b6e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6ea:	edd3 7a00 	vldr	s15, [r3]
 800b6ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b6f2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800b6f6:	ec53 2b17 	vmov	r2, r3, d7
 800b6fa:	491d      	ldr	r1, [pc, #116]	; (800b770 <acquire_and_process_data+0xac>)
 800b6fc:	f002 ff7e 	bl	800e5fc <siprintf>
    CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 800b700:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b704:	4618      	mov	r0, r3
 800b706:	f7f4 fe3b 	bl	8000380 <strlen>
 800b70a:	4602      	mov	r2, r0
 800b70c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b710:	4611      	mov	r1, r2
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff fa98 	bl	800ac48 <CDC_Transmit_FS>
    char buffer1[100];
    sprintf(buffer1, "Example: %s\r\n", examples[global_index]);
 800b718:	4b13      	ldr	r3, [pc, #76]	; (800b768 <acquire_and_process_data+0xa4>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a15      	ldr	r2, [pc, #84]	; (800b774 <acquire_and_process_data+0xb0>)
 800b71e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b722:	f107 030c 	add.w	r3, r7, #12
 800b726:	4914      	ldr	r1, [pc, #80]	; (800b778 <acquire_and_process_data+0xb4>)
 800b728:	4618      	mov	r0, r3
 800b72a:	f002 ff67 	bl	800e5fc <siprintf>
    CDC_Transmit_FS((uint8_t *)buffer1, strlen(buffer1));
 800b72e:	f107 030c 	add.w	r3, r7, #12
 800b732:	4618      	mov	r0, r3
 800b734:	f7f4 fe24 	bl	8000380 <strlen>
 800b738:	4602      	mov	r2, r0
 800b73a:	f107 030c 	add.w	r3, r7, #12
 800b73e:	4611      	mov	r1, r2
 800b740:	4618      	mov	r0, r3
 800b742:	f7ff fa81 	bl	800ac48 <CDC_Transmit_FS>
    // Cycle through the predefined inputs and examples
    global_index = (global_index + 1) % num_inputs;
 800b746:	4b08      	ldr	r3, [pc, #32]	; (800b768 <acquire_and_process_data+0xa4>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3301      	adds	r3, #1
 800b74c:	2203      	movs	r2, #3
 800b74e:	fb93 f1f2 	sdiv	r1, r3, r2
 800b752:	fb01 f202 	mul.w	r2, r1, r2
 800b756:	1a9b      	subs	r3, r3, r2
 800b758:	4a03      	ldr	r2, [pc, #12]	; (800b768 <acquire_and_process_data+0xa4>)
 800b75a:	6013      	str	r3, [r2, #0]

    return 0;  // Return success status
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	37d8      	adds	r7, #216	; 0xd8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	2400292c 	.word	0x2400292c
 800b76c:	080109e8 	.word	0x080109e8
 800b770:	080108e0 	.word	0x080108e0
 800b774:	24000108 	.word	0x24000108
 800b778:	08010908 	.word	0x08010908

0800b77c <post_process>:

// Function to process and print the model output
int post_process(ai_i8* data[])
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b0b6      	sub	sp, #216	; 0xd8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
    float* output_data = (float*)data[0];
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    // Print the model's prediction along with the corresponding example text
    // Note: Since `global_index` is incremented after acquiring data, we need to print the previous index.
    int previous_index = (global_index == 0) ? num_inputs - 1 : global_index - 1;
 800b78c:	4b20      	ldr	r3, [pc, #128]	; (800b810 <post_process+0x94>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <post_process+0x1e>
 800b794:	2303      	movs	r3, #3
 800b796:	3b01      	subs	r3, #1
 800b798:	e002      	b.n	800b7a0 <post_process+0x24>
 800b79a:	4b1d      	ldr	r3, [pc, #116]	; (800b810 <post_process+0x94>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    char buffer[100];
    sprintf(buffer, "Example: %s\r\n", examples[previous_index]);
 800b7a4:	4a1b      	ldr	r2, [pc, #108]	; (800b814 <post_process+0x98>)
 800b7a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b7aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b7ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b7b2:	4919      	ldr	r1, [pc, #100]	; (800b818 <post_process+0x9c>)
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f002 ff21 	bl	800e5fc <siprintf>
    CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 800b7ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7f4 fdde 	bl	8000380 <strlen>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fa3b 	bl	800ac48 <CDC_Transmit_FS>
    char buffer1[100];
    sprintf(buffer1, "Prediction: %f\r\n", *(output_data));
 800b7d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7d6:	edd3 7a00 	vldr	s15, [r3]
 800b7da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b7de:	f107 0008 	add.w	r0, r7, #8
 800b7e2:	ec53 2b17 	vmov	r2, r3, d7
 800b7e6:	490d      	ldr	r1, [pc, #52]	; (800b81c <post_process+0xa0>)
 800b7e8:	f002 ff08 	bl	800e5fc <siprintf>
    CDC_Transmit_FS((uint8_t *)buffer1, strlen(buffer1));
 800b7ec:	f107 0308 	add.w	r3, r7, #8
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7f4 fdc5 	bl	8000380 <strlen>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	f107 0308 	add.w	r3, r7, #8
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7ff fa22 	bl	800ac48 <CDC_Transmit_FS>

    return 0;  // Return success status
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	37d8      	adds	r7, #216	; 0xd8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	2400292c 	.word	0x2400292c
 800b814:	24000108 	.word	0x24000108
 800b818:	08010908 	.word	0x08010908
 800b81c:	08010918 	.word	0x08010918

0800b820 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
	 CDC_Transmit_FS("\r\nTEMPLATE - initialization\r\n", 40);
 800b824:	2128      	movs	r1, #40	; 0x28
 800b826:	4804      	ldr	r0, [pc, #16]	; (800b838 <MX_X_CUBE_AI_Init+0x18>)
 800b828:	f7ff fa0e 	bl	800ac48 <CDC_Transmit_FS>
  ai_boostrap(data_activations0);
 800b82c:	4803      	ldr	r0, [pc, #12]	; (800b83c <MX_X_CUBE_AI_Init+0x1c>)
 800b82e:	f7ff febb 	bl	800b5a8 <ai_boostrap>
    /* USER CODE END 5 */
}
 800b832:	bf00      	nop
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	0801092c 	.word	0x0801092c
 800b83c:	24000104 	.word	0x24000104

0800b840 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800b846:	f04f 33ff 	mov.w	r3, #4294967295
 800b84a:	607b      	str	r3, [r7, #4]

  CDC_Transmit_FS("TEMPLATE - run - main loop\r\n", 40);
 800b84c:	2128      	movs	r1, #40	; 0x28
 800b84e:	4816      	ldr	r0, [pc, #88]	; (800b8a8 <MX_X_CUBE_AI_Process+0x68>)
 800b850:	f7ff f9fa 	bl	800ac48 <CDC_Transmit_FS>

  if (network) {
 800b854:	4b15      	ldr	r3, [pc, #84]	; (800b8ac <MX_X_CUBE_AI_Process+0x6c>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d013      	beq.n	800b884 <MX_X_CUBE_AI_Process+0x44>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800b85c:	4814      	ldr	r0, [pc, #80]	; (800b8b0 <MX_X_CUBE_AI_Process+0x70>)
 800b85e:	f7ff ff31 	bl	800b6c4 <acquire_and_process_data>
 800b862:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d102      	bne.n	800b870 <MX_X_CUBE_AI_Process+0x30>
        res = ai_run();
 800b86a:	f7ff ff01 	bl	800b670 <ai_run>
 800b86e:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d103      	bne.n	800b87e <MX_X_CUBE_AI_Process+0x3e>
        res = post_process(data_outs);
 800b876:	480f      	ldr	r0, [pc, #60]	; (800b8b4 <MX_X_CUBE_AI_Process+0x74>)
 800b878:	f7ff ff80 	bl	800b77c <post_process>
 800b87c:	6078      	str	r0, [r7, #4]
    } while (res==0);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d0eb      	beq.n	800b85c <MX_X_CUBE_AI_Process+0x1c>
  }

  if (res) {
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <MX_X_CUBE_AI_Process+0x60>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 800b88a:	2311      	movs	r3, #17
 800b88c:	703b      	strb	r3, [r7, #0]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	2210      	movs	r2, #16
 800b892:	f362 231f 	bfi	r3, r2, #8, #24
 800b896:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 800b898:	4907      	ldr	r1, [pc, #28]	; (800b8b8 <MX_X_CUBE_AI_Process+0x78>)
 800b89a:	6838      	ldr	r0, [r7, #0]
 800b89c:	f7ff fe64 	bl	800b568 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	0801094c 	.word	0x0801094c
 800b8ac:	24002920 	.word	0x24002920
 800b8b0:	240027cc 	.word	0x240027cc
 800b8b4:	240027d0 	.word	0x240027d0
 800b8b8:	0801096c 	.word	0x0801096c

0800b8bc <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	4826      	ldr	r0, [pc, #152]	; (800b964 <network_configure_activations+0xa8>)
 800b8cc:	f000 fad2 	bl	800be74 <ai_platform_get_activations_map>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d03b      	beq.n	800b94e <network_configure_activations+0x92>
    /* Updating activations (byte) offsets */
    
    input_1_output_array.data = AI_PTR(g_network_activations_map[0] + 252);
 800b8d6:	4b23      	ldr	r3, [pc, #140]	; (800b964 <network_configure_activations+0xa8>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	33fc      	adds	r3, #252	; 0xfc
 800b8dc:	4a22      	ldr	r2, [pc, #136]	; (800b968 <network_configure_activations+0xac>)
 800b8de:	6093      	str	r3, [r2, #8]
    input_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 252);
 800b8e0:	4b20      	ldr	r3, [pc, #128]	; (800b964 <network_configure_activations+0xa8>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	33fc      	adds	r3, #252	; 0xfc
 800b8e6:	4a20      	ldr	r2, [pc, #128]	; (800b968 <network_configure_activations+0xac>)
 800b8e8:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800b8ea:	4b1e      	ldr	r3, [pc, #120]	; (800b964 <network_configure_activations+0xa8>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b8f2:	4a1e      	ldr	r2, [pc, #120]	; (800b96c <network_configure_activations+0xb0>)
 800b8f4:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800b8f6:	4b1b      	ldr	r3, [pc, #108]	; (800b964 <network_configure_activations+0xa8>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b8fe:	4a1b      	ldr	r2, [pc, #108]	; (800b96c <network_configure_activations+0xb0>)
 800b900:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800b902:	4b18      	ldr	r3, [pc, #96]	; (800b964 <network_configure_activations+0xa8>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a1a      	ldr	r2, [pc, #104]	; (800b970 <network_configure_activations+0xb4>)
 800b908:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800b90a:	4b16      	ldr	r3, [pc, #88]	; (800b964 <network_configure_activations+0xa8>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a18      	ldr	r2, [pc, #96]	; (800b970 <network_configure_activations+0xb4>)
 800b910:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800b912:	4b14      	ldr	r3, [pc, #80]	; (800b964 <network_configure_activations+0xa8>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a17      	ldr	r2, [pc, #92]	; (800b974 <network_configure_activations+0xb8>)
 800b918:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800b91a:	4b12      	ldr	r3, [pc, #72]	; (800b964 <network_configure_activations+0xa8>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a15      	ldr	r2, [pc, #84]	; (800b974 <network_configure_activations+0xb8>)
 800b920:	60d3      	str	r3, [r2, #12]
    dense_2_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800b922:	4b10      	ldr	r3, [pc, #64]	; (800b964 <network_configure_activations+0xa8>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b92a:	4a13      	ldr	r2, [pc, #76]	; (800b978 <network_configure_activations+0xbc>)
 800b92c:	6093      	str	r3, [r2, #8]
    dense_2_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800b92e:	4b0d      	ldr	r3, [pc, #52]	; (800b964 <network_configure_activations+0xa8>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b936:	4a10      	ldr	r2, [pc, #64]	; (800b978 <network_configure_activations+0xbc>)
 800b938:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800b93a:	4b0a      	ldr	r3, [pc, #40]	; (800b964 <network_configure_activations+0xa8>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a0f      	ldr	r2, [pc, #60]	; (800b97c <network_configure_activations+0xc0>)
 800b940:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800b942:	4b08      	ldr	r3, [pc, #32]	; (800b964 <network_configure_activations+0xa8>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a0d      	ldr	r2, [pc, #52]	; (800b97c <network_configure_activations+0xc0>)
 800b948:	60d3      	str	r3, [r2, #12]
    return true;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e005      	b.n	800b95a <network_configure_activations+0x9e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800b94e:	2213      	movs	r2, #19
 800b950:	2130      	movs	r1, #48	; 0x30
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fb0c 	bl	800bf70 <ai_platform_network_set_error>
  return false;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	24002930 	.word	0x24002930
 800b968:	24000114 	.word	0x24000114
 800b96c:	24000124 	.word	0x24000124
 800b970:	24000134 	.word	0x24000134
 800b974:	24000144 	.word	0x24000144
 800b978:	24000154 	.word	0x24000154
 800b97c:	24000164 	.word	0x24000164

0800b980 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	2101      	movs	r1, #1
 800b98e:	483b      	ldr	r0, [pc, #236]	; (800ba7c <network_configure_weights+0xfc>)
 800b990:	f000 fa18 	bl	800bdc4 <ai_platform_get_weights_map>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d065      	beq.n	800ba66 <network_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800b99a:	4b39      	ldr	r3, [pc, #228]	; (800ba80 <network_configure_weights+0x100>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9a2:	4a37      	ldr	r2, [pc, #220]	; (800ba80 <network_configure_weights+0x100>)
 800b9a4:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800b9a6:	4b35      	ldr	r3, [pc, #212]	; (800ba7c <network_configure_weights+0xfc>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a35      	ldr	r2, [pc, #212]	; (800ba80 <network_configure_weights+0x100>)
 800b9ac:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800b9ae:	4b33      	ldr	r3, [pc, #204]	; (800ba7c <network_configure_weights+0xfc>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a33      	ldr	r2, [pc, #204]	; (800ba80 <network_configure_weights+0x100>)
 800b9b4:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800b9b6:	4b33      	ldr	r3, [pc, #204]	; (800ba84 <network_configure_weights+0x104>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9be:	4a31      	ldr	r2, [pc, #196]	; (800ba84 <network_configure_weights+0x104>)
 800b9c0:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 64);
 800b9c2:	4b2e      	ldr	r3, [pc, #184]	; (800ba7c <network_configure_weights+0xfc>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3340      	adds	r3, #64	; 0x40
 800b9c8:	4a2e      	ldr	r2, [pc, #184]	; (800ba84 <network_configure_weights+0x104>)
 800b9ca:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 64);
 800b9cc:	4b2b      	ldr	r3, [pc, #172]	; (800ba7c <network_configure_weights+0xfc>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3340      	adds	r3, #64	; 0x40
 800b9d2:	4a2c      	ldr	r2, [pc, #176]	; (800ba84 <network_configure_weights+0x104>)
 800b9d4:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800b9d6:	4b2c      	ldr	r3, [pc, #176]	; (800ba88 <network_configure_weights+0x108>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9de:	4a2a      	ldr	r2, [pc, #168]	; (800ba88 <network_configure_weights+0x108>)
 800b9e0:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 128);
 800b9e2:	4b26      	ldr	r3, [pc, #152]	; (800ba7c <network_configure_weights+0xfc>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3380      	adds	r3, #128	; 0x80
 800b9e8:	4a27      	ldr	r2, [pc, #156]	; (800ba88 <network_configure_weights+0x108>)
 800b9ea:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 128);
 800b9ec:	4b23      	ldr	r3, [pc, #140]	; (800ba7c <network_configure_weights+0xfc>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3380      	adds	r3, #128	; 0x80
 800b9f2:	4a25      	ldr	r2, [pc, #148]	; (800ba88 <network_configure_weights+0x108>)
 800b9f4:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800b9f6:	4b25      	ldr	r3, [pc, #148]	; (800ba8c <network_configure_weights+0x10c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9fe:	4a23      	ldr	r2, [pc, #140]	; (800ba8c <network_configure_weights+0x10c>)
 800ba00:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 4224);
 800ba02:	4b1e      	ldr	r3, [pc, #120]	; (800ba7c <network_configure_weights+0xfc>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800ba0a:	4a20      	ldr	r2, [pc, #128]	; (800ba8c <network_configure_weights+0x10c>)
 800ba0c:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4224);
 800ba0e:	4b1b      	ldr	r3, [pc, #108]	; (800ba7c <network_configure_weights+0xfc>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800ba16:	4a1d      	ldr	r2, [pc, #116]	; (800ba8c <network_configure_weights+0x10c>)
 800ba18:	60d3      	str	r3, [r2, #12]
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ba1a:	4b1d      	ldr	r3, [pc, #116]	; (800ba90 <network_configure_weights+0x110>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba22:	4a1b      	ldr	r2, [pc, #108]	; (800ba90 <network_configure_weights+0x110>)
 800ba24:	6013      	str	r3, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 4480);
 800ba26:	4b15      	ldr	r3, [pc, #84]	; (800ba7c <network_configure_weights+0xfc>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800ba2e:	4a18      	ldr	r2, [pc, #96]	; (800ba90 <network_configure_weights+0x110>)
 800ba30:	6093      	str	r3, [r2, #8]
    dense_2_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 4480);
 800ba32:	4b12      	ldr	r3, [pc, #72]	; (800ba7c <network_configure_weights+0xfc>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800ba3a:	4a15      	ldr	r2, [pc, #84]	; (800ba90 <network_configure_weights+0x110>)
 800ba3c:	60d3      	str	r3, [r2, #12]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ba3e:	4b15      	ldr	r3, [pc, #84]	; (800ba94 <network_configure_weights+0x114>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba46:	4a13      	ldr	r2, [pc, #76]	; (800ba94 <network_configure_weights+0x114>)
 800ba48:	6013      	str	r3, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 4736);
 800ba4a:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <network_configure_weights+0xfc>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800ba52:	4a10      	ldr	r2, [pc, #64]	; (800ba94 <network_configure_weights+0x114>)
 800ba54:	6093      	str	r3, [r2, #8]
    dense_2_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4736);
 800ba56:	4b09      	ldr	r3, [pc, #36]	; (800ba7c <network_configure_weights+0xfc>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800ba5e:	4a0d      	ldr	r2, [pc, #52]	; (800ba94 <network_configure_weights+0x114>)
 800ba60:	60d3      	str	r3, [r2, #12]
    return true;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e005      	b.n	800ba72 <network_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800ba66:	2212      	movs	r2, #18
 800ba68:	2130      	movs	r1, #48	; 0x30
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fa80 	bl	800bf70 <ai_platform_network_set_error>
  return false;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	24002934 	.word	0x24002934
 800ba80:	24000174 	.word	0x24000174
 800ba84:	24000184 	.word	0x24000184
 800ba88:	24000194 	.word	0x24000194
 800ba8c:	240001a4 	.word	0x240001a4
 800ba90:	240001b4 	.word	0x240001b4
 800ba94:	240001c4 	.word	0x240001c4

0800ba98 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fa59 	bl	800bf58 <ai_platform_network_get_error>
 800baa6:	4603      	mov	r3, r0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af02      	add	r7, sp, #8
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800baba:	2300      	movs	r3, #0
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	2305      	movs	r3, #5
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	2301      	movs	r3, #1
 800bac4:	4a04      	ldr	r2, [pc, #16]	; (800bad8 <ai_network_create+0x28>)
 800bac6:	6839      	ldr	r1, [r7, #0]
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fb45 	bl	800c158 <ai_platform_network_create>
 800bace:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	240006f8 	.word	0x240006f8

0800badc <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b094      	sub	sp, #80	; 0x50
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800bae8:	2100      	movs	r1, #0
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff ffe0 	bl	800bab0 <ai_network_create>
 800baf0:	4603      	mov	r3, r0
 800baf2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (err.type != AI_ERROR_NONE) {
 800baf4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d001      	beq.n	800bb00 <ai_network_create_and_init+0x24>
    return err;
 800bafc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bafe:	e067      	b.n	800bbd0 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 800bb00:	f107 0310 	add.w	r3, r7, #16
 800bb04:	4618      	mov	r0, r3
 800bb06:	f000 f8e7 	bl	800bcd8 <ai_network_data_params_get>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	f083 0301 	eor.w	r3, r3, #1
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d008      	beq.n	800bb28 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7ff ffbc 	bl	800ba98 <ai_network_get_error>
 800bb20:	4603      	mov	r3, r0
 800bb22:	64bb      	str	r3, [r7, #72]	; 0x48
    return err;
 800bb24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb26:	e053      	b.n	800bbd0 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800bb28:	2300      	movs	r3, #0
 800bb2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800bb2e:	e012      	b.n	800bb56 <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800bb30:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800bb34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	f107 0310 	add.w	r3, r7, #16
 800bb44:	330c      	adds	r3, #12
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 f92c 	bl	800bda4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800bb4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb50:	3301      	adds	r3, #1
 800bb52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d004      	beq.n	800bb66 <ai_network_create_and_init+0x8a>
 800bb5c:	8bfb      	ldrh	r3, [r7, #30]
 800bb5e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d3e4      	bcc.n	800bb30 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800bb66:	2300      	movs	r3, #0
 800bb68:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800bb6c:	e012      	b.n	800bb94 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800bb6e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 800bb72:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	f107 0310 	add.w	r3, r7, #16
 800bb82:	3304      	adds	r3, #4
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 f90d 	bl	800bda4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800bb8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bb8e:	3301      	adds	r3, #1
 800bb90:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d004      	beq.n	800bba4 <ai_network_create_and_init+0xc8>
 800bb9a:	8afb      	ldrh	r3, [r7, #22]
 800bb9c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d3e4      	bcc.n	800bb6e <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f107 0210 	add.w	r2, r7, #16
 800bbac:	4611      	mov	r1, r2
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 f846 	bl	800bc40 <ai_network_init>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	f083 0301 	eor.w	r3, r3, #1
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d006      	beq.n	800bbce <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7ff ff67 	bl	800ba98 <ai_network_get_error>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  return err;
 800bbce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3750      	adds	r7, #80	; 0x50
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d104      	bne.n	800bbf2 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800bbe8:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <ai_network_inputs_get+0x2c>)
 800bbea:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a06      	ldr	r2, [pc, #24]	; (800bc08 <ai_network_inputs_get+0x30>)
 800bbf0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 f9c1 	bl	800bf7c <ai_platform_inputs_get>
 800bbfa:	4603      	mov	r3, r0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	240006f8 	.word	0x240006f8
 800bc08:	a1c00100 	.word	0xa1c00100

0800bc0c <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d104      	bne.n	800bc26 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800bc1c:	4b06      	ldr	r3, [pc, #24]	; (800bc38 <ai_network_outputs_get+0x2c>)
 800bc1e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a06      	ldr	r2, [pc, #24]	; (800bc3c <ai_network_outputs_get+0x30>)
 800bc24:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800bc26:	6839      	ldr	r1, [r7, #0]
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 fa1f 	bl	800c06c <ai_platform_outputs_get>
 800bc2e:	4603      	mov	r3, r0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	240006f8 	.word	0x240006f8
 800bc3c:	a1c00100 	.word	0xa1c00100

0800bc40 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fac5 	bl	800c1dc <ai_platform_network_init>
 800bc52:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800bc54:	2301      	movs	r3, #1
 800bc56:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <ai_network_init+0x22>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	e026      	b.n	800bcb0 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800bc62:	6839      	ldr	r1, [r7, #0]
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f7ff fe8b 	bl	800b980 <network_configure_weights>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	7afb      	ldrb	r3, [r7, #11]
 800bc70:	4013      	ands	r3, r2
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	bf14      	ite	ne
 800bc76:	2301      	movne	r3, #1
 800bc78:	2300      	moveq	r3, #0
 800bc7a:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	f7ff fe1c 	bl	800b8bc <network_configure_activations>
 800bc84:	4603      	mov	r3, r0
 800bc86:	461a      	mov	r2, r3
 800bc88:	7afb      	ldrb	r3, [r7, #11]
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	bf14      	ite	ne
 800bc90:	2301      	movne	r3, #1
 800bc92:	2300      	moveq	r3, #0
 800bc94:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fb60 	bl	800c35c <ai_platform_network_post_init>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	461a      	mov	r2, r3
 800bca0:	7afb      	ldrb	r3, [r7, #11]
 800bca2:	4013      	ands	r3, r2
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	bf14      	ite	ne
 800bca8:	2301      	movne	r3, #1
 800bcaa:	2300      	moveq	r3, #0
 800bcac:	72fb      	strb	r3, [r7, #11]

  return ok;
 800bcae:	7afb      	ldrb	r3, [r7, #11]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	68b9      	ldr	r1, [r7, #8]
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f000 fb77 	bl	800c3bc <ai_platform_network_process>
 800bcce:	4603      	mov	r3, r0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d101      	bne.n	800bcea <ai_network_data_params_get+0x12>
 800bce6:	2300      	movs	r3, #0
 800bce8:	e016      	b.n	800bd18 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800bcea:	4a0d      	ldr	r2, [pc, #52]	; (800bd20 <ai_network_data_params_get+0x48>)
 800bcec:	f107 0310 	add.w	r3, r7, #16
 800bcf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bcf4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800bcf8:	4a0a      	ldr	r2, [pc, #40]	; (800bd24 <ai_network_data_params_get+0x4c>)
 800bcfa:	f107 0308 	add.w	r3, r7, #8
 800bcfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd02:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800bd06:	f107 0210 	add.w	r2, r7, #16
 800bd0a:	f107 0308 	add.w	r3, r7, #8
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f907 	bl	800bf24 <ai_platform_bind_network_params>
 800bd16:	4603      	mov	r3, r0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3718      	adds	r7, #24
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	080109a0 	.word	0x080109a0
 800bd24:	080109a8 	.word	0x080109a8

0800bd28 <ai_buffer_get_size>:
 800bd28:	b368      	cbz	r0, 800bd86 <ai_buffer_get_size+0x5e>
 800bd2a:	4b17      	ldr	r3, [pc, #92]	; (800bd88 <ai_buffer_get_size+0x60>)
 800bd2c:	4a17      	ldr	r2, [pc, #92]	; (800bd8c <ai_buffer_get_size+0x64>)
 800bd2e:	b410      	push	{r4}
 800bd30:	6804      	ldr	r4, [r0, #0]
 800bd32:	4023      	ands	r3, r4
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d123      	bne.n	800bd80 <ai_buffer_get_size+0x58>
 800bd38:	b311      	cbz	r1, 800bd80 <ai_buffer_get_size+0x58>
 800bd3a:	6984      	ldr	r4, [r0, #24]
 800bd3c:	6862      	ldr	r2, [r4, #4]
 800bd3e:	321f      	adds	r2, #31
 800bd40:	f022 021f 	bic.w	r2, r2, #31
 800bd44:	7d03      	ldrb	r3, [r0, #20]
 800bd46:	6941      	ldr	r1, [r0, #20]
 800bd48:	f1a3 0301 	sub.w	r3, r3, #1
 800bd4c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800bd50:	fab3 f383 	clz	r3, r3
 800bd54:	095b      	lsrs	r3, r3, #5
 800bd56:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800bd5a:	da0c      	bge.n	800bd76 <ai_buffer_get_size+0x4e>
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d103      	bne.n	800bd68 <ai_buffer_get_size+0x40>
 800bd60:	2802      	cmp	r0, #2
 800bd62:	f04f 0302 	mov.w	r3, #2
 800bd66:	d006      	beq.n	800bd76 <ai_buffer_get_size+0x4e>
 800bd68:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	4298      	cmp	r0, r3
 800bd70:	fb01 f202 	mul.w	r2, r1, r2
 800bd74:	d1f2      	bne.n	800bd5c <ai_buffer_get_size+0x34>
 800bd76:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800bd7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	6984      	ldr	r4, [r0, #24]
 800bd82:	6862      	ldr	r2, [r4, #4]
 800bd84:	e7de      	b.n	800bd44 <ai_buffer_get_size+0x1c>
 800bd86:	4770      	bx	lr
 800bd88:	017fffff 	.word	0x017fffff
 800bd8c:	000400c0 	.word	0x000400c0

0800bd90 <ai_buffer_array_sane>:
 800bd90:	b138      	cbz	r0, 800bda2 <ai_buffer_array_sane+0x12>
 800bd92:	6843      	ldr	r3, [r0, #4]
 800bd94:	b123      	cbz	r3, 800bda0 <ai_buffer_array_sane+0x10>
 800bd96:	8840      	ldrh	r0, [r0, #2]
 800bd98:	3800      	subs	r0, #0
 800bd9a:	bf18      	it	ne
 800bd9c:	2001      	movne	r0, #1
 800bd9e:	4770      	bx	lr
 800bda0:	4618      	mov	r0, r3
 800bda2:	4770      	bx	lr

0800bda4 <ai_buffer_array_item_set_address>:
 800bda4:	b150      	cbz	r0, 800bdbc <ai_buffer_array_item_set_address+0x18>
 800bda6:	6843      	ldr	r3, [r0, #4]
 800bda8:	b14b      	cbz	r3, 800bdbe <ai_buffer_array_item_set_address+0x1a>
 800bdaa:	8840      	ldrh	r0, [r0, #2]
 800bdac:	b900      	cbnz	r0, 800bdb0 <ai_buffer_array_item_set_address+0xc>
 800bdae:	4770      	bx	lr
 800bdb0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bdb4:	2001      	movs	r0, #1
 800bdb6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800bdba:	605a      	str	r2, [r3, #4]
 800bdbc:	4770      	bx	lr
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop

0800bdc4 <ai_platform_get_weights_map>:
 800bdc4:	2900      	cmp	r1, #0
 800bdc6:	bf18      	it	ne
 800bdc8:	2800      	cmpne	r0, #0
 800bdca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdcc:	bf0c      	ite	eq
 800bdce:	2401      	moveq	r4, #1
 800bdd0:	2400      	movne	r4, #0
 800bdd2:	2a00      	cmp	r2, #0
 800bdd4:	bf08      	it	eq
 800bdd6:	f044 0401 	orreq.w	r4, r4, #1
 800bdda:	b114      	cbz	r4, 800bde2 <ai_platform_get_weights_map+0x1e>
 800bddc:	2400      	movs	r4, #0
 800bdde:	4620      	mov	r0, r4
 800bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde2:	4616      	mov	r6, r2
 800bde4:	4b22      	ldr	r3, [pc, #136]	; (800be70 <ai_platform_get_weights_map+0xac>)
 800bde6:	6812      	ldr	r2, [r2, #0]
 800bde8:	4605      	mov	r5, r0
 800bdea:	460f      	mov	r7, r1
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d022      	beq.n	800be36 <ai_platform_get_weights_map+0x72>
 800bdf0:	6870      	ldr	r0, [r6, #4]
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	d0f2      	beq.n	800bddc <ai_platform_get_weights_map+0x18>
 800bdf6:	6806      	ldr	r6, [r0, #0]
 800bdf8:	429e      	cmp	r6, r3
 800bdfa:	d006      	beq.n	800be0a <ai_platform_get_weights_map+0x46>
 800bdfc:	f1a1 0401 	sub.w	r4, r1, #1
 800be00:	6028      	str	r0, [r5, #0]
 800be02:	fab4 f484 	clz	r4, r4
 800be06:	0964      	lsrs	r4, r4, #5
 800be08:	e7e9      	b.n	800bdde <ai_platform_get_weights_map+0x1a>
 800be0a:	3d04      	subs	r5, #4
 800be0c:	4602      	mov	r2, r0
 800be0e:	4621      	mov	r1, r4
 800be10:	e000      	b.n	800be14 <ai_platform_get_weights_map+0x50>
 800be12:	4619      	mov	r1, r3
 800be14:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800be18:	42b3      	cmp	r3, r6
 800be1a:	d025      	beq.n	800be68 <ai_platform_get_weights_map+0xa4>
 800be1c:	f845 3f04 	str.w	r3, [r5, #4]!
 800be20:	1c4b      	adds	r3, r1, #1
 800be22:	429f      	cmp	r7, r3
 800be24:	d8f5      	bhi.n	800be12 <ai_platform_get_weights_map+0x4e>
 800be26:	d1da      	bne.n	800bdde <ai_platform_get_weights_map+0x1a>
 800be28:	3102      	adds	r1, #2
 800be2a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800be2e:	42b3      	cmp	r3, r6
 800be30:	d1d5      	bne.n	800bdde <ai_platform_get_weights_map+0x1a>
 800be32:	2401      	movs	r4, #1
 800be34:	e7d3      	b.n	800bdde <ai_platform_get_weights_map+0x1a>
 800be36:	1d30      	adds	r0, r6, #4
 800be38:	f7ff ffaa 	bl	800bd90 <ai_buffer_array_sane>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d0cd      	beq.n	800bddc <ai_platform_get_weights_map+0x18>
 800be40:	88f3      	ldrh	r3, [r6, #6]
 800be42:	429f      	cmp	r7, r3
 800be44:	d1ca      	bne.n	800bddc <ai_platform_get_weights_map+0x18>
 800be46:	3d04      	subs	r5, #4
 800be48:	4622      	mov	r2, r4
 800be4a:	68b3      	ldr	r3, [r6, #8]
 800be4c:	4423      	add	r3, r4
 800be4e:	341c      	adds	r4, #28
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	b123      	cbz	r3, 800be5e <ai_platform_get_weights_map+0x9a>
 800be54:	3201      	adds	r2, #1
 800be56:	f845 3f04 	str.w	r3, [r5, #4]!
 800be5a:	4297      	cmp	r7, r2
 800be5c:	d8f5      	bhi.n	800be4a <ai_platform_get_weights_map+0x86>
 800be5e:	1abc      	subs	r4, r7, r2
 800be60:	fab4 f484 	clz	r4, r4
 800be64:	0964      	lsrs	r4, r4, #5
 800be66:	e7ba      	b.n	800bdde <ai_platform_get_weights_map+0x1a>
 800be68:	428f      	cmp	r7, r1
 800be6a:	d1b8      	bne.n	800bdde <ai_platform_get_weights_map+0x1a>
 800be6c:	e7e1      	b.n	800be32 <ai_platform_get_weights_map+0x6e>
 800be6e:	bf00      	nop
 800be70:	a1facade 	.word	0xa1facade

0800be74 <ai_platform_get_activations_map>:
 800be74:	2900      	cmp	r1, #0
 800be76:	bf18      	it	ne
 800be78:	2800      	cmpne	r0, #0
 800be7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7c:	bf0c      	ite	eq
 800be7e:	2401      	moveq	r4, #1
 800be80:	2400      	movne	r4, #0
 800be82:	2a00      	cmp	r2, #0
 800be84:	bf08      	it	eq
 800be86:	f044 0401 	orreq.w	r4, r4, #1
 800be8a:	b114      	cbz	r4, 800be92 <ai_platform_get_activations_map+0x1e>
 800be8c:	2400      	movs	r4, #0
 800be8e:	4620      	mov	r0, r4
 800be90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be92:	4616      	mov	r6, r2
 800be94:	4b22      	ldr	r3, [pc, #136]	; (800bf20 <ai_platform_get_activations_map+0xac>)
 800be96:	6812      	ldr	r2, [r2, #0]
 800be98:	4605      	mov	r5, r0
 800be9a:	460f      	mov	r7, r1
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d022      	beq.n	800bee6 <ai_platform_get_activations_map+0x72>
 800bea0:	6a30      	ldr	r0, [r6, #32]
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d0f2      	beq.n	800be8c <ai_platform_get_activations_map+0x18>
 800bea6:	6806      	ldr	r6, [r0, #0]
 800bea8:	429e      	cmp	r6, r3
 800beaa:	d006      	beq.n	800beba <ai_platform_get_activations_map+0x46>
 800beac:	f1a1 0401 	sub.w	r4, r1, #1
 800beb0:	6028      	str	r0, [r5, #0]
 800beb2:	fab4 f484 	clz	r4, r4
 800beb6:	0964      	lsrs	r4, r4, #5
 800beb8:	e7e9      	b.n	800be8e <ai_platform_get_activations_map+0x1a>
 800beba:	3d04      	subs	r5, #4
 800bebc:	4602      	mov	r2, r0
 800bebe:	4621      	mov	r1, r4
 800bec0:	e000      	b.n	800bec4 <ai_platform_get_activations_map+0x50>
 800bec2:	4619      	mov	r1, r3
 800bec4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800bec8:	42b3      	cmp	r3, r6
 800beca:	d026      	beq.n	800bf1a <ai_platform_get_activations_map+0xa6>
 800becc:	f845 3f04 	str.w	r3, [r5, #4]!
 800bed0:	1c4b      	adds	r3, r1, #1
 800bed2:	429f      	cmp	r7, r3
 800bed4:	d8f5      	bhi.n	800bec2 <ai_platform_get_activations_map+0x4e>
 800bed6:	d1da      	bne.n	800be8e <ai_platform_get_activations_map+0x1a>
 800bed8:	3102      	adds	r1, #2
 800beda:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800bede:	42b3      	cmp	r3, r6
 800bee0:	d1d5      	bne.n	800be8e <ai_platform_get_activations_map+0x1a>
 800bee2:	2401      	movs	r4, #1
 800bee4:	e7d3      	b.n	800be8e <ai_platform_get_activations_map+0x1a>
 800bee6:	f106 000c 	add.w	r0, r6, #12
 800beea:	f7ff ff51 	bl	800bd90 <ai_buffer_array_sane>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d0cc      	beq.n	800be8c <ai_platform_get_activations_map+0x18>
 800bef2:	89f3      	ldrh	r3, [r6, #14]
 800bef4:	429f      	cmp	r7, r3
 800bef6:	d1c9      	bne.n	800be8c <ai_platform_get_activations_map+0x18>
 800bef8:	3d04      	subs	r5, #4
 800befa:	4622      	mov	r2, r4
 800befc:	6933      	ldr	r3, [r6, #16]
 800befe:	4423      	add	r3, r4
 800bf00:	341c      	adds	r4, #28
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	b123      	cbz	r3, 800bf10 <ai_platform_get_activations_map+0x9c>
 800bf06:	3201      	adds	r2, #1
 800bf08:	f845 3f04 	str.w	r3, [r5, #4]!
 800bf0c:	4297      	cmp	r7, r2
 800bf0e:	d8f5      	bhi.n	800befc <ai_platform_get_activations_map+0x88>
 800bf10:	1abc      	subs	r4, r7, r2
 800bf12:	fab4 f484 	clz	r4, r4
 800bf16:	0964      	lsrs	r4, r4, #5
 800bf18:	e7b9      	b.n	800be8e <ai_platform_get_activations_map+0x1a>
 800bf1a:	428f      	cmp	r7, r1
 800bf1c:	d1b7      	bne.n	800be8e <ai_platform_get_activations_map+0x1a>
 800bf1e:	e7e0      	b.n	800bee2 <ai_platform_get_activations_map+0x6e>
 800bf20:	a1facade 	.word	0xa1facade

0800bf24 <ai_platform_bind_network_params>:
 800bf24:	2a00      	cmp	r2, #0
 800bf26:	bf18      	it	ne
 800bf28:	2900      	cmpne	r1, #0
 800bf2a:	d010      	beq.n	800bf4e <ai_platform_bind_network_params+0x2a>
 800bf2c:	b178      	cbz	r0, 800bf4e <ai_platform_bind_network_params+0x2a>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	4808      	ldr	r0, [pc, #32]	; (800bf54 <ai_platform_bind_network_params+0x30>)
 800bf32:	f103 0c0c 	add.w	ip, r3, #12
 800bf36:	f843 0b04 	str.w	r0, [r3], #4
 800bf3a:	c903      	ldmia	r1, {r0, r1}
 800bf3c:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf40:	2301      	movs	r3, #1
 800bf42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf46:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	4770      	bx	lr
 800bf4e:	2300      	movs	r3, #0
 800bf50:	4618      	mov	r0, r3
 800bf52:	4770      	bx	lr
 800bf54:	a1facade 	.word	0xa1facade

0800bf58 <ai_platform_network_get_error>:
 800bf58:	4b04      	ldr	r3, [pc, #16]	; (800bf6c <ai_platform_network_get_error+0x14>)
 800bf5a:	6802      	ldr	r2, [r0, #0]
 800bf5c:	4393      	bics	r3, r2
 800bf5e:	d102      	bne.n	800bf66 <ai_platform_network_get_error+0xe>
 800bf60:	300c      	adds	r0, #12
 800bf62:	f000 bc73 	b.w	800c84c <core_get_error>
 800bf66:	f241 0010 	movw	r0, #4112	; 0x1010
 800bf6a:	4770      	bx	lr
 800bf6c:	a1c00100 	.word	0xa1c00100

0800bf70 <ai_platform_network_set_error>:
 800bf70:	b110      	cbz	r0, 800bf78 <ai_platform_network_set_error+0x8>
 800bf72:	300c      	adds	r0, #12
 800bf74:	f000 bc70 	b.w	800c858 <core_set_error>
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop

0800bf7c <ai_platform_inputs_get>:
 800bf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf80:	4b39      	ldr	r3, [pc, #228]	; (800c068 <ai_platform_inputs_get+0xec>)
 800bf82:	b085      	sub	sp, #20
 800bf84:	6802      	ldr	r2, [r0, #0]
 800bf86:	4393      	bics	r3, r2
 800bf88:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800bf8c:	d162      	bne.n	800c054 <ai_platform_inputs_get+0xd8>
 800bf8e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d051      	beq.n	800c038 <ai_platform_inputs_get+0xbc>
 800bf94:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 800bf98:	f1ba 0f00 	cmp.w	sl, #0
 800bf9c:	d04c      	beq.n	800c038 <ai_platform_inputs_get+0xbc>
 800bf9e:	f04f 0900 	mov.w	r9, #0
 800bfa2:	464d      	mov	r5, r9
 800bfa4:	e016      	b.n	800bfd4 <ai_platform_inputs_get+0x58>
 800bfa6:	9901      	ldr	r1, [sp, #4]
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	f848 3001 	str.w	r3, [r8, r1]
 800bfae:	69b1      	ldr	r1, [r6, #24]
 800bfb0:	f04f 0301 	mov.w	r3, #1
 800bfb4:	684e      	ldr	r6, [r1, #4]
 800bfb6:	3501      	adds	r5, #1
 800bfb8:	f109 091c 	add.w	r9, r9, #28
 800bfbc:	7523      	strb	r3, [r4, #20]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	6961      	ldr	r1, [r4, #20]
 800bfc2:	6020      	str	r0, [r4, #0]
 800bfc4:	f36b 211f 	bfi	r1, fp, #8, #24
 800bfc8:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800bfcc:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800bfd0:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800bfd4:	f8ba 3000 	ldrh.w	r3, [sl]
 800bfd8:	b2ac      	uxth	r4, r5
 800bfda:	42ab      	cmp	r3, r5
 800bfdc:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	d93b      	bls.n	800c05c <ai_platform_inputs_get+0xe0>
 800bfe4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d037      	beq.n	800c05c <ai_platform_inputs_get+0xe0>
 800bfec:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800bff0:	2e00      	cmp	r6, #0
 800bff2:	d033      	beq.n	800c05c <ai_platform_inputs_get+0xe0>
 800bff4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800bff8:	69b2      	ldr	r2, [r6, #24]
 800bffa:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800bffe:	6810      	ldr	r0, [r2, #0]
 800c000:	68b3      	ldr	r3, [r6, #8]
 800c002:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800c006:	68f2      	ldr	r2, [r6, #12]
 800c008:	444c      	add	r4, r9
 800c00a:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800c00e:	9200      	str	r2, [sp, #0]
 800c010:	f001 fc64 	bl	800d8dc <ai_array_to_buffer_fmt>
 800c014:	69b1      	ldr	r1, [r6, #24]
 800c016:	9a00      	ldr	r2, [sp, #0]
 800c018:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800c01c:	2f00      	cmp	r7, #0
 800c01e:	d0c7      	beq.n	800bfb0 <ai_platform_inputs_get+0x34>
 800c020:	2100      	movs	r1, #0
 800c022:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800c026:	6831      	ldr	r1, [r6, #0]
 800c028:	6079      	str	r1, [r7, #4]
 800c02a:	b111      	cbz	r1, 800c032 <ai_platform_inputs_get+0xb6>
 800c02c:	8849      	ldrh	r1, [r1, #2]
 800c02e:	2900      	cmp	r1, #0
 800c030:	d1b9      	bne.n	800bfa6 <ai_platform_inputs_get+0x2a>
 800c032:	69b1      	ldr	r1, [r6, #24]
 800c034:	2700      	movs	r7, #0
 800c036:	e7bb      	b.n	800bfb0 <ai_platform_inputs_get+0x34>
 800c038:	9803      	ldr	r0, [sp, #12]
 800c03a:	2400      	movs	r4, #0
 800c03c:	2218      	movs	r2, #24
 800c03e:	2111      	movs	r1, #17
 800c040:	300c      	adds	r0, #12
 800c042:	f000 fc09 	bl	800c858 <core_set_error>
 800c046:	4620      	mov	r0, r4
 800c048:	9b02      	ldr	r3, [sp, #8]
 800c04a:	b103      	cbz	r3, 800c04e <ai_platform_inputs_get+0xd2>
 800c04c:	801c      	strh	r4, [r3, #0]
 800c04e:	b005      	add	sp, #20
 800c050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c054:	2000      	movs	r0, #0
 800c056:	b005      	add	sp, #20
 800c058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05c:	2c00      	cmp	r4, #0
 800c05e:	d0eb      	beq.n	800c038 <ai_platform_inputs_get+0xbc>
 800c060:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c064:	6858      	ldr	r0, [r3, #4]
 800c066:	e7ef      	b.n	800c048 <ai_platform_inputs_get+0xcc>
 800c068:	a1c00100 	.word	0xa1c00100

0800c06c <ai_platform_outputs_get>:
 800c06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c070:	4b38      	ldr	r3, [pc, #224]	; (800c154 <ai_platform_outputs_get+0xe8>)
 800c072:	b085      	sub	sp, #20
 800c074:	6802      	ldr	r2, [r0, #0]
 800c076:	4393      	bics	r3, r2
 800c078:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800c07c:	d15f      	bne.n	800c13e <ai_platform_outputs_get+0xd2>
 800c07e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800c080:	2b01      	cmp	r3, #1
 800c082:	d94e      	bls.n	800c122 <ai_platform_outputs_get+0xb6>
 800c084:	f04f 0900 	mov.w	r9, #0
 800c088:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 800c08c:	464d      	mov	r5, r9
 800c08e:	e016      	b.n	800c0be <ai_platform_outputs_get+0x52>
 800c090:	9901      	ldr	r1, [sp, #4]
 800c092:	2301      	movs	r3, #1
 800c094:	f848 3001 	str.w	r3, [r8, r1]
 800c098:	69b1      	ldr	r1, [r6, #24]
 800c09a:	f04f 0301 	mov.w	r3, #1
 800c09e:	684e      	ldr	r6, [r1, #4]
 800c0a0:	3501      	adds	r5, #1
 800c0a2:	f109 091c 	add.w	r9, r9, #28
 800c0a6:	7523      	strb	r3, [r4, #20]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	6961      	ldr	r1, [r4, #20]
 800c0ac:	6020      	str	r0, [r4, #0]
 800c0ae:	f36b 211f 	bfi	r1, fp, #8, #24
 800c0b2:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800c0b6:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800c0ba:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800c0be:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800c0c2:	b2ac      	uxth	r4, r5
 800c0c4:	42ab      	cmp	r3, r5
 800c0c6:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800c0ca:	9301      	str	r3, [sp, #4]
 800c0cc:	d93b      	bls.n	800c146 <ai_platform_outputs_get+0xda>
 800c0ce:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d037      	beq.n	800c146 <ai_platform_outputs_get+0xda>
 800c0d6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800c0da:	2e00      	cmp	r6, #0
 800c0dc:	d033      	beq.n	800c146 <ai_platform_outputs_get+0xda>
 800c0de:	f8da 3014 	ldr.w	r3, [sl, #20]
 800c0e2:	69b2      	ldr	r2, [r6, #24]
 800c0e4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800c0e8:	6810      	ldr	r0, [r2, #0]
 800c0ea:	68b3      	ldr	r3, [r6, #8]
 800c0ec:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800c0f0:	68f2      	ldr	r2, [r6, #12]
 800c0f2:	444c      	add	r4, r9
 800c0f4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800c0f8:	9200      	str	r2, [sp, #0]
 800c0fa:	f001 fbef 	bl	800d8dc <ai_array_to_buffer_fmt>
 800c0fe:	69b1      	ldr	r1, [r6, #24]
 800c100:	9a00      	ldr	r2, [sp, #0]
 800c102:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800c106:	2f00      	cmp	r7, #0
 800c108:	d0c7      	beq.n	800c09a <ai_platform_outputs_get+0x2e>
 800c10a:	2100      	movs	r1, #0
 800c10c:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800c110:	6831      	ldr	r1, [r6, #0]
 800c112:	6079      	str	r1, [r7, #4]
 800c114:	b111      	cbz	r1, 800c11c <ai_platform_outputs_get+0xb0>
 800c116:	8849      	ldrh	r1, [r1, #2]
 800c118:	2900      	cmp	r1, #0
 800c11a:	d1b9      	bne.n	800c090 <ai_platform_outputs_get+0x24>
 800c11c:	69b1      	ldr	r1, [r6, #24]
 800c11e:	2700      	movs	r7, #0
 800c120:	e7bb      	b.n	800c09a <ai_platform_outputs_get+0x2e>
 800c122:	9803      	ldr	r0, [sp, #12]
 800c124:	2400      	movs	r4, #0
 800c126:	2218      	movs	r2, #24
 800c128:	2111      	movs	r1, #17
 800c12a:	300c      	adds	r0, #12
 800c12c:	f000 fb94 	bl	800c858 <core_set_error>
 800c130:	4620      	mov	r0, r4
 800c132:	9b02      	ldr	r3, [sp, #8]
 800c134:	b103      	cbz	r3, 800c138 <ai_platform_outputs_get+0xcc>
 800c136:	801c      	strh	r4, [r3, #0]
 800c138:	b005      	add	sp, #20
 800c13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13e:	2000      	movs	r0, #0
 800c140:	b005      	add	sp, #20
 800c142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c146:	2c00      	cmp	r4, #0
 800c148:	d0eb      	beq.n	800c122 <ai_platform_outputs_get+0xb6>
 800c14a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800c14e:	6858      	ldr	r0, [r3, #4]
 800c150:	e7ef      	b.n	800c132 <ai_platform_outputs_get+0xc6>
 800c152:	bf00      	nop
 800c154:	a1c00100 	.word	0xa1c00100

0800c158 <ai_platform_network_create>:
 800c158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c15c:	b083      	sub	sp, #12
 800c15e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800c162:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800c166:	b320      	cbz	r0, 800c1b2 <ai_platform_network_create+0x5a>
 800c168:	6002      	str	r2, [r0, #0]
 800c16a:	4616      	mov	r6, r2
 800c16c:	461f      	mov	r7, r3
 800c16e:	4604      	mov	r4, r0
 800c170:	f000 fb6a 	bl	800c848 <core_init>
 800c174:	b970      	cbnz	r0, 800c194 <ai_platform_network_create+0x3c>
 800c176:	2530      	movs	r5, #48	; 0x30
 800c178:	2300      	movs	r3, #0
 800c17a:	6023      	str	r3, [r4, #0]
 800c17c:	2410      	movs	r4, #16
 800c17e:	464a      	mov	r2, r9
 800c180:	4641      	mov	r1, r8
 800c182:	4638      	mov	r0, r7
 800c184:	f001 fc2c 	bl	800d9e0 <ai_version_get>
 800c188:	60b0      	str	r0, [r6, #8]
 800c18a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800c18e:	b003      	add	sp, #12
 800c190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c194:	2200      	movs	r2, #0
 800c196:	4641      	mov	r1, r8
 800c198:	4638      	mov	r0, r7
 800c19a:	f001 fc21 	bl	800d9e0 <ai_version_get>
 800c19e:	4605      	mov	r5, r0
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	2105      	movs	r1, #5
 800c1a4:	2001      	movs	r0, #1
 800c1a6:	f001 fc1b 	bl	800d9e0 <ai_version_get>
 800c1aa:	4285      	cmp	r5, r0
 800c1ac:	d008      	beq.n	800c1c0 <ai_platform_network_create+0x68>
 800c1ae:	2501      	movs	r5, #1
 800c1b0:	e7e2      	b.n	800c178 <ai_platform_network_create+0x20>
 800c1b2:	2510      	movs	r5, #16
 800c1b4:	462c      	mov	r4, r5
 800c1b6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800c1ba:	b003      	add	sp, #12
 800c1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1c0:	4b05      	ldr	r3, [pc, #20]	; (800c1d8 <ai_platform_network_create+0x80>)
 800c1c2:	a801      	add	r0, sp, #4
 800c1c4:	9301      	str	r3, [sp, #4]
 800c1c6:	f000 fb53 	bl	800c870 <ai_check_custom_types>
 800c1ca:	b110      	cbz	r0, 800c1d2 <ai_platform_network_create+0x7a>
 800c1cc:	2400      	movs	r4, #0
 800c1ce:	4625      	mov	r5, r4
 800c1d0:	e7d5      	b.n	800c17e <ai_platform_network_create+0x26>
 800c1d2:	2502      	movs	r5, #2
 800c1d4:	e7d0      	b.n	800c178 <ai_platform_network_create+0x20>
 800c1d6:	bf00      	nop
 800c1d8:	84048403 	.word	0x84048403

0800c1dc <ai_platform_network_init>:
 800c1dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e0:	4a5c      	ldr	r2, [pc, #368]	; (800c354 <ai_platform_network_init+0x178>)
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	6801      	ldr	r1, [r0, #0]
 800c1e6:	438a      	bics	r2, r1
 800c1e8:	d133      	bne.n	800c252 <ai_platform_network_init+0x76>
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	2c00      	cmp	r4, #0
 800c1ee:	f000 8093 	beq.w	800c318 <ai_platform_network_init+0x13c>
 800c1f2:	f8d4 b000 	ldr.w	fp, [r4]
 800c1f6:	4a58      	ldr	r2, [pc, #352]	; (800c358 <ai_platform_network_init+0x17c>)
 800c1f8:	4593      	cmp	fp, r2
 800c1fa:	d10f      	bne.n	800c21c <ai_platform_network_init+0x40>
 800c1fc:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800c200:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c204:	4b53      	ldr	r3, [pc, #332]	; (800c354 <ai_platform_network_init+0x178>)
 800c206:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800c20a:	0c32      	lsrs	r2, r6, #16
 800c20c:	4299      	cmp	r1, r3
 800c20e:	d02c      	beq.n	800c26a <ai_platform_network_init+0x8e>
 800c210:	2303      	movs	r3, #3
 800c212:	462c      	mov	r4, r5
 800c214:	612b      	str	r3, [r5, #16]
 800c216:	4620      	mov	r0, r4
 800c218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c21c:	4627      	mov	r7, r4
 800c21e:	2101      	movs	r1, #1
 800c220:	6864      	ldr	r4, [r4, #4]
 800c222:	4638      	mov	r0, r7
 800c224:	f107 081c 	add.w	r8, r7, #28
 800c228:	f7ff fd7e 	bl	800bd28 <ai_buffer_get_size>
 800c22c:	4606      	mov	r6, r0
 800c22e:	2101      	movs	r1, #1
 800c230:	4640      	mov	r0, r8
 800c232:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800c236:	f7ff fd77 	bl	800bd28 <ai_buffer_get_size>
 800c23a:	b976      	cbnz	r6, 800c25a <ai_platform_network_init+0x7e>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d150      	bne.n	800c2e2 <ai_platform_network_init+0x106>
 800c240:	4680      	mov	r8, r0
 800c242:	4686      	mov	lr, r0
 800c244:	4606      	mov	r6, r0
 800c246:	4607      	mov	r7, r0
 800c248:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800c24c:	6829      	ldr	r1, [r5, #0]
 800c24e:	0436      	lsls	r6, r6, #16
 800c250:	e7d8      	b.n	800c204 <ai_platform_network_init+0x28>
 800c252:	2400      	movs	r4, #0
 800c254:	4620      	mov	r0, r4
 800c256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d13b      	bne.n	800c2d6 <ai_platform_network_init+0xfa>
 800c25e:	4680      	mov	r8, r0
 800c260:	4686      	mov	lr, r0
 800c262:	2c00      	cmp	r4, #0
 800c264:	d05e      	beq.n	800c324 <ai_platform_network_init+0x148>
 800c266:	2601      	movs	r6, #1
 800c268:	e7ee      	b.n	800c248 <ai_platform_network_init+0x6c>
 800c26a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800c26c:	4293      	cmp	r3, r2
 800c26e:	4b3a      	ldr	r3, [pc, #232]	; (800c358 <ai_platform_network_init+0x17c>)
 800c270:	d33e      	bcc.n	800c2f0 <ai_platform_network_init+0x114>
 800c272:	459b      	cmp	fp, r3
 800c274:	d03e      	beq.n	800c2f4 <ai_platform_network_init+0x118>
 800c276:	b1a2      	cbz	r2, 800c2a2 <ai_platform_network_init+0xc6>
 800c278:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800c27c:	f04f 0c00 	mov.w	ip, #0
 800c280:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800c284:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800c286:	eb07 0b0c 	add.w	fp, r7, ip
 800c28a:	4464      	add	r4, ip
 800c28c:	f10c 0c1c 	add.w	ip, ip, #28
 800c290:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800c294:	45cc      	cmp	ip, r9
 800c296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c298:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800c29c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c2a0:	d1f0      	bne.n	800c284 <ai_platform_network_init+0xa8>
 800c2a2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c2a4:	622e      	str	r6, [r5, #32]
 800c2a6:	4553      	cmp	r3, sl
 800c2a8:	d34b      	bcc.n	800c342 <ai_platform_network_init+0x166>
 800c2aa:	f1ba 0f00 	cmp.w	sl, #0
 800c2ae:	d025      	beq.n	800c2fc <ai_platform_network_init+0x120>
 800c2b0:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800c2b4:	2700      	movs	r7, #0
 800c2b6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800c2ba:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 800c2bc:	eb08 0607 	add.w	r6, r8, r7
 800c2c0:	443c      	add	r4, r7
 800c2c2:	371c      	adds	r7, #28
 800c2c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c2c6:	4557      	cmp	r7, sl
 800c2c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2ca:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800c2ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c2d2:	d1f2      	bne.n	800c2ba <ai_platform_network_init+0xde>
 800c2d4:	e012      	b.n	800c2fc <ai_platform_network_init+0x120>
 800c2d6:	f1b9 0f00 	cmp.w	r9, #0
 800c2da:	d015      	beq.n	800c308 <ai_platform_network_init+0x12c>
 800c2dc:	f04f 0e01 	mov.w	lr, #1
 800c2e0:	e7bf      	b.n	800c262 <ai_platform_network_init+0x86>
 800c2e2:	f1b9 0f00 	cmp.w	r9, #0
 800c2e6:	d00f      	beq.n	800c308 <ai_platform_network_init+0x12c>
 800c2e8:	f04f 0e01 	mov.w	lr, #1
 800c2ec:	4637      	mov	r7, r6
 800c2ee:	e7ab      	b.n	800c248 <ai_platform_network_init+0x6c>
 800c2f0:	459b      	cmp	fp, r3
 800c2f2:	d11e      	bne.n	800c332 <ai_platform_network_init+0x156>
 800c2f4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800c2f8:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 800c302:	f000 fadd 	bl	800c8c0 <ai_layers_init_all>
 800c306:	e783      	b.n	800c210 <ai_platform_network_init+0x34>
 800c308:	2213      	movs	r2, #19
 800c30a:	2110      	movs	r1, #16
 800c30c:	f105 000c 	add.w	r0, r5, #12
 800c310:	2400      	movs	r4, #0
 800c312:	f000 faa1 	bl	800c858 <core_set_error>
 800c316:	e77e      	b.n	800c216 <ai_platform_network_init+0x3a>
 800c318:	2211      	movs	r2, #17
 800c31a:	2110      	movs	r1, #16
 800c31c:	300c      	adds	r0, #12
 800c31e:	f000 fa9b 	bl	800c858 <core_set_error>
 800c322:	e778      	b.n	800c216 <ai_platform_network_init+0x3a>
 800c324:	2212      	movs	r2, #18
 800c326:	2110      	movs	r1, #16
 800c328:	f105 000c 	add.w	r0, r5, #12
 800c32c:	f000 fa94 	bl	800c858 <core_set_error>
 800c330:	e771      	b.n	800c216 <ai_platform_network_init+0x3a>
 800c332:	2212      	movs	r2, #18
 800c334:	2116      	movs	r1, #22
 800c336:	f105 000c 	add.w	r0, r5, #12
 800c33a:	2400      	movs	r4, #0
 800c33c:	f000 fa8c 	bl	800c858 <core_set_error>
 800c340:	e769      	b.n	800c216 <ai_platform_network_init+0x3a>
 800c342:	2213      	movs	r2, #19
 800c344:	2116      	movs	r1, #22
 800c346:	f105 000c 	add.w	r0, r5, #12
 800c34a:	2400      	movs	r4, #0
 800c34c:	f000 fa84 	bl	800c858 <core_set_error>
 800c350:	e761      	b.n	800c216 <ai_platform_network_init+0x3a>
 800c352:	bf00      	nop
 800c354:	a1c00100 	.word	0xa1c00100
 800c358:	a1facade 	.word	0xa1facade

0800c35c <ai_platform_network_post_init>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	4b16      	ldr	r3, [pc, #88]	; (800c3b8 <ai_platform_network_post_init+0x5c>)
 800c360:	6802      	ldr	r2, [r0, #0]
 800c362:	ea02 0103 	and.w	r1, r2, r3
 800c366:	4393      	bics	r3, r2
 800c368:	d108      	bne.n	800c37c <ai_platform_network_post_init+0x20>
 800c36a:	6903      	ldr	r3, [r0, #16]
 800c36c:	4604      	mov	r4, r0
 800c36e:	f013 0502 	ands.w	r5, r3, #2
 800c372:	d005      	beq.n	800c380 <ai_platform_network_post_init+0x24>
 800c374:	428a      	cmp	r2, r1
 800c376:	d00a      	beq.n	800c38e <ai_platform_network_post_init+0x32>
 800c378:	2001      	movs	r0, #1
 800c37a:	bd38      	pop	{r3, r4, r5, pc}
 800c37c:	2000      	movs	r0, #0
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	2210      	movs	r2, #16
 800c382:	2111      	movs	r1, #17
 800c384:	300c      	adds	r0, #12
 800c386:	f000 fa67 	bl	800c858 <core_set_error>
 800c38a:	4628      	mov	r0, r5
 800c38c:	bd38      	pop	{r3, r4, r5, pc}
 800c38e:	f000 faa5 	bl	800c8dc <ai_layers_post_init_all>
 800c392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c394:	2b00      	cmp	r3, #0
 800c396:	d0ef      	beq.n	800c378 <ai_platform_network_post_init+0x1c>
 800c398:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800c39a:	e008      	b.n	800c3ae <ai_platform_network_post_init+0x52>
 800c39c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 800c3a0:	4798      	blx	r3
 800c3a2:	692b      	ldr	r3, [r5, #16]
 800c3a4:	42ab      	cmp	r3, r5
 800c3a6:	461d      	mov	r5, r3
 800c3a8:	d0e6      	beq.n	800c378 <ai_platform_network_post_init+0x1c>
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d0e4      	beq.n	800c378 <ai_platform_network_post_init+0x1c>
 800c3ae:	4629      	mov	r1, r5
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	2d00      	cmp	r5, #0
 800c3b4:	d1f2      	bne.n	800c39c <ai_platform_network_post_init+0x40>
 800c3b6:	e7df      	b.n	800c378 <ai_platform_network_post_init+0x1c>
 800c3b8:	a1c00100 	.word	0xa1c00100

0800c3bc <ai_platform_network_process>:
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	b085      	sub	sp, #20
 800c3c2:	4bb7      	ldr	r3, [pc, #732]	; (800c6a0 <ai_platform_network_process+0x2e4>)
 800c3c4:	9202      	str	r2, [sp, #8]
 800c3c6:	6802      	ldr	r2, [r0, #0]
 800c3c8:	4393      	bics	r3, r2
 800c3ca:	f040 8142 	bne.w	800c652 <ai_platform_network_process+0x296>
 800c3ce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800c3d0:	4605      	mov	r5, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 8126 	beq.w	800c624 <ai_platform_network_process+0x268>
 800c3d8:	6903      	ldr	r3, [r0, #16]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 800c3e0:	f003 0303 	and.w	r3, r3, #3
 800c3e4:	6182      	str	r2, [r0, #24]
 800c3e6:	2b03      	cmp	r3, #3
 800c3e8:	f040 8122 	bne.w	800c630 <ai_platform_network_process+0x274>
 800c3ec:	2900      	cmp	r1, #0
 800c3ee:	f000 8136 	beq.w	800c65e <ai_platform_network_process+0x2a2>
 800c3f2:	fab8 f788 	clz	r7, r8
 800c3f6:	097f      	lsrs	r7, r7, #5
 800c3f8:	f1b8 0f00 	cmp.w	r8, #0
 800c3fc:	f000 812f 	beq.w	800c65e <ai_platform_network_process+0x2a2>
 800c400:	f8b8 3000 	ldrh.w	r3, [r8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	f000 812a 	beq.w	800c65e <ai_platform_network_process+0x2a2>
 800c40a:	698b      	ldr	r3, [r1, #24]
 800c40c:	460e      	mov	r6, r1
 800c40e:	9003      	str	r0, [sp, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	9301      	str	r3, [sp, #4]
 800c414:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d072      	beq.n	800c502 <ai_platform_network_process+0x146>
 800c41c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800c420:	2c00      	cmp	r4, #0
 800c422:	d06e      	beq.n	800c502 <ai_platform_network_process+0x146>
 800c424:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c428:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800c42c:	f8d3 a000 	ldr.w	sl, [r3]
 800c430:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800c434:	f000 8112 	beq.w	800c65c <ai_platform_network_process+0x2a0>
 800c438:	69a3      	ldr	r3, [r4, #24]
 800c43a:	2101      	movs	r1, #1
 800c43c:	4630      	mov	r0, r6
 800c43e:	685d      	ldr	r5, [r3, #4]
 800c440:	f7ff fc72 	bl	800bd28 <ai_buffer_get_size>
 800c444:	4285      	cmp	r5, r0
 800c446:	f0c0 8115 	bcc.w	800c674 <ai_platform_network_process+0x2b8>
 800c44a:	68e0      	ldr	r0, [r4, #12]
 800c44c:	69b1      	ldr	r1, [r6, #24]
 800c44e:	68c2      	ldr	r2, [r0, #12]
 800c450:	68cb      	ldr	r3, [r1, #12]
 800c452:	429a      	cmp	r2, r3
 800c454:	f040 810e 	bne.w	800c674 <ai_platform_network_process+0x2b8>
 800c458:	6882      	ldr	r2, [r0, #8]
 800c45a:	688b      	ldr	r3, [r1, #8]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	f040 8109 	bne.w	800c674 <ai_platform_network_process+0x2b8>
 800c462:	6842      	ldr	r2, [r0, #4]
 800c464:	684b      	ldr	r3, [r1, #4]
 800c466:	429a      	cmp	r2, r3
 800c468:	f040 8104 	bne.w	800c674 <ai_platform_network_process+0x2b8>
 800c46c:	69a3      	ldr	r3, [r4, #24]
 800c46e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c472:	f001 faa3 	bl	800d9bc <ai_array_get_data_byte_size>
 800c476:	4605      	mov	r5, r0
 800c478:	4620      	mov	r0, r4
 800c47a:	f001 fab7 	bl	800d9ec <get_tensor_byte_size>
 800c47e:	4285      	cmp	r5, r0
 800c480:	f0c0 80f8 	bcc.w	800c674 <ai_platform_network_process+0x2b8>
 800c484:	69a3      	ldr	r3, [r4, #24]
 800c486:	6818      	ldr	r0, [r3, #0]
 800c488:	f001 fa28 	bl	800d8dc <ai_array_to_buffer_fmt>
 800c48c:	6833      	ldr	r3, [r6, #0]
 800c48e:	4058      	eors	r0, r3
 800c490:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800c494:	f040 81a4 	bne.w	800c7e0 <ai_platform_network_process+0x424>
 800c498:	6873      	ldr	r3, [r6, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 80de 	beq.w	800c65c <ai_platform_network_process+0x2a0>
 800c4a0:	69b3      	ldr	r3, [r6, #24]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f000 81a4 	beq.w	800c7f2 <ai_platform_network_process+0x436>
 800c4aa:	9a01      	ldr	r2, [sp, #4]
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	3701      	adds	r7, #1
 800c4b0:	361c      	adds	r6, #28
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	bf38      	it	cc
 800c4b6:	461a      	movcc	r2, r3
 800c4b8:	9201      	str	r2, [sp, #4]
 800c4ba:	f001 fa97 	bl	800d9ec <get_tensor_byte_size>
 800c4be:	f8c9 0008 	str.w	r0, [r9, #8]
 800c4c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	fb00 f303 	mul.w	r3, r0, r3
 800c4cc:	f8c9 300c 	str.w	r3, [r9, #12]
 800c4d0:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800c4d4:	440b      	add	r3, r1
 800c4d6:	f8c9 1004 	str.w	r1, [r9, #4]
 800c4da:	f84a 300b 	str.w	r3, [sl, fp]
 800c4de:	69a0      	ldr	r0, [r4, #24]
 800c4e0:	6803      	ldr	r3, [r0, #0]
 800c4e2:	009a      	lsls	r2, r3, #2
 800c4e4:	f100 80af 	bmi.w	800c646 <ai_platform_network_process+0x28a>
 800c4e8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c4ec:	1a9b      	subs	r3, r3, r2
 800c4ee:	4419      	add	r1, r3
 800c4f0:	6081      	str	r1, [r0, #8]
 800c4f2:	69a3      	ldr	r3, [r4, #24]
 800c4f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c4f8:	60da      	str	r2, [r3, #12]
 800c4fa:	f8b8 3000 	ldrh.w	r3, [r8]
 800c4fe:	42bb      	cmp	r3, r7
 800c500:	d888      	bhi.n	800c414 <ai_platform_network_process+0x58>
 800c502:	9d03      	ldr	r5, [sp, #12]
 800c504:	9b02      	ldr	r3, [sp, #8]
 800c506:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 817b 	beq.w	800c804 <ai_platform_network_process+0x448>
 800c50e:	2a01      	cmp	r2, #1
 800c510:	f240 80bd 	bls.w	800c68e <ai_platform_network_process+0x2d2>
 800c514:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 800c518:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 80b6 	beq.w	800c68e <ai_platform_network_process+0x2d2>
 800c522:	2700      	movs	r7, #0
 800c524:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c528:	9502      	str	r5, [sp, #8]
 800c52a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 80bd 	beq.w	800c6ae <ai_platform_network_process+0x2f2>
 800c534:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800c538:	2e00      	cmp	r6, #0
 800c53a:	f000 80b8 	beq.w	800c6ae <ai_platform_network_process+0x2f2>
 800c53e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c542:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800c546:	681c      	ldr	r4, [r3, #0]
 800c548:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 800c54c:	f000 8170 	beq.w	800c830 <ai_platform_network_process+0x474>
 800c550:	69b3      	ldr	r3, [r6, #24]
 800c552:	2101      	movs	r1, #1
 800c554:	4658      	mov	r0, fp
 800c556:	685d      	ldr	r5, [r3, #4]
 800c558:	f7ff fbe6 	bl	800bd28 <ai_buffer_get_size>
 800c55c:	4285      	cmp	r5, r0
 800c55e:	f0c0 8095 	bcc.w	800c68c <ai_platform_network_process+0x2d0>
 800c562:	68f0      	ldr	r0, [r6, #12]
 800c564:	f8db 1018 	ldr.w	r1, [fp, #24]
 800c568:	68c2      	ldr	r2, [r0, #12]
 800c56a:	68cb      	ldr	r3, [r1, #12]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	f040 808d 	bne.w	800c68c <ai_platform_network_process+0x2d0>
 800c572:	6882      	ldr	r2, [r0, #8]
 800c574:	688b      	ldr	r3, [r1, #8]
 800c576:	429a      	cmp	r2, r3
 800c578:	f040 8088 	bne.w	800c68c <ai_platform_network_process+0x2d0>
 800c57c:	6842      	ldr	r2, [r0, #4]
 800c57e:	684b      	ldr	r3, [r1, #4]
 800c580:	429a      	cmp	r2, r3
 800c582:	f040 8083 	bne.w	800c68c <ai_platform_network_process+0x2d0>
 800c586:	69b3      	ldr	r3, [r6, #24]
 800c588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c58c:	f001 fa16 	bl	800d9bc <ai_array_get_data_byte_size>
 800c590:	9003      	str	r0, [sp, #12]
 800c592:	4630      	mov	r0, r6
 800c594:	f001 fa2a 	bl	800d9ec <get_tensor_byte_size>
 800c598:	9b03      	ldr	r3, [sp, #12]
 800c59a:	4283      	cmp	r3, r0
 800c59c:	d376      	bcc.n	800c68c <ai_platform_network_process+0x2d0>
 800c59e:	69b3      	ldr	r3, [r6, #24]
 800c5a0:	6818      	ldr	r0, [r3, #0]
 800c5a2:	f001 f99b 	bl	800d8dc <ai_array_to_buffer_fmt>
 800c5a6:	f8db 3000 	ldr.w	r3, [fp]
 800c5aa:	4058      	eors	r0, r3
 800c5ac:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800c5b0:	f040 812c 	bne.w	800c80c <ai_platform_network_process+0x450>
 800c5b4:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 8139 	beq.w	800c830 <ai_platform_network_process+0x474>
 800c5be:	f8db 3018 	ldr.w	r3, [fp, #24]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f000 812a 	beq.w	800c81e <ai_platform_network_process+0x462>
 800c5ca:	9a01      	ldr	r2, [sp, #4]
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	3701      	adds	r7, #1
 800c5d0:	f10b 0b1c 	add.w	fp, fp, #28
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	bf38      	it	cc
 800c5d8:	461a      	movcc	r2, r3
 800c5da:	9201      	str	r2, [sp, #4]
 800c5dc:	f001 fa06 	bl	800d9ec <get_tensor_byte_size>
 800c5e0:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5e4:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	fb00 f303 	mul.w	r3, r0, r3
 800c5ee:	f8c8 300c 	str.w	r3, [r8, #12]
 800c5f2:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 800c5f6:	440b      	add	r3, r1
 800c5f8:	f8c8 1004 	str.w	r1, [r8, #4]
 800c5fc:	f844 300a 	str.w	r3, [r4, sl]
 800c600:	69b0      	ldr	r0, [r6, #24]
 800c602:	6803      	ldr	r3, [r0, #0]
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	d44d      	bmi.n	800c6a4 <ai_platform_network_process+0x2e8>
 800c608:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	4419      	add	r1, r3
 800c610:	6081      	str	r1, [r0, #8]
 800c612:	69b3      	ldr	r3, [r6, #24]
 800c614:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c618:	60da      	str	r2, [r3, #12]
 800c61a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c61e:	42bb      	cmp	r3, r7
 800c620:	d883      	bhi.n	800c52a <ai_platform_network_process+0x16e>
 800c622:	e044      	b.n	800c6ae <ai_platform_network_process+0x2f2>
 800c624:	6902      	ldr	r2, [r0, #16]
 800c626:	6183      	str	r3, [r0, #24]
 800c628:	f002 0203 	and.w	r2, r2, #3
 800c62c:	2a03      	cmp	r2, #3
 800c62e:	d016      	beq.n	800c65e <ai_platform_network_process+0x2a2>
 800c630:	2230      	movs	r2, #48	; 0x30
 800c632:	2111      	movs	r1, #17
 800c634:	f105 000c 	add.w	r0, r5, #12
 800c638:	2400      	movs	r4, #0
 800c63a:	f000 f90d 	bl	800c858 <core_set_error>
 800c63e:	4620      	mov	r0, r4
 800c640:	b005      	add	sp, #20
 800c642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c646:	f8b8 3000 	ldrh.w	r3, [r8]
 800c64a:	429f      	cmp	r7, r3
 800c64c:	f4ff aee2 	bcc.w	800c414 <ai_platform_network_process+0x58>
 800c650:	e757      	b.n	800c502 <ai_platform_network_process+0x146>
 800c652:	2400      	movs	r4, #0
 800c654:	4620      	mov	r0, r4
 800c656:	b005      	add	sp, #20
 800c658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65c:	9d03      	ldr	r5, [sp, #12]
 800c65e:	2400      	movs	r4, #0
 800c660:	2217      	movs	r2, #23
 800c662:	2112      	movs	r1, #18
 800c664:	f105 000c 	add.w	r0, r5, #12
 800c668:	f000 f8f6 	bl	800c858 <core_set_error>
 800c66c:	4620      	mov	r0, r4
 800c66e:	b005      	add	sp, #20
 800c670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c674:	9d03      	ldr	r5, [sp, #12]
 800c676:	2400      	movs	r4, #0
 800c678:	2218      	movs	r2, #24
 800c67a:	2112      	movs	r1, #18
 800c67c:	f105 000c 	add.w	r0, r5, #12
 800c680:	f000 f8ea 	bl	800c858 <core_set_error>
 800c684:	4620      	mov	r0, r4
 800c686:	b005      	add	sp, #20
 800c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68c:	9d02      	ldr	r5, [sp, #8]
 800c68e:	2218      	movs	r2, #24
 800c690:	2113      	movs	r1, #19
 800c692:	f105 000c 	add.w	r0, r5, #12
 800c696:	2400      	movs	r4, #0
 800c698:	f000 f8de 	bl	800c858 <core_set_error>
 800c69c:	e7cf      	b.n	800c63e <ai_platform_network_process+0x282>
 800c69e:	bf00      	nop
 800c6a0:	a1c00100 	.word	0xa1c00100
 800c6a4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c6a8:	429f      	cmp	r7, r3
 800c6aa:	f4ff af3e 	bcc.w	800c52a <ai_platform_network_process+0x16e>
 800c6ae:	9d02      	ldr	r5, [sp, #8]
 800c6b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c6b4:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800c6b6:	832b      	strh	r3, [r5, #24]
 800c6b8:	2a00      	cmp	r2, #0
 800c6ba:	f040 808b 	bne.w	800c7d4 <ai_platform_network_process+0x418>
 800c6be:	4616      	mov	r6, r2
 800c6c0:	4617      	mov	r7, r2
 800c6c2:	8b6c      	ldrh	r4, [r5, #26]
 800c6c4:	429c      	cmp	r4, r3
 800c6c6:	d2ba      	bcs.n	800c63e <ai_platform_network_process+0x282>
 800c6c8:	46ab      	mov	fp, r5
 800c6ca:	2e00      	cmp	r6, #0
 800c6cc:	d030      	beq.n	800c730 <ai_platform_network_process+0x374>
 800c6ce:	f04f 0800 	mov.w	r8, #0
 800c6d2:	e014      	b.n	800c6fe <ai_platform_network_process+0x342>
 800c6d4:	6882      	ldr	r2, [r0, #8]
 800c6d6:	68c5      	ldr	r5, [r0, #12]
 800c6d8:	6863      	ldr	r3, [r4, #4]
 800c6da:	1b52      	subs	r2, r2, r5
 800c6dc:	4413      	add	r3, r2
 800c6de:	6083      	str	r3, [r0, #8]
 800c6e0:	698b      	ldr	r3, [r1, #24]
 800c6e2:	6862      	ldr	r2, [r4, #4]
 800c6e4:	60da      	str	r2, [r3, #12]
 800c6e6:	f859 200a 	ldr.w	r2, [r9, sl]
 800c6ea:	f108 0801 	add.w	r8, r8, #1
 800c6ee:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800c6f2:	440b      	add	r3, r1
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d301      	bcc.n	800c6fc <ai_platform_network_process+0x340>
 800c6f8:	68e3      	ldr	r3, [r4, #12]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	6063      	str	r3, [r4, #4]
 800c6fe:	8833      	ldrh	r3, [r6, #0]
 800c700:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800c704:	4543      	cmp	r3, r8
 800c706:	d913      	bls.n	800c730 <ai_platform_network_process+0x374>
 800c708:	6873      	ldr	r3, [r6, #4]
 800c70a:	b18b      	cbz	r3, 800c730 <ai_platform_network_process+0x374>
 800c70c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800c710:	b171      	cbz	r1, 800c730 <ai_platform_network_process+0x374>
 800c712:	6988      	ldr	r0, [r1, #24]
 800c714:	68b2      	ldr	r2, [r6, #8]
 800c716:	6803      	ldr	r3, [r0, #0]
 800c718:	f8d2 9000 	ldr.w	r9, [r2]
 800c71c:	009d      	lsls	r5, r3, #2
 800c71e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800c722:	d5d7      	bpl.n	800c6d4 <ai_platform_network_process+0x318>
 800c724:	6881      	ldr	r1, [r0, #8]
 800c726:	68a2      	ldr	r2, [r4, #8]
 800c728:	6860      	ldr	r0, [r4, #4]
 800c72a:	f001 f84f 	bl	800d7cc <st_int8_copy>
 800c72e:	e7da      	b.n	800c6e6 <ai_platform_network_process+0x32a>
 800c730:	4658      	mov	r0, fp
 800c732:	f000 f8e7 	bl	800c904 <ai_layers_forward_all>
 800c736:	2f00      	cmp	r7, #0
 800c738:	d03d      	beq.n	800c7b6 <ai_platform_network_process+0x3fa>
 800c73a:	2400      	movs	r4, #0
 800c73c:	e016      	b.n	800c76c <ai_platform_network_process+0x3b0>
 800c73e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800c742:	f859 100a 	ldr.w	r1, [r9, sl]
 800c746:	4413      	add	r3, r2
 800c748:	428b      	cmp	r3, r1
 800c74a:	d302      	bcc.n	800c752 <ai_platform_network_process+0x396>
 800c74c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c750:	1acb      	subs	r3, r1, r3
 800c752:	f8c8 3004 	str.w	r3, [r8, #4]
 800c756:	6981      	ldr	r1, [r0, #24]
 800c758:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800c75c:	1b52      	subs	r2, r2, r5
 800c75e:	4413      	add	r3, r2
 800c760:	608b      	str	r3, [r1, #8]
 800c762:	6983      	ldr	r3, [r0, #24]
 800c764:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c768:	60da      	str	r2, [r3, #12]
 800c76a:	3401      	adds	r4, #1
 800c76c:	883b      	ldrh	r3, [r7, #0]
 800c76e:	42a3      	cmp	r3, r4
 800c770:	d921      	bls.n	800c7b6 <ai_platform_network_process+0x3fa>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	b1fb      	cbz	r3, 800c7b6 <ai_platform_network_process+0x3fa>
 800c776:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c77a:	b1e0      	cbz	r0, 800c7b6 <ai_platform_network_process+0x3fa>
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800c782:	6983      	ldr	r3, [r0, #24]
 800c784:	f8d2 9000 	ldr.w	r9, [r2]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800c78e:	0092      	lsls	r2, r2, #2
 800c790:	d5d5      	bpl.n	800c73e <ai_platform_network_process+0x382>
 800c792:	6898      	ldr	r0, [r3, #8]
 800c794:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800c798:	f001 f818 	bl	800d7cc <st_int8_copy>
 800c79c:	f859 200a 	ldr.w	r2, [r9, sl]
 800c7a0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800c7a4:	440b      	add	r3, r1
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d302      	bcc.n	800c7b0 <ai_platform_network_process+0x3f4>
 800c7aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	f8c8 3004 	str.w	r3, [r8, #4]
 800c7b4:	e7d9      	b.n	800c76a <ai_platform_network_process+0x3ae>
 800c7b6:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800c7ba:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800c7be:	3401      	adds	r4, #1
 800c7c0:	b2a4      	uxth	r4, r4
 800c7c2:	42a3      	cmp	r3, r4
 800c7c4:	f8ab 401a 	strh.w	r4, [fp, #26]
 800c7c8:	f63f af7f 	bhi.w	800c6ca <ai_platform_network_process+0x30e>
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	b005      	add	sp, #20
 800c7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d4:	2a01      	cmp	r2, #1
 800c7d6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800c7d8:	d033      	beq.n	800c842 <ai_platform_network_process+0x486>
 800c7da:	f106 070c 	add.w	r7, r6, #12
 800c7de:	e770      	b.n	800c6c2 <ai_platform_network_process+0x306>
 800c7e0:	9d03      	ldr	r5, [sp, #12]
 800c7e2:	2219      	movs	r2, #25
 800c7e4:	2112      	movs	r1, #18
 800c7e6:	2400      	movs	r4, #0
 800c7e8:	f105 000c 	add.w	r0, r5, #12
 800c7ec:	f000 f834 	bl	800c858 <core_set_error>
 800c7f0:	e725      	b.n	800c63e <ai_platform_network_process+0x282>
 800c7f2:	9d03      	ldr	r5, [sp, #12]
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	2221      	movs	r2, #33	; 0x21
 800c7f8:	2112      	movs	r1, #18
 800c7fa:	f105 000c 	add.w	r0, r5, #12
 800c7fe:	f000 f82b 	bl	800c858 <core_set_error>
 800c802:	e71c      	b.n	800c63e <ai_platform_network_process+0x282>
 800c804:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c808:	832b      	strh	r3, [r5, #24]
 800c80a:	e755      	b.n	800c6b8 <ai_platform_network_process+0x2fc>
 800c80c:	9d02      	ldr	r5, [sp, #8]
 800c80e:	2219      	movs	r2, #25
 800c810:	2113      	movs	r1, #19
 800c812:	2400      	movs	r4, #0
 800c814:	f105 000c 	add.w	r0, r5, #12
 800c818:	f000 f81e 	bl	800c858 <core_set_error>
 800c81c:	e70f      	b.n	800c63e <ai_platform_network_process+0x282>
 800c81e:	9d02      	ldr	r5, [sp, #8]
 800c820:	4604      	mov	r4, r0
 800c822:	2221      	movs	r2, #33	; 0x21
 800c824:	2113      	movs	r1, #19
 800c826:	f105 000c 	add.w	r0, r5, #12
 800c82a:	f000 f815 	bl	800c858 <core_set_error>
 800c82e:	e706      	b.n	800c63e <ai_platform_network_process+0x282>
 800c830:	9d02      	ldr	r5, [sp, #8]
 800c832:	2217      	movs	r2, #23
 800c834:	2113      	movs	r1, #19
 800c836:	2400      	movs	r4, #0
 800c838:	f105 000c 	add.w	r0, r5, #12
 800c83c:	f000 f80c 	bl	800c858 <core_set_error>
 800c840:	e6fd      	b.n	800c63e <ai_platform_network_process+0x282>
 800c842:	2700      	movs	r7, #0
 800c844:	e73d      	b.n	800c6c2 <ai_platform_network_process+0x306>
 800c846:	bf00      	nop

0800c848 <core_init>:
 800c848:	2001      	movs	r0, #1
 800c84a:	4770      	bx	lr

0800c84c <core_get_error>:
 800c84c:	4603      	mov	r3, r0
 800c84e:	2200      	movs	r2, #0
 800c850:	6800      	ldr	r0, [r0, #0]
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop

0800c858 <core_set_error>:
 800c858:	4603      	mov	r3, r0
 800c85a:	7800      	ldrb	r0, [r0, #0]
 800c85c:	b108      	cbz	r0, 800c862 <core_set_error+0xa>
 800c85e:	2000      	movs	r0, #0
 800c860:	4770      	bx	lr
 800c862:	7019      	strb	r1, [r3, #0]
 800c864:	2001      	movs	r0, #1
 800c866:	6819      	ldr	r1, [r3, #0]
 800c868:	f362 211f 	bfi	r1, r2, #8, #24
 800c86c:	6019      	str	r1, [r3, #0]
 800c86e:	4770      	bx	lr

0800c870 <ai_check_custom_types>:
 800c870:	b082      	sub	sp, #8
 800c872:	4b12      	ldr	r3, [pc, #72]	; (800c8bc <ai_check_custom_types+0x4c>)
 800c874:	9301      	str	r3, [sp, #4]
 800c876:	b118      	cbz	r0, 800c880 <ai_check_custom_types+0x10>
 800c878:	7803      	ldrb	r3, [r0, #0]
 800c87a:	2b03      	cmp	r3, #3
 800c87c:	d002      	beq.n	800c884 <ai_check_custom_types+0x14>
 800c87e:	2000      	movs	r0, #0
 800c880:	b002      	add	sp, #8
 800c882:	4770      	bx	lr
 800c884:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c888:	4293      	cmp	r3, r2
 800c88a:	d004      	beq.n	800c896 <ai_check_custom_types+0x26>
 800c88c:	2001      	movs	r0, #1
 800c88e:	f080 0001 	eor.w	r0, r0, #1
 800c892:	b002      	add	sp, #8
 800c894:	4770      	bx	lr
 800c896:	7842      	ldrb	r2, [r0, #1]
 800c898:	3001      	adds	r0, #1
 800c89a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d1f4      	bne.n	800c88c <ai_check_custom_types+0x1c>
 800c8a2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800c8a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d1ee      	bne.n	800c88c <ai_check_custom_types+0x1c>
 800c8ae:	7842      	ldrb	r2, [r0, #1]
 800c8b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d1e9      	bne.n	800c88c <ai_check_custom_types+0x1c>
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	e7e8      	b.n	800c88e <ai_check_custom_types+0x1e>
 800c8bc:	84048403 	.word	0x84048403

0800c8c0 <ai_layers_init_all>:
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c8c4:	b13b      	cbz	r3, 800c8d6 <ai_layers_init_all+0x16>
 800c8c6:	691a      	ldr	r2, [r3, #16]
 800c8c8:	3101      	adds	r1, #1
 800c8ca:	60d8      	str	r0, [r3, #12]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	d001      	beq.n	800c8d6 <ai_layers_init_all+0x16>
 800c8d2:	2a00      	cmp	r2, #0
 800c8d4:	d1f6      	bne.n	800c8c4 <ai_layers_init_all+0x4>
 800c8d6:	4608      	mov	r0, r1
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop

0800c8dc <ai_layers_post_init_all>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	2500      	movs	r5, #0
 800c8e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c8e2:	b16c      	cbz	r4, 800c900 <ai_layers_post_init_all+0x24>
 800c8e4:	6863      	ldr	r3, [r4, #4]
 800c8e6:	07db      	lsls	r3, r3, #31
 800c8e8:	d504      	bpl.n	800c8f4 <ai_layers_post_init_all+0x18>
 800c8ea:	6a23      	ldr	r3, [r4, #32]
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	b10b      	cbz	r3, 800c8f4 <ai_layers_post_init_all+0x18>
 800c8f0:	3501      	adds	r5, #1
 800c8f2:	4798      	blx	r3
 800c8f4:	6923      	ldr	r3, [r4, #16]
 800c8f6:	42a3      	cmp	r3, r4
 800c8f8:	461c      	mov	r4, r3
 800c8fa:	d001      	beq.n	800c900 <ai_layers_post_init_all+0x24>
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1f0      	bne.n	800c8e2 <ai_layers_post_init_all+0x6>
 800c900:	4628      	mov	r0, r5
 800c902:	bd38      	pop	{r3, r4, r5, pc}

0800c904 <ai_layers_forward_all>:
 800c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 800c90c:	4604      	mov	r4, r0
 800c90e:	f1b8 0f00 	cmp.w	r8, #0
 800c912:	d02a      	beq.n	800c96a <ai_layers_forward_all+0x66>
 800c914:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800c916:	63c1      	str	r1, [r0, #60]	; 0x3c
 800c918:	b319      	cbz	r1, 800c962 <ai_layers_forward_all+0x5e>
 800c91a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c91c:	2001      	movs	r0, #1
 800c91e:	47c0      	blx	r8
 800c920:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800c922:	b1f6      	cbz	r6, 800c962 <ai_layers_forward_all+0x5e>
 800c924:	2700      	movs	r7, #0
 800c926:	4631      	mov	r1, r6
 800c928:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c92a:	2002      	movs	r0, #2
 800c92c:	47c0      	blx	r8
 800c92e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800c930:	4628      	mov	r0, r5
 800c932:	696b      	ldr	r3, [r5, #20]
 800c934:	4798      	blx	r3
 800c936:	692e      	ldr	r6, [r5, #16]
 800c938:	2003      	movs	r0, #3
 800c93a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c93c:	42b5      	cmp	r5, r6
 800c93e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c940:	d007      	beq.n	800c952 <ai_layers_forward_all+0x4e>
 800c942:	47c0      	blx	r8
 800c944:	3701      	adds	r7, #1
 800c946:	63e6      	str	r6, [r4, #60]	; 0x3c
 800c948:	2e00      	cmp	r6, #0
 800c94a:	d1ec      	bne.n	800c926 <ai_layers_forward_all+0x22>
 800c94c:	4638      	mov	r0, r7
 800c94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c952:	2003      	movs	r0, #3
 800c954:	3701      	adds	r7, #1
 800c956:	47c0      	blx	r8
 800c958:	2300      	movs	r3, #0
 800c95a:	4638      	mov	r0, r7
 800c95c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c962:	2700      	movs	r7, #0
 800c964:	4638      	mov	r0, r7
 800c966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c96a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800c96c:	63c5      	str	r5, [r0, #60]	; 0x3c
 800c96e:	2d00      	cmp	r5, #0
 800c970:	d0f7      	beq.n	800c962 <ai_layers_forward_all+0x5e>
 800c972:	4647      	mov	r7, r8
 800c974:	696b      	ldr	r3, [r5, #20]
 800c976:	4628      	mov	r0, r5
 800c978:	4798      	blx	r3
 800c97a:	462b      	mov	r3, r5
 800c97c:	692d      	ldr	r5, [r5, #16]
 800c97e:	429d      	cmp	r5, r3
 800c980:	d004      	beq.n	800c98c <ai_layers_forward_all+0x88>
 800c982:	3701      	adds	r7, #1
 800c984:	63e5      	str	r5, [r4, #60]	; 0x3c
 800c986:	2d00      	cmp	r5, #0
 800c988:	d1f4      	bne.n	800c974 <ai_layers_forward_all+0x70>
 800c98a:	e7df      	b.n	800c94c <ai_layers_forward_all+0x48>
 800c98c:	2300      	movs	r3, #0
 800c98e:	3701      	adds	r7, #1
 800c990:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c992:	e7db      	b.n	800c94c <ai_layers_forward_all+0x48>

0800c994 <forward_dense>:
 800c994:	6982      	ldr	r2, [r0, #24]
 800c996:	8813      	ldrh	r3, [r2, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d043      	beq.n	800ca24 <forward_dense+0x90>
 800c99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a0:	6855      	ldr	r5, [r2, #4]
 800c9a2:	b08e      	sub	sp, #56	; 0x38
 800c9a4:	6869      	ldr	r1, [r5, #4]
 800c9a6:	b101      	cbz	r1, 800c9aa <forward_dense+0x16>
 800c9a8:	6809      	ldr	r1, [r1, #0]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d069      	beq.n	800ca82 <forward_dense+0xee>
 800c9ae:	692a      	ldr	r2, [r5, #16]
 800c9b0:	b102      	cbz	r2, 800c9b4 <forward_dense+0x20>
 800c9b2:	6812      	ldr	r2, [r2, #0]
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	d061      	beq.n	800ca7c <forward_dense+0xe8>
 800c9b8:	69ec      	ldr	r4, [r5, #28]
 800c9ba:	2c00      	cmp	r4, #0
 800c9bc:	d057      	beq.n	800ca6e <forward_dense+0xda>
 800c9be:	8b2e      	ldrh	r6, [r5, #24]
 800c9c0:	6820      	ldr	r0, [r4, #0]
 800c9c2:	2e01      	cmp	r6, #1
 800c9c4:	d955      	bls.n	800ca72 <forward_dense+0xde>
 800c9c6:	6864      	ldr	r4, [r4, #4]
 800c9c8:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800c9cc:	2b03      	cmp	r3, #3
 800c9ce:	68d0      	ldr	r0, [r2, #12]
 800c9d0:	68cf      	ldr	r7, [r1, #12]
 800c9d2:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800c9d6:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800c9da:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800c9de:	f8d9 0000 	ldr.w	r0, [r9]
 800c9e2:	fb06 f807 	mul.w	r8, r6, r7
 800c9e6:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
 800c9ea:	d044      	beq.n	800ca76 <forward_dense+0xe2>
 800c9ec:	6aad      	ldr	r5, [r5, #40]	; 0x28
 800c9ee:	b11d      	cbz	r5, 800c9f8 <forward_dense+0x64>
 800c9f0:	682d      	ldr	r5, [r5, #0]
 800c9f2:	b10d      	cbz	r5, 800c9f8 <forward_dense+0x64>
 800c9f4:	69ab      	ldr	r3, [r5, #24]
 800c9f6:	689d      	ldr	r5, [r3, #8]
 800c9f8:	6992      	ldr	r2, [r2, #24]
 800c9fa:	698b      	ldr	r3, [r1, #24]
 800c9fc:	6890      	ldr	r0, [r2, #8]
 800c9fe:	6899      	ldr	r1, [r3, #8]
 800ca00:	b10c      	cbz	r4, 800ca06 <forward_dense+0x72>
 800ca02:	69a3      	ldr	r3, [r4, #24]
 800ca04:	689c      	ldr	r4, [r3, #8]
 800ca06:	4b20      	ldr	r3, [pc, #128]	; (800ca88 <forward_dense+0xf4>)
 800ca08:	459c      	cmp	ip, r3
 800ca0a:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800ca0e:	d023      	beq.n	800ca58 <forward_dense+0xc4>
 800ca10:	4e1e      	ldr	r6, [pc, #120]	; (800ca8c <forward_dense+0xf8>)
 800ca12:	45b4      	cmp	ip, r6
 800ca14:	d015      	beq.n	800ca42 <forward_dense+0xae>
 800ca16:	f5a3 039c 	sub.w	r3, r3, #5111808	; 0x4e0000
 800ca1a:	459c      	cmp	ip, r3
 800ca1c:	d004      	beq.n	800ca28 <forward_dense+0x94>
 800ca1e:	b00e      	add	sp, #56	; 0x38
 800ca20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	deff      	udf	#255	; 0xff
 800ca28:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800ca2c:	a807      	add	r0, sp, #28
 800ca2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ca30:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 800ca34:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 800ca38:	f000 f990 	bl	800cd5c <forward_lite_dense_if32of32wf32>
 800ca3c:	b00e      	add	sp, #56	; 0x38
 800ca3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca42:	464b      	mov	r3, r9
 800ca44:	9500      	str	r5, [sp, #0]
 800ca46:	e9cd e803 	strd	lr, r8, [sp, #12]
 800ca4a:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800ca4e:	f000 fae3 	bl	800d018 <forward_lite_dense_if32of32wf32_lut4>
 800ca52:	b00e      	add	sp, #56	; 0x38
 800ca54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca58:	464b      	mov	r3, r9
 800ca5a:	9500      	str	r5, [sp, #0]
 800ca5c:	e9cd e803 	strd	lr, r8, [sp, #12]
 800ca60:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800ca64:	f000 fc02 	bl	800d26c <forward_lite_dense_if32of32wf32_lut8>
 800ca68:	b00e      	add	sp, #56	; 0x38
 800ca6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca6e:	4620      	mov	r0, r4
 800ca70:	e7aa      	b.n	800c9c8 <forward_dense+0x34>
 800ca72:	2400      	movs	r4, #0
 800ca74:	e7a8      	b.n	800c9c8 <forward_dense+0x34>
 800ca76:	2300      	movs	r3, #0
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	deff      	udf	#255	; 0xff
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	deff      	udf	#255	; 0xff
 800ca82:	2300      	movs	r3, #0
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	deff      	udf	#255	; 0xff
 800ca88:	01d01040 	.word	0x01d01040
 800ca8c:	01e81040 	.word	0x01e81040

0800ca90 <forward_sigmoid>:
 800ca90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca92:	ed2d 8b02 	vpush	{d8}
 800ca96:	6982      	ldr	r2, [r0, #24]
 800ca98:	8813      	ldrh	r3, [r2, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d03b      	beq.n	800cb16 <forward_sigmoid+0x86>
 800ca9e:	6852      	ldr	r2, [r2, #4]
 800caa0:	6854      	ldr	r4, [r2, #4]
 800caa2:	b104      	cbz	r4, 800caa6 <forward_sigmoid+0x16>
 800caa4:	6824      	ldr	r4, [r4, #0]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d034      	beq.n	800cb14 <forward_sigmoid+0x84>
 800caaa:	6915      	ldr	r5, [r2, #16]
 800caac:	b105      	cbz	r5, 800cab0 <forward_sigmoid+0x20>
 800caae:	682d      	ldr	r5, [r5, #0]
 800cab0:	68a3      	ldr	r3, [r4, #8]
 800cab2:	0a1b      	lsrs	r3, r3, #8
 800cab4:	d031      	beq.n	800cb1a <forward_sigmoid+0x8a>
 800cab6:	68e0      	ldr	r0, [r4, #12]
 800cab8:	2201      	movs	r2, #1
 800caba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cabe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cac2:	4298      	cmp	r0, r3
 800cac4:	fb01 f202 	mul.w	r2, r1, r2
 800cac8:	d1f9      	bne.n	800cabe <forward_sigmoid+0x2e>
 800caca:	69a7      	ldr	r7, [r4, #24]
 800cacc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cad0:	69a9      	ldr	r1, [r5, #24]
 800cad2:	4413      	add	r3, r2
 800cad4:	68ba      	ldr	r2, [r7, #8]
 800cad6:	688e      	ldr	r6, [r1, #8]
 800cad8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800cadc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800cae0:	42aa      	cmp	r2, r5
 800cae2:	d814      	bhi.n	800cb0e <forward_sigmoid+0x7e>
 800cae4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800cae8:	3504      	adds	r5, #4
 800caea:	3604      	adds	r6, #4
 800caec:	462c      	mov	r4, r5
 800caee:	ed35 0a01 	vldmdb	r5!, {s0}
 800caf2:	eeb1 0a40 	vneg.f32	s0, s0
 800caf6:	3c08      	subs	r4, #8
 800caf8:	f003 fd76 	bl	80105e8 <expf>
 800cafc:	ee30 0a08 	vadd.f32	s0, s0, s16
 800cb00:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800cb04:	ed66 7a01 	vstmdb	r6!, {s15}
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	42a3      	cmp	r3, r4
 800cb0c:	d9ee      	bls.n	800caec <forward_sigmoid+0x5c>
 800cb0e:	ecbd 8b02 	vpop	{d8}
 800cb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb14:	2300      	movs	r3, #0
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	deff      	udf	#255	; 0xff
 800cb1a:	69ab      	ldr	r3, [r5, #24]
 800cb1c:	69a7      	ldr	r7, [r4, #24]
 800cb1e:	689e      	ldr	r6, [r3, #8]
 800cb20:	68bd      	ldr	r5, [r7, #8]
 800cb22:	e7df      	b.n	800cae4 <forward_sigmoid+0x54>

0800cb24 <forward_relu>:
 800cb24:	6982      	ldr	r2, [r0, #24]
 800cb26:	8813      	ldrh	r3, [r2, #0]
 800cb28:	b323      	cbz	r3, 800cb74 <forward_relu+0x50>
 800cb2a:	6851      	ldr	r1, [r2, #4]
 800cb2c:	684a      	ldr	r2, [r1, #4]
 800cb2e:	b102      	cbz	r2, 800cb32 <forward_relu+0xe>
 800cb30:	6812      	ldr	r2, [r2, #0]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	f000 8086 	beq.w	800cc44 <forward_relu+0x120>
 800cb38:	b470      	push	{r4, r5, r6}
 800cb3a:	690b      	ldr	r3, [r1, #16]
 800cb3c:	b103      	cbz	r3, 800cb40 <forward_relu+0x1c>
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	69c6      	ldr	r6, [r0, #28]
 800cb42:	b1ce      	cbz	r6, 800cb78 <forward_relu+0x54>
 800cb44:	6871      	ldr	r1, [r6, #4]
 800cb46:	6998      	ldr	r0, [r3, #24]
 800cb48:	2901      	cmp	r1, #1
 800cb4a:	d03f      	beq.n	800cbcc <forward_relu+0xa8>
 800cb4c:	6893      	ldr	r3, [r2, #8]
 800cb4e:	6991      	ldr	r1, [r2, #24]
 800cb50:	0a1b      	lsrs	r3, r3, #8
 800cb52:	6880      	ldr	r0, [r0, #8]
 800cb54:	6889      	ldr	r1, [r1, #8]
 800cb56:	d06c      	beq.n	800cc32 <forward_relu+0x10e>
 800cb58:	68d5      	ldr	r5, [r2, #12]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cb60:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800cb64:	429d      	cmp	r5, r3
 800cb66:	fb04 f202 	mul.w	r2, r4, r2
 800cb6a:	d1f9      	bne.n	800cb60 <forward_relu+0x3c>
 800cb6c:	68b3      	ldr	r3, [r6, #8]
 800cb6e:	bc70      	pop	{r4, r5, r6}
 800cb70:	f000 b86e 	b.w	800cc50 <forward_lite_nl_relu_generic_if32of32_kernel>
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	deff      	udf	#255	; 0xff
 800cb78:	6999      	ldr	r1, [r3, #24]
 800cb7a:	6893      	ldr	r3, [r2, #8]
 800cb7c:	6990      	ldr	r0, [r2, #24]
 800cb7e:	0a1b      	lsrs	r3, r3, #8
 800cb80:	6889      	ldr	r1, [r1, #8]
 800cb82:	6884      	ldr	r4, [r0, #8]
 800cb84:	d057      	beq.n	800cc36 <forward_relu+0x112>
 800cb86:	68d5      	ldr	r5, [r2, #12]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cb8e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800cb92:	429d      	cmp	r5, r3
 800cb94:	fb00 f202 	mul.w	r2, r0, r2
 800cb98:	d1f9      	bne.n	800cb8e <forward_relu+0x6a>
 800cb9a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cb9e:	4413      	add	r3, r2
 800cba0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800cba4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800cba8:	4294      	cmp	r4, r2
 800cbaa:	d80d      	bhi.n	800cbc8 <forward_relu+0xa4>
 800cbac:	3204      	adds	r2, #4
 800cbae:	3104      	adds	r1, #4
 800cbb0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800cc4c <forward_relu+0x128>
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	ed72 7a01 	vldmdb	r2!, {s15}
 800cbba:	3b08      	subs	r3, #8
 800cbbc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800cbc0:	ed61 7a01 	vstmdb	r1!, {s15}
 800cbc4:	429c      	cmp	r4, r3
 800cbc6:	d9f5      	bls.n	800cbb4 <forward_relu+0x90>
 800cbc8:	bc70      	pop	{r4, r5, r6}
 800cbca:	4770      	bx	lr
 800cbcc:	6993      	ldr	r3, [r2, #24]
 800cbce:	6880      	ldr	r0, [r0, #8]
 800cbd0:	689c      	ldr	r4, [r3, #8]
 800cbd2:	6893      	ldr	r3, [r2, #8]
 800cbd4:	0a1b      	lsrs	r3, r3, #8
 800cbd6:	d030      	beq.n	800cc3a <forward_relu+0x116>
 800cbd8:	68d5      	ldr	r5, [r2, #12]
 800cbda:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cbde:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cbe2:	429d      	cmp	r5, r3
 800cbe4:	fb02 f101 	mul.w	r1, r2, r1
 800cbe8:	d1f9      	bne.n	800cbde <forward_relu+0xba>
 800cbea:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800cbee:	68b3      	ldr	r3, [r6, #8]
 800cbf0:	440a      	add	r2, r1
 800cbf2:	ed93 7a00 	vldr	s14, [r3]
 800cbf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cbfa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800cbfe:	429c      	cmp	r4, r3
 800cc00:	d8e2      	bhi.n	800cbc8 <forward_relu+0xa4>
 800cc02:	1d02      	adds	r2, r0, #4
 800cc04:	3304      	adds	r3, #4
 800cc06:	2000      	movs	r0, #0
 800cc08:	ed53 7a01 	vldr	s15, [r3, #-4]
 800cc0c:	1f19      	subs	r1, r3, #4
 800cc0e:	3b08      	subs	r3, #8
 800cc10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc18:	d405      	bmi.n	800cc26 <forward_relu+0x102>
 800cc1a:	429c      	cmp	r4, r3
 800cc1c:	f842 0d04 	str.w	r0, [r2, #-4]!
 800cc20:	d8d2      	bhi.n	800cbc8 <forward_relu+0xa4>
 800cc22:	460b      	mov	r3, r1
 800cc24:	e7f0      	b.n	800cc08 <forward_relu+0xe4>
 800cc26:	429c      	cmp	r4, r3
 800cc28:	ed62 7a01 	vstmdb	r2!, {s15}
 800cc2c:	d8cc      	bhi.n	800cbc8 <forward_relu+0xa4>
 800cc2e:	460b      	mov	r3, r1
 800cc30:	e7ea      	b.n	800cc08 <forward_relu+0xe4>
 800cc32:	2201      	movs	r2, #1
 800cc34:	e79a      	b.n	800cb6c <forward_relu+0x48>
 800cc36:	4622      	mov	r2, r4
 800cc38:	e7b8      	b.n	800cbac <forward_relu+0x88>
 800cc3a:	68b2      	ldr	r2, [r6, #8]
 800cc3c:	4623      	mov	r3, r4
 800cc3e:	ed92 7a00 	vldr	s14, [r2]
 800cc42:	e7de      	b.n	800cc02 <forward_relu+0xde>
 800cc44:	2300      	movs	r3, #0
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	deff      	udf	#255	; 0xff
 800cc4a:	bf00      	nop
 800cc4c:	00000000 	.word	0x00000000

0800cc50 <forward_lite_nl_relu_generic_if32of32_kernel>:
 800cc50:	edd3 6a02 	vldr	s13, [r3, #8]
 800cc54:	ed93 7a00 	vldr	s14, [r3]
 800cc58:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800cc5c:	ed93 6a01 	vldr	s12, [r3, #4]
 800cc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc64:	d42b      	bmi.n	800ccbe <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800cc66:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cc6a:	4413      	add	r3, r2
 800cc6c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800cc70:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800cc74:	4291      	cmp	r1, r2
 800cc76:	d821      	bhi.n	800ccbc <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800cc78:	f10c 0104 	add.w	r1, ip, #4
 800cc7c:	1d13      	adds	r3, r2, #4
 800cc7e:	eba2 020c 	sub.w	r2, r2, ip
 800cc82:	4408      	add	r0, r1
 800cc84:	e00c      	b.n	800cca0 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800cc86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc8a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800cc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc92:	db01      	blt.n	800cc98 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800cc94:	ee65 7a86 	vmul.f32	s15, s11, s12
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	ed60 7a01 	vstmdb	r0!, {s15}
 800cc9e:	d00c      	beq.n	800ccba <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800cca0:	ed73 7a01 	vldmdb	r3!, {s15}
 800cca4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800cca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccac:	daeb      	bge.n	800cc86 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800ccae:	eef0 7a66 	vmov.f32	s15, s13
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	ed60 7a01 	vstmdb	r0!, {s15}
 800ccb8:	d1f2      	bne.n	800cca0 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800ccba:	4770      	bx	lr
 800ccbc:	4770      	bx	lr
 800ccbe:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ccc2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ccc6:	4413      	add	r3, r2
 800ccc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cccc:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 800ccd0:	b500      	push	{lr}
 800ccd2:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800ccd6:	d019      	beq.n	800cd0c <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 800ccd8:	4561      	cmp	r1, ip
 800ccda:	d815      	bhi.n	800cd08 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800ccdc:	f10e 0204 	add.w	r2, lr, #4
 800cce0:	f10c 0304 	add.w	r3, ip, #4
 800cce4:	ebac 010e 	sub.w	r1, ip, lr
 800cce8:	4402      	add	r2, r0
 800ccea:	ed73 7a01 	vldmdb	r3!, {s15}
 800ccee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ccf2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ccf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccfa:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ccfe:	d827      	bhi.n	800cd50 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 800cd00:	428b      	cmp	r3, r1
 800cd02:	ed62 6a01 	vstmdb	r2!, {s13}
 800cd06:	d1f0      	bne.n	800ccea <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 800cd08:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd0c:	4561      	cmp	r1, ip
 800cd0e:	d8fb      	bhi.n	800cd08 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800cd10:	f10e 0204 	add.w	r2, lr, #4
 800cd14:	f10c 0304 	add.w	r3, ip, #4
 800cd18:	ebac 010e 	sub.w	r1, ip, lr
 800cd1c:	f04f 0c00 	mov.w	ip, #0
 800cd20:	4402      	add	r2, r0
 800cd22:	ed73 7a01 	vldmdb	r3!, {s15}
 800cd26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd2e:	d40a      	bmi.n	800cd46 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 800cd30:	428b      	cmp	r3, r1
 800cd32:	f842 cd04 	str.w	ip, [r2, #-4]!
 800cd36:	d0e7      	beq.n	800cd08 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800cd38:	ed73 7a01 	vldmdb	r3!, {s15}
 800cd3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd44:	d5f4      	bpl.n	800cd30 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800cd46:	428b      	cmp	r3, r1
 800cd48:	ed62 7a01 	vstmdb	r2!, {s15}
 800cd4c:	d1e9      	bne.n	800cd22 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 800cd4e:	e7db      	b.n	800cd08 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800cd50:	428b      	cmp	r3, r1
 800cd52:	ed62 7a01 	vstmdb	r2!, {s15}
 800cd56:	d1c8      	bne.n	800ccea <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 800cd58:	e7d6      	b.n	800cd08 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800cd5a:	bf00      	nop

0800cd5c <forward_lite_dense_if32of32wf32>:
 800cd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd60:	ed2d 8b0c 	vpush	{d8-d13}
 800cd64:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800cd68:	6801      	ldr	r1, [r0, #0]
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	fb02 f303 	mul.w	r3, r2, r3
 800cd70:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800cd74:	9100      	str	r1, [sp, #0]
 800cd76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cd7a:	4299      	cmp	r1, r3
 800cd7c:	9301      	str	r3, [sp, #4]
 800cd7e:	f080 811c 	bcs.w	800cfba <forward_lite_dense_if32of32wf32+0x25e>
 800cd82:	4607      	mov	r7, r0
 800cd84:	6904      	ldr	r4, [r0, #16]
 800cd86:	0096      	lsls	r6, r2, #2
 800cd88:	9b00      	ldr	r3, [sp, #0]
 800cd8a:	68bd      	ldr	r5, [r7, #8]
 800cd8c:	eb03 0e06 	add.w	lr, r3, r6
 800cd90:	461e      	mov	r6, r3
 800cd92:	459e      	cmp	lr, r3
 800cd94:	f240 8103 	bls.w	800cf9e <forward_lite_dense_if32of32wf32+0x242>
 800cd98:	f1a4 0c10 	sub.w	ip, r4, #16
 800cd9c:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800cda0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800cda4:	f10c 0c01 	add.w	ip, ip, #1
 800cda8:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800cdac:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800cdb0:	2c0f      	cmp	r4, #15
 800cdb2:	f240 8107 	bls.w	800cfc4 <forward_lite_dense_if32of32wf32+0x268>
 800cdb6:	f108 0240 	add.w	r2, r8, #64	; 0x40
 800cdba:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800cdbe:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800d014 <forward_lite_dense_if32of32wf32+0x2b8>
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 800cdc8:	3910      	subs	r1, #16
 800cdca:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800cdce:	3340      	adds	r3, #64	; 0x40
 800cdd0:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 800cdd4:	290f      	cmp	r1, #15
 800cdd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cdda:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 800cdde:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800cde2:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800cde6:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800cdea:	eee4 7a85 	vfma.f32	s15, s9, s10
 800cdee:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 800cdf2:	ed12 da1d 	vldr	s26, [r2, #-116]	; 0xffffff8c
 800cdf6:	ed52 ca1c 	vldr	s25, [r2, #-112]	; 0xffffff90
 800cdfa:	ed13 ca1c 	vldr	s24, [r3, #-112]	; 0xffffff90
 800cdfe:	ed52 ba1b 	vldr	s23, [r2, #-108]	; 0xffffff94
 800ce02:	ed13 ba1b 	vldr	s22, [r3, #-108]	; 0xffffff94
 800ce06:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ce0a:	ed52 aa1a 	vldr	s21, [r2, #-104]	; 0xffffff98
 800ce0e:	ed13 aa1a 	vldr	s20, [r3, #-104]	; 0xffffff98
 800ce12:	ed52 9a19 	vldr	s19, [r2, #-100]	; 0xffffff9c
 800ce16:	ed13 9a19 	vldr	s18, [r3, #-100]	; 0xffffff9c
 800ce1a:	ed52 8a18 	vldr	s17, [r2, #-96]	; 0xffffffa0
 800ce1e:	ed13 8a18 	vldr	s16, [r3, #-96]	; 0xffffffa0
 800ce22:	eeed 7a26 	vfma.f32	s15, s26, s13
 800ce26:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800ce2a:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 800ce2e:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 800ce32:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 800ce36:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800ce3a:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 800ce3e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800ce42:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800ce46:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800ce4a:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800ce4e:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800ce52:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800ce56:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800ce5a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ce5e:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800ce62:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 800ce66:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ce6a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ce6e:	eee8 7a88 	vfma.f32	s15, s17, s16
 800ce72:	eee0 7a20 	vfma.f32	s15, s0, s1
 800ce76:	eee1 7a21 	vfma.f32	s15, s2, s3
 800ce7a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800ce7e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ce82:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ce86:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ce8a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ce8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce92:	d897      	bhi.n	800cdc4 <forward_lite_dense_if32of32wf32+0x68>
 800ce94:	eb05 020b 	add.w	r2, r5, fp
 800ce98:	f004 010f 	and.w	r1, r4, #15
 800ce9c:	4663      	mov	r3, ip
 800ce9e:	2903      	cmp	r1, #3
 800cea0:	d95f      	bls.n	800cf62 <forward_lite_dense_if32of32wf32+0x206>
 800cea2:	edd2 6a01 	vldr	s13, [r2, #4]
 800cea6:	1f08      	subs	r0, r1, #4
 800cea8:	edd3 7a01 	vldr	s15, [r3, #4]
 800ceac:	ed93 4a00 	vldr	s8, [r3]
 800ceb0:	2803      	cmp	r0, #3
 800ceb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ceb6:	edd2 4a00 	vldr	s9, [r2]
 800ceba:	ed93 5a02 	vldr	s10, [r3, #8]
 800cebe:	edd2 5a02 	vldr	s11, [r2, #8]
 800cec2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cec6:	ed93 6a03 	vldr	s12, [r3, #12]
 800ceca:	edd2 6a03 	vldr	s13, [r2, #12]
 800cece:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ced2:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ced6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ceda:	eeb0 7a67 	vmov.f32	s14, s15
 800cede:	d938      	bls.n	800cf52 <forward_lite_dense_if32of32wf32+0x1f6>
 800cee0:	edd2 6a05 	vldr	s13, [r2, #20]
 800cee4:	f1a1 0a08 	sub.w	sl, r1, #8
 800cee8:	edd3 7a05 	vldr	s15, [r3, #20]
 800ceec:	ed93 4a04 	vldr	s8, [r3, #16]
 800cef0:	f1ba 0f03 	cmp.w	sl, #3
 800cef4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cef8:	edd2 4a04 	vldr	s9, [r2, #16]
 800cefc:	ed93 5a06 	vldr	s10, [r3, #24]
 800cf00:	edd2 5a06 	vldr	s11, [r2, #24]
 800cf04:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cf08:	ed93 6a07 	vldr	s12, [r3, #28]
 800cf0c:	edd2 6a07 	vldr	s13, [r2, #28]
 800cf10:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cf14:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cf18:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf1c:	d919      	bls.n	800cf52 <forward_lite_dense_if32of32wf32+0x1f6>
 800cf1e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800cf22:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800cf26:	ed92 4a08 	vldr	s8, [r2, #32]
 800cf2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cf2e:	edd3 4a08 	vldr	s9, [r3, #32]
 800cf32:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 800cf36:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 800cf3a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cf3e:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 800cf42:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800cf46:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cf4a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cf4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf52:	0880      	lsrs	r0, r0, #2
 800cf54:	f001 0103 	and.w	r1, r1, #3
 800cf58:	3001      	adds	r0, #1
 800cf5a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800cf5e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800cf62:	b1a9      	cbz	r1, 800cf90 <forward_lite_dense_if32of32wf32+0x234>
 800cf64:	edd3 6a00 	vldr	s13, [r3]
 800cf68:	3901      	subs	r1, #1
 800cf6a:	edd2 7a00 	vldr	s15, [r2]
 800cf6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cf72:	d00d      	beq.n	800cf90 <forward_lite_dense_if32of32wf32+0x234>
 800cf74:	edd3 6a01 	vldr	s13, [r3, #4]
 800cf78:	2901      	cmp	r1, #1
 800cf7a:	edd2 7a01 	vldr	s15, [r2, #4]
 800cf7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cf82:	d005      	beq.n	800cf90 <forward_lite_dense_if32of32wf32+0x234>
 800cf84:	edd2 6a02 	vldr	s13, [r2, #8]
 800cf88:	edd3 7a02 	vldr	s15, [r3, #8]
 800cf8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cf90:	eca6 7a01 	vstmia	r6!, {s14}
 800cf94:	45b6      	cmp	lr, r6
 800cf96:	444d      	add	r5, r9
 800cf98:	f63f af0a 	bhi.w	800cdb0 <forward_lite_dense_if32of32wf32+0x54>
 800cf9c:	697a      	ldr	r2, [r7, #20]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	b9b3      	cbnz	r3, 800cfd0 <forward_lite_dense_if32of32wf32+0x274>
 800cfa2:	9b00      	ldr	r3, [sp, #0]
 800cfa4:	0096      	lsls	r6, r2, #2
 800cfa6:	9901      	ldr	r1, [sp, #4]
 800cfa8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800cfac:	693c      	ldr	r4, [r7, #16]
 800cfae:	4299      	cmp	r1, r3
 800cfb0:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	f63f aee7 	bhi.w	800cd88 <forward_lite_dense_if32of32wf32+0x2c>
 800cfba:	b003      	add	sp, #12
 800cfbc:	ecbd 8b0c 	vpop	{d8-d13}
 800cfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc4:	4621      	mov	r1, r4
 800cfc6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800d014 <forward_lite_dense_if32of32wf32+0x2b8>
 800cfca:	462a      	mov	r2, r5
 800cfcc:	4643      	mov	r3, r8
 800cfce:	e766      	b.n	800ce9e <forward_lite_dense_if32of32wf32+0x142>
 800cfd0:	2a00      	cmp	r2, #0
 800cfd2:	d0e6      	beq.n	800cfa2 <forward_lite_dense_if32of32wf32+0x246>
 800cfd4:	9a00      	ldr	r2, [sp, #0]
 800cfd6:	ed93 7a00 	vldr	s14, [r3]
 800cfda:	edd2 7a00 	vldr	s15, [r2]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfe4:	edc2 7a00 	vstr	s15, [r2]
 800cfe8:	697a      	ldr	r2, [r7, #20]
 800cfea:	2a01      	cmp	r2, #1
 800cfec:	d9d9      	bls.n	800cfa2 <forward_lite_dense_if32of32wf32+0x246>
 800cfee:	1d19      	adds	r1, r3, #4
 800cff0:	2301      	movs	r3, #1
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	ed91 7a00 	vldr	s14, [r1]
 800cff8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cffc:	3301      	adds	r3, #1
 800cffe:	edd2 7a00 	vldr	s15, [r2]
 800d002:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d006:	ece1 7a01 	vstmia	r1!, {s15}
 800d00a:	697a      	ldr	r2, [r7, #20]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d8f0      	bhi.n	800cff2 <forward_lite_dense_if32of32wf32+0x296>
 800d010:	e7c7      	b.n	800cfa2 <forward_lite_dense_if32of32wf32+0x246>
 800d012:	bf00      	nop
 800d014:	00000000 	.word	0x00000000

0800d018 <forward_lite_dense_if32of32wf32_lut4>:
 800d018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01c:	b08d      	sub	sp, #52	; 0x34
 800d01e:	4605      	mov	r5, r0
 800d020:	460c      	mov	r4, r1
 800d022:	9005      	str	r0, [sp, #20]
 800d024:	4618      	mov	r0, r3
 800d026:	920a      	str	r2, [sp, #40]	; 0x28
 800d028:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800d02a:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 800d02e:	fb02 f303 	mul.w	r3, r2, r3
 800d032:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d036:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800d038:	9308      	str	r3, [sp, #32]
 800d03a:	b126      	cbz	r6, 800d046 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800d03c:	2240      	movs	r2, #64	; 0x40
 800d03e:	4631      	mov	r1, r6
 800d040:	f000 fbc4 	bl	800d7cc <st_int8_copy>
 800d044:	4630      	mov	r0, r6
 800d046:	9b05      	ldr	r3, [sp, #20]
 800d048:	9a08      	ldr	r2, [sp, #32]
 800d04a:	4293      	cmp	r3, r2
 800d04c:	f080 80f7 	bcs.w	800d23e <forward_lite_dense_if32of32wf32_lut4+0x226>
 800d050:	08eb      	lsrs	r3, r5, #3
 800d052:	f005 0101 	and.w	r1, r5, #1
 800d056:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d058:	f025 0801 	bic.w	r8, r5, #1
 800d05c:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	9102      	str	r1, [sp, #8]
 800d066:	0092      	lsls	r2, r2, #2
 800d068:	f104 0b20 	add.w	fp, r4, #32
 800d06c:	00a9      	lsls	r1, r5, #2
 800d06e:	9304      	str	r3, [sp, #16]
 800d070:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 800d074:	9b05      	ldr	r3, [sp, #20]
 800d076:	9207      	str	r2, [sp, #28]
 800d078:	9109      	str	r1, [sp, #36]	; 0x24
 800d07a:	920b      	str	r2, [sp, #44]	; 0x2c
 800d07c:	9a07      	ldr	r2, [sp, #28]
 800d07e:	eb03 0902 	add.w	r9, r3, r2
 800d082:	f1ab 0220 	sub.w	r2, fp, #32
 800d086:	4599      	cmp	r9, r3
 800d088:	9206      	str	r2, [sp, #24]
 800d08a:	f240 80db 	bls.w	800d244 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800d08e:	469e      	mov	lr, r3
 800d090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d092:	f108 33ff 	add.w	r3, r8, #4294967295
 800d096:	9303      	str	r3, [sp, #12]
 800d098:	9b01      	ldr	r3, [sp, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f000 80b4 	beq.w	800d208 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800d0a0:	9b04      	ldr	r3, [sp, #16]
 800d0a2:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800d268 <forward_lite_dense_if32of32wf32_lut4+0x250>
 800d0a6:	18d4      	adds	r4, r2, r3
 800d0a8:	465b      	mov	r3, fp
 800d0aa:	7816      	ldrb	r6, [r2, #0]
 800d0ac:	3204      	adds	r2, #4
 800d0ae:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
 800d0b2:	3320      	adds	r3, #32
 800d0b4:	f006 070f 	and.w	r7, r6, #15
 800d0b8:	0936      	lsrs	r6, r6, #4
 800d0ba:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 800d0be:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800d0c2:	ed13 4a10 	vldr	s8, [r3, #-64]	; 0xffffffc0
 800d0c6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800d0ca:	ed53 3a0e 	vldr	s7, [r3, #-56]	; 0xffffffc8
 800d0ce:	edd7 7a00 	vldr	s15, [r7]
 800d0d2:	ed96 3a00 	vldr	s6, [r6]
 800d0d6:	092e      	lsrs	r6, r5, #4
 800d0d8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800d0dc:	f005 050f 	and.w	r5, r5, #15
 800d0e0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800d0e4:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800d0e8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800d0ec:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800d0f0:	eee3 7a04 	vfma.f32	s15, s6, s8
 800d0f4:	ed96 3a00 	vldr	s6, [r6]
 800d0f8:	ed95 4a00 	vldr	s8, [r5]
 800d0fc:	090d      	lsrs	r5, r1, #4
 800d0fe:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 800d102:	f001 010f 	and.w	r1, r1, #15
 800d106:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800d10a:	ed13 6a0b 	vldr	s12, [r3, #-44]	; 0xffffffd4
 800d10e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d112:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800d116:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800d11a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d11e:	eee4 7a05 	vfma.f32	s15, s8, s10
 800d122:	ed95 4a00 	vldr	s8, [r5]
 800d126:	ed91 5a00 	vldr	s10, [r1]
 800d12a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800d12e:	42a2      	cmp	r2, r4
 800d130:	ea4f 1511 	mov.w	r5, r1, lsr #4
 800d134:	f001 010f 	and.w	r1, r1, #15
 800d138:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d13c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800d140:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d144:	eee5 7a06 	vfma.f32	s15, s10, s12
 800d148:	ed95 5a00 	vldr	s10, [r5]
 800d14c:	ed91 6a00 	vldr	s12, [r1]
 800d150:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d154:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d15c:	d1a5      	bne.n	800d0aa <forward_lite_dense_if32of32wf32_lut4+0x92>
 800d15e:	4656      	mov	r6, sl
 800d160:	4546      	cmp	r6, r8
 800d162:	d257      	bcs.n	800d214 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	f106 0208 	add.w	r2, r6, #8
 800d16a:	1e61      	subs	r1, r4, #1
 800d16c:	1b9d      	subs	r5, r3, r6
 800d16e:	08ef      	lsrs	r7, r5, #3
 800d170:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 800d174:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d178:	3208      	adds	r2, #8
 800d17a:	ed52 5a03 	vldr	s11, [r2, #-12]
 800d17e:	f003 0c0f 	and.w	ip, r3, #15
 800d182:	091b      	lsrs	r3, r3, #4
 800d184:	ed52 6a04 	vldr	s13, [r2, #-16]
 800d188:	42a9      	cmp	r1, r5
 800d18a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800d18e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d192:	eddc 7a00 	vldr	s15, [ip]
 800d196:	ed93 6a00 	vldr	s12, [r3]
 800d19a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d19e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d1a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d1a6:	d1e5      	bne.n	800d174 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 800d1a8:	3701      	adds	r7, #1
 800d1aa:	19e2      	adds	r2, r4, r7
 800d1ac:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800d1b0:	9b02      	ldr	r3, [sp, #8]
 800d1b2:	b30b      	cbz	r3, 800d1f8 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 800d1b4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d1b8:	edd6 7a00 	vldr	s15, [r6]
 800d1bc:	091b      	lsrs	r3, r3, #4
 800d1be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d1c2:	edd3 6a00 	vldr	s13, [r3]
 800d1c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d1ca:	ecae 7a01 	vstmia	lr!, {s14}
 800d1ce:	45f1      	cmp	r9, lr
 800d1d0:	f63f af62 	bhi.w	800d098 <forward_lite_dense_if32of32wf32_lut4+0x80>
 800d1d4:	9b05      	ldr	r3, [sp, #20]
 800d1d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1d8:	1899      	adds	r1, r3, r2
 800d1da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1dc:	b9e3      	cbnz	r3, 800d218 <forward_lite_dense_if32of32wf32_lut4+0x200>
 800d1de:	9b08      	ldr	r3, [sp, #32]
 800d1e0:	428b      	cmp	r3, r1
 800d1e2:	d92c      	bls.n	800d23e <forward_lite_dense_if32of32wf32_lut4+0x226>
 800d1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e6:	4498      	add	r8, r3
 800d1e8:	449a      	add	sl, r3
 800d1ea:	449b      	add	fp, r3
 800d1ec:	9b05      	ldr	r3, [sp, #20]
 800d1ee:	4599      	cmp	r9, r3
 800d1f0:	d92a      	bls.n	800d248 <forward_lite_dense_if32of32wf32_lut4+0x230>
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	9105      	str	r1, [sp, #20]
 800d1f6:	e741      	b.n	800d07c <forward_lite_dense_if32of32wf32_lut4+0x64>
 800d1f8:	ecae 7a01 	vstmia	lr!, {s14}
 800d1fc:	45f1      	cmp	r9, lr
 800d1fe:	d9e9      	bls.n	800d1d4 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 800d200:	9b01      	ldr	r3, [sp, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	f47f af4c 	bne.w	800d0a0 <forward_lite_dense_if32of32wf32_lut4+0x88>
 800d208:	9e06      	ldr	r6, [sp, #24]
 800d20a:	4614      	mov	r4, r2
 800d20c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800d268 <forward_lite_dense_if32of32wf32_lut4+0x250>
 800d210:	4546      	cmp	r6, r8
 800d212:	d3a7      	bcc.n	800d164 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 800d214:	4622      	mov	r2, r4
 800d216:	e7cb      	b.n	800d1b0 <forward_lite_dense_if32of32wf32_lut4+0x198>
 800d218:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d0df      	beq.n	800d1de <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 800d21e:	9b07      	ldr	r3, [sp, #28]
 800d220:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d222:	1acb      	subs	r3, r1, r3
 800d224:	edd3 7a00 	vldr	s15, [r3]
 800d228:	ecb2 7a01 	vldmia	r2!, {s14}
 800d22c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d230:	ece3 7a01 	vstmia	r3!, {s15}
 800d234:	428b      	cmp	r3, r1
 800d236:	d1f5      	bne.n	800d224 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 800d238:	9b08      	ldr	r3, [sp, #32]
 800d23a:	428b      	cmp	r3, r1
 800d23c:	d8d2      	bhi.n	800d1e4 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 800d23e:	b00d      	add	sp, #52	; 0x34
 800d240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d244:	4619      	mov	r1, r3
 800d246:	e7c8      	b.n	800d1da <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800d248:	9b07      	ldr	r3, [sp, #28]
 800d24a:	1acb      	subs	r3, r1, r3
 800d24c:	461a      	mov	r2, r3
 800d24e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d250:	ed92 7a00 	vldr	s14, [r2]
 800d254:	ecf0 7a01 	vldmia	r0!, {s15}
 800d258:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d25c:	ece2 7a01 	vstmia	r2!, {s15}
 800d260:	428a      	cmp	r2, r1
 800d262:	d1f5      	bne.n	800d250 <forward_lite_dense_if32of32wf32_lut4+0x238>
 800d264:	e7f2      	b.n	800d24c <forward_lite_dense_if32of32wf32_lut4+0x234>
 800d266:	bf00      	nop
 800d268:	00000000 	.word	0x00000000

0800d26c <forward_lite_dense_if32of32wf32_lut8>:
 800d26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d270:	b091      	sub	sp, #68	; 0x44
 800d272:	4699      	mov	r9, r3
 800d274:	468b      	mov	fp, r1
 800d276:	920e      	str	r2, [sp, #56]	; 0x38
 800d278:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800d27a:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800d27e:	9003      	str	r0, [sp, #12]
 800d280:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 800d284:	fb02 f303 	mul.w	r3, r2, r3
 800d288:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d28c:	930c      	str	r3, [sp, #48]	; 0x30
 800d28e:	b134      	cbz	r4, 800d29e <forward_lite_dense_if32of32wf32_lut8+0x32>
 800d290:	4648      	mov	r0, r9
 800d292:	46a1      	mov	r9, r4
 800d294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d298:	4621      	mov	r1, r4
 800d29a:	f000 fa97 	bl	800d7cc <st_int8_copy>
 800d29e:	9b03      	ldr	r3, [sp, #12]
 800d2a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	f080 8084 	bcs.w	800d3b0 <forward_lite_dense_if32of32wf32_lut8+0x144>
 800d2a8:	4bb7      	ldr	r3, [pc, #732]	; (800d588 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 800d2aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d2ac:	4443      	add	r3, r8
 800d2ae:	9d03      	ldr	r5, [sp, #12]
 800d2b0:	0092      	lsls	r2, r2, #2
 800d2b2:	eddf 3ab6 	vldr	s7, [pc, #728]	; 800d58c <forward_lite_dense_if32of32wf32_lut8+0x320>
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d2ba:	f103 0120 	add.w	r1, r3, #32
 800d2be:	930d      	str	r3, [sp, #52]	; 0x34
 800d2c0:	445b      	add	r3, fp
 800d2c2:	920f      	str	r2, [sp, #60]	; 0x3c
 800d2c4:	9105      	str	r1, [sp, #20]
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	eb0b 0301 	add.w	r3, fp, r1
 800d2cc:	469a      	mov	sl, r3
 800d2ce:	469e      	mov	lr, r3
 800d2d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2d2:	eb05 0c03 	add.w	ip, r5, r3
 800d2d6:	45ac      	cmp	ip, r5
 800d2d8:	d952      	bls.n	800d380 <forward_lite_dense_if32of32wf32_lut8+0x114>
 800d2da:	9800      	ldr	r0, [sp, #0]
 800d2dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2de:	f100 011f 	add.w	r1, r0, #31
 800d2e2:	eba0 020b 	sub.w	r2, r0, fp
 800d2e6:	445b      	add	r3, fp
 800d2e8:	9101      	str	r1, [sp, #4]
 800d2ea:	eba1 010b 	sub.w	r1, r1, fp
 800d2ee:	0952      	lsrs	r2, r2, #5
 800d2f0:	9306      	str	r3, [sp, #24]
 800d2f2:	0889      	lsrs	r1, r1, #2
 800d2f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2f6:	3101      	adds	r1, #1
 800d2f8:	9102      	str	r1, [sp, #8]
 800d2fa:	1c51      	adds	r1, r2, #1
 800d2fc:	00d2      	lsls	r2, r2, #3
 800d2fe:	3210      	adds	r2, #16
 800d300:	920a      	str	r2, [sp, #40]	; 0x28
 800d302:	00ca      	lsls	r2, r1, #3
 800d304:	9208      	str	r2, [sp, #32]
 800d306:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 800d30a:	9209      	str	r2, [sp, #36]	; 0x24
 800d30c:	1f02      	subs	r2, r0, #4
 800d30e:	9204      	str	r2, [sp, #16]
 800d310:	f10b 0204 	add.w	r2, fp, #4
 800d314:	9207      	str	r2, [sp, #28]
 800d316:	f1b8 0f07 	cmp.w	r8, #7
 800d31a:	d84c      	bhi.n	800d3b6 <forward_lite_dense_if32of32wf32_lut8+0x14a>
 800d31c:	45d3      	cmp	fp, sl
 800d31e:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800d58c <forward_lite_dense_if32of32wf32_lut8+0x320>
 800d322:	d20f      	bcs.n	800d344 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800d324:	4659      	mov	r1, fp
 800d326:	4618      	mov	r0, r3
 800d328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d32c:	ecf1 7a01 	vldmia	r1!, {s15}
 800d330:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800d334:	4551      	cmp	r1, sl
 800d336:	edd2 6a00 	vldr	s13, [r2]
 800d33a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d33e:	d3f3      	bcc.n	800d328 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 800d340:	9a02      	ldr	r2, [sp, #8]
 800d342:	4413      	add	r3, r2
 800d344:	eca5 7a01 	vstmia	r5!, {s14}
 800d348:	45ac      	cmp	ip, r5
 800d34a:	d8e4      	bhi.n	800d316 <forward_lite_dense_if32of32wf32_lut8+0xaa>
 800d34c:	9b03      	ldr	r3, [sp, #12]
 800d34e:	46f3      	mov	fp, lr
 800d350:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d352:	1899      	adds	r1, r3, r2
 800d354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d356:	b9c3      	cbnz	r3, 800d38a <forward_lite_dense_if32of32wf32_lut8+0x11e>
 800d358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d35a:	428b      	cmp	r3, r1
 800d35c:	d928      	bls.n	800d3b0 <forward_lite_dense_if32of32wf32_lut8+0x144>
 800d35e:	9b00      	ldr	r3, [sp, #0]
 800d360:	9a05      	ldr	r2, [sp, #20]
 800d362:	4413      	add	r3, r2
 800d364:	4492      	add	sl, r2
 800d366:	9300      	str	r3, [sp, #0]
 800d368:	9b03      	ldr	r3, [sp, #12]
 800d36a:	459c      	cmp	ip, r3
 800d36c:	f240 821e 	bls.w	800d7ac <forward_lite_dense_if32of32wf32_lut8+0x540>
 800d370:	460d      	mov	r5, r1
 800d372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d374:	4496      	add	lr, r2
 800d376:	9103      	str	r1, [sp, #12]
 800d378:	eb05 0c03 	add.w	ip, r5, r3
 800d37c:	45ac      	cmp	ip, r5
 800d37e:	d8ac      	bhi.n	800d2da <forward_lite_dense_if32of32wf32_lut8+0x6e>
 800d380:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d382:	4629      	mov	r1, r5
 800d384:	46f3      	mov	fp, lr
 800d386:	2b00      	cmp	r3, #0
 800d388:	d0e6      	beq.n	800d358 <forward_lite_dense_if32of32wf32_lut8+0xec>
 800d38a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d0e3      	beq.n	800d358 <forward_lite_dense_if32of32wf32_lut8+0xec>
 800d390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d392:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d394:	1acb      	subs	r3, r1, r3
 800d396:	edd3 7a00 	vldr	s15, [r3]
 800d39a:	ecb2 7a01 	vldmia	r2!, {s14}
 800d39e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3a2:	ece3 7a01 	vstmia	r3!, {s15}
 800d3a6:	428b      	cmp	r3, r1
 800d3a8:	d1f5      	bne.n	800d396 <forward_lite_dense_if32of32wf32_lut8+0x12a>
 800d3aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3ac:	428b      	cmp	r3, r1
 800d3ae:	d8d6      	bhi.n	800d35e <forward_lite_dense_if32of32wf32_lut8+0xf2>
 800d3b0:	b011      	add	sp, #68	; 0x44
 800d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b6:	f003 0203 	and.w	r2, r3, #3
 800d3ba:	2a02      	cmp	r2, #2
 800d3bc:	f000 81ee 	beq.w	800d79c <forward_lite_dense_if32of32wf32_lut8+0x530>
 800d3c0:	2a03      	cmp	r2, #3
 800d3c2:	f000 80e5 	beq.w	800d590 <forward_lite_dense_if32of32wf32_lut8+0x324>
 800d3c6:	2a01      	cmp	r2, #1
 800d3c8:	f000 81d2 	beq.w	800d770 <forward_lite_dense_if32of32wf32_lut8+0x504>
 800d3cc:	9a06      	ldr	r2, [sp, #24]
 800d3ce:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800d58c <forward_lite_dense_if32of32wf32_lut8+0x320>
 800d3d2:	4593      	cmp	fp, r2
 800d3d4:	f200 81e8 	bhi.w	800d7a8 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 800d3d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d3da:	f103 0208 	add.w	r2, r3, #8
 800d3de:	f10b 0120 	add.w	r1, fp, #32
 800d3e2:	18c4      	adds	r4, r0, r3
 800d3e4:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800d3e8:	3208      	adds	r2, #8
 800d3ea:	ed51 2a07 	vldr	s5, [r1, #-28]	; 0xffffffe4
 800d3ee:	3120      	adds	r1, #32
 800d3f0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d3f4:	ed11 3a10 	vldr	s6, [r1, #-64]	; 0xffffffc0
 800d3f8:	ed11 4a0e 	vldr	s8, [r1, #-56]	; 0xffffffc8
 800d3fc:	edd0 7a00 	vldr	s15, [r0]
 800d400:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800d404:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800d408:	ed51 4a0d 	vldr	s9, [r1, #-52]	; 0xffffffcc
 800d40c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d410:	ed11 5a0c 	vldr	s10, [r1, #-48]	; 0xffffffd0
 800d414:	ed51 5a0b 	vldr	s11, [r1, #-44]	; 0xffffffd4
 800d418:	edd0 2a00 	vldr	s5, [r0]
 800d41c:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800d420:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d424:	ed11 6a0a 	vldr	s12, [r1, #-40]	; 0xffffffd8
 800d428:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d42c:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800d430:	ed90 3a00 	vldr	s6, [r0]
 800d434:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800d438:	eee3 7a04 	vfma.f32	s15, s6, s8
 800d43c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d440:	ed90 4a00 	vldr	s8, [r0]
 800d444:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800d448:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d44c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d450:	edd0 4a00 	vldr	s9, [r0]
 800d454:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800d458:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d45c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d460:	ed90 5a00 	vldr	s10, [r0]
 800d464:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800d468:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d46c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d470:	edd0 5a00 	vldr	s11, [r0]
 800d474:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800d478:	42a2      	cmp	r2, r4
 800d47a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d47e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d482:	ed90 6a00 	vldr	s12, [r0]
 800d486:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d48a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d48e:	d1a9      	bne.n	800d3e4 <forward_lite_dense_if32of32wf32_lut8+0x178>
 800d490:	9a08      	ldr	r2, [sp, #32]
 800d492:	4413      	add	r3, r2
 800d494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d496:	4572      	cmp	r2, lr
 800d498:	f4bf af54 	bcs.w	800d344 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800d49c:	7819      	ldrb	r1, [r3, #0]
 800d49e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d4a2:	edd1 7a00 	vldr	s15, [r1]
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	ecf1 6a01 	vldmia	r1!, {s13}
 800d4ac:	458a      	cmp	sl, r1
 800d4ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d4b2:	d963      	bls.n	800d57c <forward_lite_dense_if32of32wf32_lut8+0x310>
 800d4b4:	7859      	ldrb	r1, [r3, #1]
 800d4b6:	edd2 6a01 	vldr	s13, [r2, #4]
 800d4ba:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d4be:	edd1 7a00 	vldr	s15, [r1]
 800d4c2:	f102 0108 	add.w	r1, r2, #8
 800d4c6:	458a      	cmp	sl, r1
 800d4c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d4cc:	d956      	bls.n	800d57c <forward_lite_dense_if32of32wf32_lut8+0x310>
 800d4ce:	7899      	ldrb	r1, [r3, #2]
 800d4d0:	edd2 6a02 	vldr	s13, [r2, #8]
 800d4d4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d4d8:	edd1 7a00 	vldr	s15, [r1]
 800d4dc:	f102 010c 	add.w	r1, r2, #12
 800d4e0:	458a      	cmp	sl, r1
 800d4e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d4e6:	d949      	bls.n	800d57c <forward_lite_dense_if32of32wf32_lut8+0x310>
 800d4e8:	78d9      	ldrb	r1, [r3, #3]
 800d4ea:	edd2 6a03 	vldr	s13, [r2, #12]
 800d4ee:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d4f2:	edd1 7a00 	vldr	s15, [r1]
 800d4f6:	f102 0110 	add.w	r1, r2, #16
 800d4fa:	458a      	cmp	sl, r1
 800d4fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d500:	d93c      	bls.n	800d57c <forward_lite_dense_if32of32wf32_lut8+0x310>
 800d502:	7919      	ldrb	r1, [r3, #4]
 800d504:	edd2 6a04 	vldr	s13, [r2, #16]
 800d508:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d50c:	edd1 7a00 	vldr	s15, [r1]
 800d510:	f102 0114 	add.w	r1, r2, #20
 800d514:	458a      	cmp	sl, r1
 800d516:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d51a:	d92f      	bls.n	800d57c <forward_lite_dense_if32of32wf32_lut8+0x310>
 800d51c:	7959      	ldrb	r1, [r3, #5]
 800d51e:	edd2 6a05 	vldr	s13, [r2, #20]
 800d522:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d526:	edd1 7a00 	vldr	s15, [r1]
 800d52a:	f102 0118 	add.w	r1, r2, #24
 800d52e:	458a      	cmp	sl, r1
 800d530:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d534:	d922      	bls.n	800d57c <forward_lite_dense_if32of32wf32_lut8+0x310>
 800d536:	7999      	ldrb	r1, [r3, #6]
 800d538:	edd2 6a06 	vldr	s13, [r2, #24]
 800d53c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d540:	edd1 7a00 	vldr	s15, [r1]
 800d544:	f102 011c 	add.w	r1, r2, #28
 800d548:	458a      	cmp	sl, r1
 800d54a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d54e:	d915      	bls.n	800d57c <forward_lite_dense_if32of32wf32_lut8+0x310>
 800d550:	79d9      	ldrb	r1, [r3, #7]
 800d552:	edd2 6a07 	vldr	s13, [r2, #28]
 800d556:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d55a:	edd1 7a00 	vldr	s15, [r1]
 800d55e:	f102 0120 	add.w	r1, r2, #32
 800d562:	458a      	cmp	sl, r1
 800d564:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d568:	d908      	bls.n	800d57c <forward_lite_dense_if32of32wf32_lut8+0x310>
 800d56a:	7a19      	ldrb	r1, [r3, #8]
 800d56c:	edd2 7a08 	vldr	s15, [r2, #32]
 800d570:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d574:	edd1 6a00 	vldr	s13, [r1]
 800d578:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d57c:	9901      	ldr	r1, [sp, #4]
 800d57e:	1a8a      	subs	r2, r1, r2
 800d580:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 800d584:	1c53      	adds	r3, r2, #1
 800d586:	e6dd      	b.n	800d344 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800d588:	3ffffff8 	.word	0x3ffffff8
 800d58c:	00000000 	.word	0x00000000
 800d590:	eeb0 7a63 	vmov.f32	s14, s7
 800d594:	465a      	mov	r2, fp
 800d596:	461f      	mov	r7, r3
 800d598:	4610      	mov	r0, r2
 800d59a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d59e:	ecf0 7a01 	vldmia	r0!, {s15}
 800d5a2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d5a6:	edd1 6a00 	vldr	s13, [r1]
 800d5aa:	9900      	ldr	r1, [sp, #0]
 800d5ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d5b0:	4288      	cmp	r0, r1
 800d5b2:	f200 80f7 	bhi.w	800d7a4 <forward_lite_dense_if32of32wf32_lut8+0x538>
 800d5b6:	9904      	ldr	r1, [sp, #16]
 800d5b8:	f103 0411 	add.w	r4, r3, #17
 800d5bc:	3309      	adds	r3, #9
 800d5be:	1a8e      	subs	r6, r1, r2
 800d5c0:	3224      	adds	r2, #36	; 0x24
 800d5c2:	0976      	lsrs	r6, r6, #5
 800d5c4:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d5c8:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 800d5cc:	3308      	adds	r3, #8
 800d5ce:	ed52 2a07 	vldr	s5, [r2, #-28]	; 0xffffffe4
 800d5d2:	3220      	adds	r2, #32
 800d5d4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d5d8:	ed12 3a10 	vldr	s6, [r2, #-64]	; 0xffffffc0
 800d5dc:	ed12 4a0e 	vldr	s8, [r2, #-56]	; 0xffffffc8
 800d5e0:	edd1 7a00 	vldr	s15, [r1]
 800d5e4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800d5e8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800d5ec:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800d5f0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d5f4:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 800d5f8:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 800d5fc:	edd1 2a00 	vldr	s5, [r1]
 800d600:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 800d604:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d608:	ed12 6a0a 	vldr	s12, [r2, #-40]	; 0xffffffd8
 800d60c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d610:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800d614:	ed91 3a00 	vldr	s6, [r1]
 800d618:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 800d61c:	eee3 7a04 	vfma.f32	s15, s6, s8
 800d620:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d624:	ed91 4a00 	vldr	s8, [r1]
 800d628:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 800d62c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d630:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d634:	edd1 4a00 	vldr	s9, [r1]
 800d638:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 800d63c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d640:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d644:	ed91 5a00 	vldr	s10, [r1]
 800d648:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 800d64c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d650:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d654:	edd1 5a00 	vldr	s11, [r1]
 800d658:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 800d65c:	42a3      	cmp	r3, r4
 800d65e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d662:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d666:	ed91 6a00 	vldr	s12, [r1]
 800d66a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d66e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d672:	d1a9      	bne.n	800d5c8 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 800d674:	3601      	adds	r6, #1
 800d676:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800d67a:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800d67e:	4550      	cmp	r0, sl
 800d680:	f4bf ae60 	bcs.w	800d344 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800d684:	781a      	ldrb	r2, [r3, #0]
 800d686:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800d68a:	edd2 7a00 	vldr	s15, [r2]
 800d68e:	4602      	mov	r2, r0
 800d690:	ecf2 6a01 	vldmia	r2!, {s13}
 800d694:	4592      	cmp	sl, r2
 800d696:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d69a:	d963      	bls.n	800d764 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800d69c:	785a      	ldrb	r2, [r3, #1]
 800d69e:	edd0 6a01 	vldr	s13, [r0, #4]
 800d6a2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800d6a6:	edd2 7a00 	vldr	s15, [r2]
 800d6aa:	f100 0208 	add.w	r2, r0, #8
 800d6ae:	4592      	cmp	sl, r2
 800d6b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d6b4:	d956      	bls.n	800d764 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800d6b6:	789a      	ldrb	r2, [r3, #2]
 800d6b8:	edd0 6a02 	vldr	s13, [r0, #8]
 800d6bc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800d6c0:	edd2 7a00 	vldr	s15, [r2]
 800d6c4:	f100 020c 	add.w	r2, r0, #12
 800d6c8:	4592      	cmp	sl, r2
 800d6ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d6ce:	d949      	bls.n	800d764 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800d6d0:	78da      	ldrb	r2, [r3, #3]
 800d6d2:	edd0 6a03 	vldr	s13, [r0, #12]
 800d6d6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800d6da:	edd2 7a00 	vldr	s15, [r2]
 800d6de:	f100 0210 	add.w	r2, r0, #16
 800d6e2:	4592      	cmp	sl, r2
 800d6e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d6e8:	d93c      	bls.n	800d764 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800d6ea:	791a      	ldrb	r2, [r3, #4]
 800d6ec:	edd0 6a04 	vldr	s13, [r0, #16]
 800d6f0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800d6f4:	edd2 7a00 	vldr	s15, [r2]
 800d6f8:	f100 0214 	add.w	r2, r0, #20
 800d6fc:	4592      	cmp	sl, r2
 800d6fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d702:	d92f      	bls.n	800d764 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800d704:	795a      	ldrb	r2, [r3, #5]
 800d706:	edd0 6a05 	vldr	s13, [r0, #20]
 800d70a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800d70e:	edd2 7a00 	vldr	s15, [r2]
 800d712:	f100 0218 	add.w	r2, r0, #24
 800d716:	4596      	cmp	lr, r2
 800d718:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d71c:	d922      	bls.n	800d764 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800d71e:	799a      	ldrb	r2, [r3, #6]
 800d720:	edd0 6a06 	vldr	s13, [r0, #24]
 800d724:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800d728:	edd2 7a00 	vldr	s15, [r2]
 800d72c:	f100 021c 	add.w	r2, r0, #28
 800d730:	4596      	cmp	lr, r2
 800d732:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d736:	d915      	bls.n	800d764 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800d738:	79da      	ldrb	r2, [r3, #7]
 800d73a:	edd0 6a07 	vldr	s13, [r0, #28]
 800d73e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800d742:	edd2 7a00 	vldr	s15, [r2]
 800d746:	f100 0220 	add.w	r2, r0, #32
 800d74a:	4596      	cmp	lr, r2
 800d74c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d750:	d908      	bls.n	800d764 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800d752:	7a1a      	ldrb	r2, [r3, #8]
 800d754:	edd0 7a08 	vldr	s15, [r0, #32]
 800d758:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800d75c:	edd2 6a00 	vldr	s13, [r2]
 800d760:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d764:	9a01      	ldr	r2, [sp, #4]
 800d766:	1a10      	subs	r0, r2, r0
 800d768:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	e5e9      	b.n	800d344 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800d770:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d774:	eddb 7a00 	vldr	s15, [fp]
 800d778:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d77c:	9a07      	ldr	r2, [sp, #28]
 800d77e:	ed91 7a00 	vldr	s14, [r1]
 800d782:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d786:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d78a:	ecf2 7a01 	vldmia	r2!, {s15}
 800d78e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800d792:	edd1 6a00 	vldr	s13, [r1]
 800d796:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d79a:	e6fc      	b.n	800d596 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 800d79c:	eeb0 7a63 	vmov.f32	s14, s7
 800d7a0:	465a      	mov	r2, fp
 800d7a2:	e7f0      	b.n	800d786 <forward_lite_dense_if32of32wf32_lut8+0x51a>
 800d7a4:	463b      	mov	r3, r7
 800d7a6:	e76a      	b.n	800d67e <forward_lite_dense_if32of32wf32_lut8+0x412>
 800d7a8:	465a      	mov	r2, fp
 800d7aa:	e674      	b.n	800d496 <forward_lite_dense_if32of32wf32_lut8+0x22a>
 800d7ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7ae:	1acb      	subs	r3, r1, r3
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d7b4:	ed92 7a00 	vldr	s14, [r2]
 800d7b8:	ecf0 7a01 	vldmia	r0!, {s15}
 800d7bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d7c0:	ece2 7a01 	vstmia	r2!, {s15}
 800d7c4:	4291      	cmp	r1, r2
 800d7c6:	d1f5      	bne.n	800d7b4 <forward_lite_dense_if32of32wf32_lut8+0x548>
 800d7c8:	e7f2      	b.n	800d7b0 <forward_lite_dense_if32of32wf32_lut8+0x544>
 800d7ca:	bf00      	nop

0800d7cc <st_int8_copy>:
 800d7cc:	4288      	cmp	r0, r1
 800d7ce:	d010      	beq.n	800d7f2 <st_int8_copy+0x26>
 800d7d0:	b17a      	cbz	r2, 800d7f2 <st_int8_copy+0x26>
 800d7d2:	4288      	cmp	r0, r1
 800d7d4:	eb00 0302 	add.w	r3, r0, r2
 800d7d8:	d20c      	bcs.n	800d7f4 <st_int8_copy+0x28>
 800d7da:	428b      	cmp	r3, r1
 800d7dc:	d90a      	bls.n	800d7f4 <st_int8_copy+0x28>
 800d7de:	4283      	cmp	r3, r0
 800d7e0:	440a      	add	r2, r1
 800d7e2:	d906      	bls.n	800d7f2 <st_int8_copy+0x26>
 800d7e4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800d7e8:	4283      	cmp	r3, r0
 800d7ea:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800d7ee:	d1f9      	bne.n	800d7e4 <st_int8_copy+0x18>
 800d7f0:	4770      	bx	lr
 800d7f2:	4770      	bx	lr
 800d7f4:	078b      	lsls	r3, r1, #30
 800d7f6:	d102      	bne.n	800d7fe <st_int8_copy+0x32>
 800d7f8:	e008      	b.n	800d80c <st_int8_copy+0x40>
 800d7fa:	2a00      	cmp	r2, #0
 800d7fc:	d04c      	beq.n	800d898 <st_int8_copy+0xcc>
 800d7fe:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800d802:	3a01      	subs	r2, #1
 800d804:	f801 3b01 	strb.w	r3, [r1], #1
 800d808:	078b      	lsls	r3, r1, #30
 800d80a:	d1f6      	bne.n	800d7fa <st_int8_copy+0x2e>
 800d80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d810:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800d814:	d05d      	beq.n	800d8d2 <st_int8_copy+0x106>
 800d816:	ea41 0300 	orr.w	r3, r1, r0
 800d81a:	075b      	lsls	r3, r3, #29
 800d81c:	d13d      	bne.n	800d89a <st_int8_copy+0xce>
 800d81e:	f1be 0f01 	cmp.w	lr, #1
 800d822:	d03a      	beq.n	800d89a <st_int8_copy+0xce>
 800d824:	f100 0310 	add.w	r3, r0, #16
 800d828:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800d82c:	f101 0c10 	add.w	ip, r1, #16
 800d830:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800d834:	3310      	adds	r3, #16
 800d836:	f10c 0c10 	add.w	ip, ip, #16
 800d83a:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 800d83e:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 800d842:	4573      	cmp	r3, lr
 800d844:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800d848:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 800d84c:	d1f2      	bne.n	800d834 <st_int8_copy+0x68>
 800d84e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800d852:	4421      	add	r1, r4
 800d854:	4420      	add	r0, r4
 800d856:	f002 0203 	and.w	r2, r2, #3
 800d85a:	b16b      	cbz	r3, 800d878 <st_int8_copy+0xac>
 800d85c:	6804      	ldr	r4, [r0, #0]
 800d85e:	600c      	str	r4, [r1, #0]
 800d860:	1e5c      	subs	r4, r3, #1
 800d862:	d005      	beq.n	800d870 <st_int8_copy+0xa4>
 800d864:	6845      	ldr	r5, [r0, #4]
 800d866:	2c01      	cmp	r4, #1
 800d868:	604d      	str	r5, [r1, #4]
 800d86a:	d001      	beq.n	800d870 <st_int8_copy+0xa4>
 800d86c:	6884      	ldr	r4, [r0, #8]
 800d86e:	608c      	str	r4, [r1, #8]
 800d870:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d874:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800d878:	b162      	cbz	r2, 800d894 <st_int8_copy+0xc8>
 800d87a:	f990 3000 	ldrsb.w	r3, [r0]
 800d87e:	3a01      	subs	r2, #1
 800d880:	700b      	strb	r3, [r1, #0]
 800d882:	d007      	beq.n	800d894 <st_int8_copy+0xc8>
 800d884:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d888:	2a01      	cmp	r2, #1
 800d88a:	704b      	strb	r3, [r1, #1]
 800d88c:	d002      	beq.n	800d894 <st_int8_copy+0xc8>
 800d88e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800d892:	708b      	strb	r3, [r1, #2]
 800d894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d898:	4770      	bx	lr
 800d89a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800d89e:	460b      	mov	r3, r1
 800d8a0:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800d8a4:	4684      	mov	ip, r0
 800d8a6:	f8dc 8000 	ldr.w	r8, [ip]
 800d8aa:	3310      	adds	r3, #16
 800d8ac:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800d8b0:	f10c 0c10 	add.w	ip, ip, #16
 800d8b4:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800d8b8:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800d8bc:	f843 8c10 	str.w	r8, [r3, #-16]
 800d8c0:	f843 7c0c 	str.w	r7, [r3, #-12]
 800d8c4:	f843 6c08 	str.w	r6, [r3, #-8]
 800d8c8:	f843 5c04 	str.w	r5, [r3, #-4]
 800d8cc:	459e      	cmp	lr, r3
 800d8ce:	d1ea      	bne.n	800d8a6 <st_int8_copy+0xda>
 800d8d0:	e7bd      	b.n	800d84e <st_int8_copy+0x82>
 800d8d2:	0893      	lsrs	r3, r2, #2
 800d8d4:	f002 0203 	and.w	r2, r2, #3
 800d8d8:	e7bf      	b.n	800d85a <st_int8_copy+0x8e>
 800d8da:	bf00      	nop

0800d8dc <ai_array_to_buffer_fmt>:
 800d8dc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	d053      	beq.n	800d98c <ai_array_to_buffer_fmt+0xb0>
 800d8e4:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800d8e8:	4a2b      	ldr	r2, [pc, #172]	; (800d998 <ai_array_to_buffer_fmt+0xbc>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d010      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d8ee:	dc21      	bgt.n	800d934 <ai_array_to_buffer_fmt+0x58>
 800d8f0:	4a2a      	ldr	r2, [pc, #168]	; (800d99c <ai_array_to_buffer_fmt+0xc0>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d00c      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d8f6:	dd0f      	ble.n	800d918 <ai_array_to_buffer_fmt+0x3c>
 800d8f8:	4a29      	ldr	r2, [pc, #164]	; (800d9a0 <ai_array_to_buffer_fmt+0xc4>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d008      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d8fe:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800d902:	4293      	cmp	r3, r2
 800d904:	d004      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d906:	4a27      	ldr	r2, [pc, #156]	; (800d9a4 <ai_array_to_buffer_fmt+0xc8>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	bf0c      	ite	eq
 800d90c:	4613      	moveq	r3, r2
 800d90e:	2340      	movne	r3, #64	; 0x40
 800d910:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d914:	4318      	orrs	r0, r3
 800d916:	4770      	bx	lr
 800d918:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d0f7      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d920:	dd2a      	ble.n	800d978 <ai_array_to_buffer_fmt+0x9c>
 800d922:	4a21      	ldr	r2, [pc, #132]	; (800d9a8 <ai_array_to_buffer_fmt+0xcc>)
 800d924:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d928:	4293      	cmp	r3, r2
 800d92a:	bf0c      	ite	eq
 800d92c:	4613      	moveq	r3, r2
 800d92e:	2340      	movne	r3, #64	; 0x40
 800d930:	4318      	orrs	r0, r3
 800d932:	4770      	bx	lr
 800d934:	4a1d      	ldr	r2, [pc, #116]	; (800d9ac <ai_array_to_buffer_fmt+0xd0>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d0ea      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d93a:	dd0f      	ble.n	800d95c <ai_array_to_buffer_fmt+0x80>
 800d93c:	4a1c      	ldr	r2, [pc, #112]	; (800d9b0 <ai_array_to_buffer_fmt+0xd4>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d0e6      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d942:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800d946:	4293      	cmp	r3, r2
 800d948:	d0e2      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d94a:	4a1a      	ldr	r2, [pc, #104]	; (800d9b4 <ai_array_to_buffer_fmt+0xd8>)
 800d94c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d950:	4293      	cmp	r3, r2
 800d952:	bf0c      	ite	eq
 800d954:	4613      	moveq	r3, r2
 800d956:	2340      	movne	r3, #64	; 0x40
 800d958:	4318      	orrs	r0, r3
 800d95a:	4770      	bx	lr
 800d95c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800d960:	4293      	cmp	r3, r2
 800d962:	d0d5      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d964:	3207      	adds	r2, #7
 800d966:	4293      	cmp	r3, r2
 800d968:	d0d2      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d96a:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800d96e:	4293      	cmp	r3, r2
 800d970:	bf0c      	ite	eq
 800d972:	4613      	moveq	r3, r2
 800d974:	2340      	movne	r3, #64	; 0x40
 800d976:	e7cb      	b.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d978:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d0c7      	beq.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d980:	3280      	adds	r2, #128	; 0x80
 800d982:	4293      	cmp	r3, r2
 800d984:	bf0c      	ite	eq
 800d986:	4613      	moveq	r3, r2
 800d988:	2340      	movne	r3, #64	; 0x40
 800d98a:	e7c1      	b.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d98c:	4b0a      	ldr	r3, [pc, #40]	; (800d9b8 <ai_array_to_buffer_fmt+0xdc>)
 800d98e:	4003      	ands	r3, r0
 800d990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d994:	e7bc      	b.n	800d910 <ai_array_to_buffer_fmt+0x34>
 800d996:	bf00      	nop
 800d998:	00840040 	.word	0x00840040
 800d99c:	00040840 	.word	0x00040840
 800d9a0:	00041040 	.word	0x00041040
 800d9a4:	0004084f 	.word	0x0004084f
 800d9a8:	00040447 	.word	0x00040447
 800d9ac:	00840840 	.word	0x00840840
 800d9b0:	00841040 	.word	0x00841040
 800d9b4:	0084084f 	.word	0x0084084f
 800d9b8:	00803fff 	.word	0x00803fff

0800d9bc <ai_array_get_data_byte_size>:
 800d9bc:	b169      	cbz	r1, 800d9da <ai_array_get_data_byte_size+0x1e>
 800d9be:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d9c2:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d9c6:	fb03 f101 	mul.w	r1, r3, r1
 800d9ca:	1dcb      	adds	r3, r1, #7
 800d9cc:	f023 0307 	bic.w	r3, r3, #7
 800d9d0:	fa23 f000 	lsr.w	r0, r3, r0
 800d9d4:	3007      	adds	r0, #7
 800d9d6:	08c0      	lsrs	r0, r0, #3
 800d9d8:	4770      	bx	lr
 800d9da:	4608      	mov	r0, r1
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop

0800d9e0 <ai_version_get>:
 800d9e0:	0212      	lsls	r2, r2, #8
 800d9e2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d9e6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800d9ea:	4770      	bx	lr

0800d9ec <get_tensor_byte_size>:
 800d9ec:	b430      	push	{r4, r5}
 800d9ee:	6985      	ldr	r5, [r0, #24]
 800d9f0:	68c4      	ldr	r4, [r0, #12]
 800d9f2:	6941      	ldr	r1, [r0, #20]
 800d9f4:	4b06      	ldr	r3, [pc, #24]	; (800da10 <get_tensor_byte_size+0x24>)
 800d9f6:	6828      	ldr	r0, [r5, #0]
 800d9f8:	4a06      	ldr	r2, [pc, #24]	; (800da14 <get_tensor_byte_size+0x28>)
 800d9fa:	4003      	ands	r3, r0
 800d9fc:	68c9      	ldr	r1, [r1, #12]
 800d9fe:	68e0      	ldr	r0, [r4, #12]
 800da00:	4293      	cmp	r3, r2
 800da02:	fb01 f000 	mul.w	r0, r1, r0
 800da06:	d101      	bne.n	800da0c <get_tensor_byte_size+0x20>
 800da08:	3007      	adds	r0, #7
 800da0a:	08c0      	lsrs	r0, r0, #3
 800da0c:	bc30      	pop	{r4, r5}
 800da0e:	4770      	bx	lr
 800da10:	017fffff 	.word	0x017fffff
 800da14:	000400c0 	.word	0x000400c0

0800da18 <malloc>:
 800da18:	4b02      	ldr	r3, [pc, #8]	; (800da24 <malloc+0xc>)
 800da1a:	4601      	mov	r1, r0
 800da1c:	6818      	ldr	r0, [r3, #0]
 800da1e:	f000 b823 	b.w	800da68 <_malloc_r>
 800da22:	bf00      	nop
 800da24:	240007f4 	.word	0x240007f4

0800da28 <sbrk_aligned>:
 800da28:	b570      	push	{r4, r5, r6, lr}
 800da2a:	4e0e      	ldr	r6, [pc, #56]	; (800da64 <sbrk_aligned+0x3c>)
 800da2c:	460c      	mov	r4, r1
 800da2e:	6831      	ldr	r1, [r6, #0]
 800da30:	4605      	mov	r5, r0
 800da32:	b911      	cbnz	r1, 800da3a <sbrk_aligned+0x12>
 800da34:	f000 fe86 	bl	800e744 <_sbrk_r>
 800da38:	6030      	str	r0, [r6, #0]
 800da3a:	4621      	mov	r1, r4
 800da3c:	4628      	mov	r0, r5
 800da3e:	f000 fe81 	bl	800e744 <_sbrk_r>
 800da42:	1c43      	adds	r3, r0, #1
 800da44:	d00a      	beq.n	800da5c <sbrk_aligned+0x34>
 800da46:	1cc4      	adds	r4, r0, #3
 800da48:	f024 0403 	bic.w	r4, r4, #3
 800da4c:	42a0      	cmp	r0, r4
 800da4e:	d007      	beq.n	800da60 <sbrk_aligned+0x38>
 800da50:	1a21      	subs	r1, r4, r0
 800da52:	4628      	mov	r0, r5
 800da54:	f000 fe76 	bl	800e744 <_sbrk_r>
 800da58:	3001      	adds	r0, #1
 800da5a:	d101      	bne.n	800da60 <sbrk_aligned+0x38>
 800da5c:	f04f 34ff 	mov.w	r4, #4294967295
 800da60:	4620      	mov	r0, r4
 800da62:	bd70      	pop	{r4, r5, r6, pc}
 800da64:	240029c0 	.word	0x240029c0

0800da68 <_malloc_r>:
 800da68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da6c:	1ccd      	adds	r5, r1, #3
 800da6e:	f025 0503 	bic.w	r5, r5, #3
 800da72:	3508      	adds	r5, #8
 800da74:	2d0c      	cmp	r5, #12
 800da76:	bf38      	it	cc
 800da78:	250c      	movcc	r5, #12
 800da7a:	2d00      	cmp	r5, #0
 800da7c:	4607      	mov	r7, r0
 800da7e:	db01      	blt.n	800da84 <_malloc_r+0x1c>
 800da80:	42a9      	cmp	r1, r5
 800da82:	d905      	bls.n	800da90 <_malloc_r+0x28>
 800da84:	230c      	movs	r3, #12
 800da86:	603b      	str	r3, [r7, #0]
 800da88:	2600      	movs	r6, #0
 800da8a:	4630      	mov	r0, r6
 800da8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800db64 <_malloc_r+0xfc>
 800da94:	f000 f868 	bl	800db68 <__malloc_lock>
 800da98:	f8d8 3000 	ldr.w	r3, [r8]
 800da9c:	461c      	mov	r4, r3
 800da9e:	bb5c      	cbnz	r4, 800daf8 <_malloc_r+0x90>
 800daa0:	4629      	mov	r1, r5
 800daa2:	4638      	mov	r0, r7
 800daa4:	f7ff ffc0 	bl	800da28 <sbrk_aligned>
 800daa8:	1c43      	adds	r3, r0, #1
 800daaa:	4604      	mov	r4, r0
 800daac:	d155      	bne.n	800db5a <_malloc_r+0xf2>
 800daae:	f8d8 4000 	ldr.w	r4, [r8]
 800dab2:	4626      	mov	r6, r4
 800dab4:	2e00      	cmp	r6, #0
 800dab6:	d145      	bne.n	800db44 <_malloc_r+0xdc>
 800dab8:	2c00      	cmp	r4, #0
 800daba:	d048      	beq.n	800db4e <_malloc_r+0xe6>
 800dabc:	6823      	ldr	r3, [r4, #0]
 800dabe:	4631      	mov	r1, r6
 800dac0:	4638      	mov	r0, r7
 800dac2:	eb04 0903 	add.w	r9, r4, r3
 800dac6:	f000 fe3d 	bl	800e744 <_sbrk_r>
 800daca:	4581      	cmp	r9, r0
 800dacc:	d13f      	bne.n	800db4e <_malloc_r+0xe6>
 800dace:	6821      	ldr	r1, [r4, #0]
 800dad0:	1a6d      	subs	r5, r5, r1
 800dad2:	4629      	mov	r1, r5
 800dad4:	4638      	mov	r0, r7
 800dad6:	f7ff ffa7 	bl	800da28 <sbrk_aligned>
 800dada:	3001      	adds	r0, #1
 800dadc:	d037      	beq.n	800db4e <_malloc_r+0xe6>
 800dade:	6823      	ldr	r3, [r4, #0]
 800dae0:	442b      	add	r3, r5
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	f8d8 3000 	ldr.w	r3, [r8]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d038      	beq.n	800db5e <_malloc_r+0xf6>
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	42a2      	cmp	r2, r4
 800daf0:	d12b      	bne.n	800db4a <_malloc_r+0xe2>
 800daf2:	2200      	movs	r2, #0
 800daf4:	605a      	str	r2, [r3, #4]
 800daf6:	e00f      	b.n	800db18 <_malloc_r+0xb0>
 800daf8:	6822      	ldr	r2, [r4, #0]
 800dafa:	1b52      	subs	r2, r2, r5
 800dafc:	d41f      	bmi.n	800db3e <_malloc_r+0xd6>
 800dafe:	2a0b      	cmp	r2, #11
 800db00:	d917      	bls.n	800db32 <_malloc_r+0xca>
 800db02:	1961      	adds	r1, r4, r5
 800db04:	42a3      	cmp	r3, r4
 800db06:	6025      	str	r5, [r4, #0]
 800db08:	bf18      	it	ne
 800db0a:	6059      	strne	r1, [r3, #4]
 800db0c:	6863      	ldr	r3, [r4, #4]
 800db0e:	bf08      	it	eq
 800db10:	f8c8 1000 	streq.w	r1, [r8]
 800db14:	5162      	str	r2, [r4, r5]
 800db16:	604b      	str	r3, [r1, #4]
 800db18:	4638      	mov	r0, r7
 800db1a:	f104 060b 	add.w	r6, r4, #11
 800db1e:	f000 f829 	bl	800db74 <__malloc_unlock>
 800db22:	f026 0607 	bic.w	r6, r6, #7
 800db26:	1d23      	adds	r3, r4, #4
 800db28:	1af2      	subs	r2, r6, r3
 800db2a:	d0ae      	beq.n	800da8a <_malloc_r+0x22>
 800db2c:	1b9b      	subs	r3, r3, r6
 800db2e:	50a3      	str	r3, [r4, r2]
 800db30:	e7ab      	b.n	800da8a <_malloc_r+0x22>
 800db32:	42a3      	cmp	r3, r4
 800db34:	6862      	ldr	r2, [r4, #4]
 800db36:	d1dd      	bne.n	800daf4 <_malloc_r+0x8c>
 800db38:	f8c8 2000 	str.w	r2, [r8]
 800db3c:	e7ec      	b.n	800db18 <_malloc_r+0xb0>
 800db3e:	4623      	mov	r3, r4
 800db40:	6864      	ldr	r4, [r4, #4]
 800db42:	e7ac      	b.n	800da9e <_malloc_r+0x36>
 800db44:	4634      	mov	r4, r6
 800db46:	6876      	ldr	r6, [r6, #4]
 800db48:	e7b4      	b.n	800dab4 <_malloc_r+0x4c>
 800db4a:	4613      	mov	r3, r2
 800db4c:	e7cc      	b.n	800dae8 <_malloc_r+0x80>
 800db4e:	230c      	movs	r3, #12
 800db50:	603b      	str	r3, [r7, #0]
 800db52:	4638      	mov	r0, r7
 800db54:	f000 f80e 	bl	800db74 <__malloc_unlock>
 800db58:	e797      	b.n	800da8a <_malloc_r+0x22>
 800db5a:	6025      	str	r5, [r4, #0]
 800db5c:	e7dc      	b.n	800db18 <_malloc_r+0xb0>
 800db5e:	605b      	str	r3, [r3, #4]
 800db60:	deff      	udf	#255	; 0xff
 800db62:	bf00      	nop
 800db64:	240029bc 	.word	0x240029bc

0800db68 <__malloc_lock>:
 800db68:	4801      	ldr	r0, [pc, #4]	; (800db70 <__malloc_lock+0x8>)
 800db6a:	f000 be38 	b.w	800e7de <__retarget_lock_acquire_recursive>
 800db6e:	bf00      	nop
 800db70:	24002b04 	.word	0x24002b04

0800db74 <__malloc_unlock>:
 800db74:	4801      	ldr	r0, [pc, #4]	; (800db7c <__malloc_unlock+0x8>)
 800db76:	f000 be33 	b.w	800e7e0 <__retarget_lock_release_recursive>
 800db7a:	bf00      	nop
 800db7c:	24002b04 	.word	0x24002b04

0800db80 <_realloc_r>:
 800db80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db84:	4680      	mov	r8, r0
 800db86:	4614      	mov	r4, r2
 800db88:	460e      	mov	r6, r1
 800db8a:	b921      	cbnz	r1, 800db96 <_realloc_r+0x16>
 800db8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db90:	4611      	mov	r1, r2
 800db92:	f7ff bf69 	b.w	800da68 <_malloc_r>
 800db96:	b92a      	cbnz	r2, 800dba4 <_realloc_r+0x24>
 800db98:	f001 fc26 	bl	800f3e8 <_free_r>
 800db9c:	4625      	mov	r5, r4
 800db9e:	4628      	mov	r0, r5
 800dba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba4:	f001 ffe8 	bl	800fb78 <_malloc_usable_size_r>
 800dba8:	4284      	cmp	r4, r0
 800dbaa:	4607      	mov	r7, r0
 800dbac:	d802      	bhi.n	800dbb4 <_realloc_r+0x34>
 800dbae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbb2:	d812      	bhi.n	800dbda <_realloc_r+0x5a>
 800dbb4:	4621      	mov	r1, r4
 800dbb6:	4640      	mov	r0, r8
 800dbb8:	f7ff ff56 	bl	800da68 <_malloc_r>
 800dbbc:	4605      	mov	r5, r0
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	d0ed      	beq.n	800db9e <_realloc_r+0x1e>
 800dbc2:	42bc      	cmp	r4, r7
 800dbc4:	4622      	mov	r2, r4
 800dbc6:	4631      	mov	r1, r6
 800dbc8:	bf28      	it	cs
 800dbca:	463a      	movcs	r2, r7
 800dbcc:	f000 fe09 	bl	800e7e2 <memcpy>
 800dbd0:	4631      	mov	r1, r6
 800dbd2:	4640      	mov	r0, r8
 800dbd4:	f001 fc08 	bl	800f3e8 <_free_r>
 800dbd8:	e7e1      	b.n	800db9e <_realloc_r+0x1e>
 800dbda:	4635      	mov	r5, r6
 800dbdc:	e7df      	b.n	800db9e <_realloc_r+0x1e>

0800dbde <__cvt>:
 800dbde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbe0:	ed2d 8b02 	vpush	{d8}
 800dbe4:	eeb0 8b40 	vmov.f64	d8, d0
 800dbe8:	b085      	sub	sp, #20
 800dbea:	4617      	mov	r7, r2
 800dbec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800dbee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800dbf0:	ee18 2a90 	vmov	r2, s17
 800dbf4:	f025 0520 	bic.w	r5, r5, #32
 800dbf8:	2a00      	cmp	r2, #0
 800dbfa:	bfb6      	itet	lt
 800dbfc:	222d      	movlt	r2, #45	; 0x2d
 800dbfe:	2200      	movge	r2, #0
 800dc00:	eeb1 8b40 	vneglt.f64	d8, d0
 800dc04:	2d46      	cmp	r5, #70	; 0x46
 800dc06:	460c      	mov	r4, r1
 800dc08:	701a      	strb	r2, [r3, #0]
 800dc0a:	d004      	beq.n	800dc16 <__cvt+0x38>
 800dc0c:	2d45      	cmp	r5, #69	; 0x45
 800dc0e:	d100      	bne.n	800dc12 <__cvt+0x34>
 800dc10:	3401      	adds	r4, #1
 800dc12:	2102      	movs	r1, #2
 800dc14:	e000      	b.n	800dc18 <__cvt+0x3a>
 800dc16:	2103      	movs	r1, #3
 800dc18:	ab03      	add	r3, sp, #12
 800dc1a:	9301      	str	r3, [sp, #4]
 800dc1c:	ab02      	add	r3, sp, #8
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	4622      	mov	r2, r4
 800dc22:	4633      	mov	r3, r6
 800dc24:	eeb0 0b48 	vmov.f64	d0, d8
 800dc28:	f000 fe72 	bl	800e910 <_dtoa_r>
 800dc2c:	2d47      	cmp	r5, #71	; 0x47
 800dc2e:	d101      	bne.n	800dc34 <__cvt+0x56>
 800dc30:	07fb      	lsls	r3, r7, #31
 800dc32:	d51a      	bpl.n	800dc6a <__cvt+0x8c>
 800dc34:	2d46      	cmp	r5, #70	; 0x46
 800dc36:	eb00 0204 	add.w	r2, r0, r4
 800dc3a:	d10c      	bne.n	800dc56 <__cvt+0x78>
 800dc3c:	7803      	ldrb	r3, [r0, #0]
 800dc3e:	2b30      	cmp	r3, #48	; 0x30
 800dc40:	d107      	bne.n	800dc52 <__cvt+0x74>
 800dc42:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc4a:	bf1c      	itt	ne
 800dc4c:	f1c4 0401 	rsbne	r4, r4, #1
 800dc50:	6034      	strne	r4, [r6, #0]
 800dc52:	6833      	ldr	r3, [r6, #0]
 800dc54:	441a      	add	r2, r3
 800dc56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5e:	bf08      	it	eq
 800dc60:	9203      	streq	r2, [sp, #12]
 800dc62:	2130      	movs	r1, #48	; 0x30
 800dc64:	9b03      	ldr	r3, [sp, #12]
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d307      	bcc.n	800dc7a <__cvt+0x9c>
 800dc6a:	9b03      	ldr	r3, [sp, #12]
 800dc6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc6e:	1a1b      	subs	r3, r3, r0
 800dc70:	6013      	str	r3, [r2, #0]
 800dc72:	b005      	add	sp, #20
 800dc74:	ecbd 8b02 	vpop	{d8}
 800dc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc7a:	1c5c      	adds	r4, r3, #1
 800dc7c:	9403      	str	r4, [sp, #12]
 800dc7e:	7019      	strb	r1, [r3, #0]
 800dc80:	e7f0      	b.n	800dc64 <__cvt+0x86>

0800dc82 <__exponent>:
 800dc82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc84:	4603      	mov	r3, r0
 800dc86:	2900      	cmp	r1, #0
 800dc88:	bfb8      	it	lt
 800dc8a:	4249      	neglt	r1, r1
 800dc8c:	f803 2b02 	strb.w	r2, [r3], #2
 800dc90:	bfb4      	ite	lt
 800dc92:	222d      	movlt	r2, #45	; 0x2d
 800dc94:	222b      	movge	r2, #43	; 0x2b
 800dc96:	2909      	cmp	r1, #9
 800dc98:	7042      	strb	r2, [r0, #1]
 800dc9a:	dd2a      	ble.n	800dcf2 <__exponent+0x70>
 800dc9c:	f10d 0207 	add.w	r2, sp, #7
 800dca0:	4617      	mov	r7, r2
 800dca2:	260a      	movs	r6, #10
 800dca4:	4694      	mov	ip, r2
 800dca6:	fb91 f5f6 	sdiv	r5, r1, r6
 800dcaa:	fb06 1415 	mls	r4, r6, r5, r1
 800dcae:	3430      	adds	r4, #48	; 0x30
 800dcb0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	2c63      	cmp	r4, #99	; 0x63
 800dcb8:	f102 32ff 	add.w	r2, r2, #4294967295
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	dcf1      	bgt.n	800dca4 <__exponent+0x22>
 800dcc0:	3130      	adds	r1, #48	; 0x30
 800dcc2:	f1ac 0402 	sub.w	r4, ip, #2
 800dcc6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dcca:	1c41      	adds	r1, r0, #1
 800dccc:	4622      	mov	r2, r4
 800dcce:	42ba      	cmp	r2, r7
 800dcd0:	d30a      	bcc.n	800dce8 <__exponent+0x66>
 800dcd2:	f10d 0209 	add.w	r2, sp, #9
 800dcd6:	eba2 020c 	sub.w	r2, r2, ip
 800dcda:	42bc      	cmp	r4, r7
 800dcdc:	bf88      	it	hi
 800dcde:	2200      	movhi	r2, #0
 800dce0:	4413      	add	r3, r2
 800dce2:	1a18      	subs	r0, r3, r0
 800dce4:	b003      	add	sp, #12
 800dce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dce8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dcec:	f801 5f01 	strb.w	r5, [r1, #1]!
 800dcf0:	e7ed      	b.n	800dcce <__exponent+0x4c>
 800dcf2:	2330      	movs	r3, #48	; 0x30
 800dcf4:	3130      	adds	r1, #48	; 0x30
 800dcf6:	7083      	strb	r3, [r0, #2]
 800dcf8:	70c1      	strb	r1, [r0, #3]
 800dcfa:	1d03      	adds	r3, r0, #4
 800dcfc:	e7f1      	b.n	800dce2 <__exponent+0x60>
	...

0800dd00 <_printf_float>:
 800dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd04:	b08b      	sub	sp, #44	; 0x2c
 800dd06:	460c      	mov	r4, r1
 800dd08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800dd0c:	4616      	mov	r6, r2
 800dd0e:	461f      	mov	r7, r3
 800dd10:	4605      	mov	r5, r0
 800dd12:	f000 fcdf 	bl	800e6d4 <_localeconv_r>
 800dd16:	f8d0 b000 	ldr.w	fp, [r0]
 800dd1a:	4658      	mov	r0, fp
 800dd1c:	f7f2 fb30 	bl	8000380 <strlen>
 800dd20:	2300      	movs	r3, #0
 800dd22:	9308      	str	r3, [sp, #32]
 800dd24:	f8d8 3000 	ldr.w	r3, [r8]
 800dd28:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dd2c:	6822      	ldr	r2, [r4, #0]
 800dd2e:	3307      	adds	r3, #7
 800dd30:	f023 0307 	bic.w	r3, r3, #7
 800dd34:	f103 0108 	add.w	r1, r3, #8
 800dd38:	f8c8 1000 	str.w	r1, [r8]
 800dd3c:	ed93 0b00 	vldr	d0, [r3]
 800dd40:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800dfa0 <_printf_float+0x2a0>
 800dd44:	eeb0 7bc0 	vabs.f64	d7, d0
 800dd48:	eeb4 7b46 	vcmp.f64	d7, d6
 800dd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd50:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800dd54:	4682      	mov	sl, r0
 800dd56:	dd24      	ble.n	800dda2 <_printf_float+0xa2>
 800dd58:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd60:	d502      	bpl.n	800dd68 <_printf_float+0x68>
 800dd62:	232d      	movs	r3, #45	; 0x2d
 800dd64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd68:	498f      	ldr	r1, [pc, #572]	; (800dfa8 <_printf_float+0x2a8>)
 800dd6a:	4b90      	ldr	r3, [pc, #576]	; (800dfac <_printf_float+0x2ac>)
 800dd6c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800dd70:	bf94      	ite	ls
 800dd72:	4688      	movls	r8, r1
 800dd74:	4698      	movhi	r8, r3
 800dd76:	2303      	movs	r3, #3
 800dd78:	6123      	str	r3, [r4, #16]
 800dd7a:	f022 0204 	bic.w	r2, r2, #4
 800dd7e:	2300      	movs	r3, #0
 800dd80:	6022      	str	r2, [r4, #0]
 800dd82:	9304      	str	r3, [sp, #16]
 800dd84:	9700      	str	r7, [sp, #0]
 800dd86:	4633      	mov	r3, r6
 800dd88:	aa09      	add	r2, sp, #36	; 0x24
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	f000 f9d1 	bl	800e134 <_printf_common>
 800dd92:	3001      	adds	r0, #1
 800dd94:	f040 808a 	bne.w	800deac <_printf_float+0x1ac>
 800dd98:	f04f 30ff 	mov.w	r0, #4294967295
 800dd9c:	b00b      	add	sp, #44	; 0x2c
 800dd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda2:	eeb4 0b40 	vcmp.f64	d0, d0
 800dda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddaa:	d709      	bvc.n	800ddc0 <_printf_float+0xc0>
 800ddac:	ee10 3a90 	vmov	r3, s1
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	bfbc      	itt	lt
 800ddb4:	232d      	movlt	r3, #45	; 0x2d
 800ddb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ddba:	497d      	ldr	r1, [pc, #500]	; (800dfb0 <_printf_float+0x2b0>)
 800ddbc:	4b7d      	ldr	r3, [pc, #500]	; (800dfb4 <_printf_float+0x2b4>)
 800ddbe:	e7d5      	b.n	800dd6c <_printf_float+0x6c>
 800ddc0:	6863      	ldr	r3, [r4, #4]
 800ddc2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ddc6:	9104      	str	r1, [sp, #16]
 800ddc8:	1c59      	adds	r1, r3, #1
 800ddca:	d13c      	bne.n	800de46 <_printf_float+0x146>
 800ddcc:	2306      	movs	r3, #6
 800ddce:	6063      	str	r3, [r4, #4]
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9303      	str	r3, [sp, #12]
 800ddd4:	ab08      	add	r3, sp, #32
 800ddd6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ddda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ddde:	ab07      	add	r3, sp, #28
 800dde0:	6861      	ldr	r1, [r4, #4]
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	6022      	str	r2, [r4, #0]
 800dde6:	f10d 031b 	add.w	r3, sp, #27
 800ddea:	4628      	mov	r0, r5
 800ddec:	f7ff fef7 	bl	800dbde <__cvt>
 800ddf0:	9b04      	ldr	r3, [sp, #16]
 800ddf2:	9907      	ldr	r1, [sp, #28]
 800ddf4:	2b47      	cmp	r3, #71	; 0x47
 800ddf6:	4680      	mov	r8, r0
 800ddf8:	d108      	bne.n	800de0c <_printf_float+0x10c>
 800ddfa:	1cc8      	adds	r0, r1, #3
 800ddfc:	db02      	blt.n	800de04 <_printf_float+0x104>
 800ddfe:	6863      	ldr	r3, [r4, #4]
 800de00:	4299      	cmp	r1, r3
 800de02:	dd41      	ble.n	800de88 <_printf_float+0x188>
 800de04:	f1a9 0902 	sub.w	r9, r9, #2
 800de08:	fa5f f989 	uxtb.w	r9, r9
 800de0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800de10:	d820      	bhi.n	800de54 <_printf_float+0x154>
 800de12:	3901      	subs	r1, #1
 800de14:	464a      	mov	r2, r9
 800de16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800de1a:	9107      	str	r1, [sp, #28]
 800de1c:	f7ff ff31 	bl	800dc82 <__exponent>
 800de20:	9a08      	ldr	r2, [sp, #32]
 800de22:	9004      	str	r0, [sp, #16]
 800de24:	1813      	adds	r3, r2, r0
 800de26:	2a01      	cmp	r2, #1
 800de28:	6123      	str	r3, [r4, #16]
 800de2a:	dc02      	bgt.n	800de32 <_printf_float+0x132>
 800de2c:	6822      	ldr	r2, [r4, #0]
 800de2e:	07d2      	lsls	r2, r2, #31
 800de30:	d501      	bpl.n	800de36 <_printf_float+0x136>
 800de32:	3301      	adds	r3, #1
 800de34:	6123      	str	r3, [r4, #16]
 800de36:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d0a2      	beq.n	800dd84 <_printf_float+0x84>
 800de3e:	232d      	movs	r3, #45	; 0x2d
 800de40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de44:	e79e      	b.n	800dd84 <_printf_float+0x84>
 800de46:	9904      	ldr	r1, [sp, #16]
 800de48:	2947      	cmp	r1, #71	; 0x47
 800de4a:	d1c1      	bne.n	800ddd0 <_printf_float+0xd0>
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1bf      	bne.n	800ddd0 <_printf_float+0xd0>
 800de50:	2301      	movs	r3, #1
 800de52:	e7bc      	b.n	800ddce <_printf_float+0xce>
 800de54:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800de58:	d118      	bne.n	800de8c <_printf_float+0x18c>
 800de5a:	2900      	cmp	r1, #0
 800de5c:	6863      	ldr	r3, [r4, #4]
 800de5e:	dd0b      	ble.n	800de78 <_printf_float+0x178>
 800de60:	6121      	str	r1, [r4, #16]
 800de62:	b913      	cbnz	r3, 800de6a <_printf_float+0x16a>
 800de64:	6822      	ldr	r2, [r4, #0]
 800de66:	07d0      	lsls	r0, r2, #31
 800de68:	d502      	bpl.n	800de70 <_printf_float+0x170>
 800de6a:	3301      	adds	r3, #1
 800de6c:	440b      	add	r3, r1
 800de6e:	6123      	str	r3, [r4, #16]
 800de70:	2300      	movs	r3, #0
 800de72:	65a1      	str	r1, [r4, #88]	; 0x58
 800de74:	9304      	str	r3, [sp, #16]
 800de76:	e7de      	b.n	800de36 <_printf_float+0x136>
 800de78:	b913      	cbnz	r3, 800de80 <_printf_float+0x180>
 800de7a:	6822      	ldr	r2, [r4, #0]
 800de7c:	07d2      	lsls	r2, r2, #31
 800de7e:	d501      	bpl.n	800de84 <_printf_float+0x184>
 800de80:	3302      	adds	r3, #2
 800de82:	e7f4      	b.n	800de6e <_printf_float+0x16e>
 800de84:	2301      	movs	r3, #1
 800de86:	e7f2      	b.n	800de6e <_printf_float+0x16e>
 800de88:	f04f 0967 	mov.w	r9, #103	; 0x67
 800de8c:	9b08      	ldr	r3, [sp, #32]
 800de8e:	4299      	cmp	r1, r3
 800de90:	db05      	blt.n	800de9e <_printf_float+0x19e>
 800de92:	6823      	ldr	r3, [r4, #0]
 800de94:	6121      	str	r1, [r4, #16]
 800de96:	07d8      	lsls	r0, r3, #31
 800de98:	d5ea      	bpl.n	800de70 <_printf_float+0x170>
 800de9a:	1c4b      	adds	r3, r1, #1
 800de9c:	e7e7      	b.n	800de6e <_printf_float+0x16e>
 800de9e:	2900      	cmp	r1, #0
 800dea0:	bfd4      	ite	le
 800dea2:	f1c1 0202 	rsble	r2, r1, #2
 800dea6:	2201      	movgt	r2, #1
 800dea8:	4413      	add	r3, r2
 800deaa:	e7e0      	b.n	800de6e <_printf_float+0x16e>
 800deac:	6823      	ldr	r3, [r4, #0]
 800deae:	055a      	lsls	r2, r3, #21
 800deb0:	d407      	bmi.n	800dec2 <_printf_float+0x1c2>
 800deb2:	6923      	ldr	r3, [r4, #16]
 800deb4:	4642      	mov	r2, r8
 800deb6:	4631      	mov	r1, r6
 800deb8:	4628      	mov	r0, r5
 800deba:	47b8      	blx	r7
 800debc:	3001      	adds	r0, #1
 800debe:	d12a      	bne.n	800df16 <_printf_float+0x216>
 800dec0:	e76a      	b.n	800dd98 <_printf_float+0x98>
 800dec2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dec6:	f240 80e0 	bls.w	800e08a <_printf_float+0x38a>
 800deca:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800dece:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ded2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded6:	d133      	bne.n	800df40 <_printf_float+0x240>
 800ded8:	4a37      	ldr	r2, [pc, #220]	; (800dfb8 <_printf_float+0x2b8>)
 800deda:	2301      	movs	r3, #1
 800dedc:	4631      	mov	r1, r6
 800dede:	4628      	mov	r0, r5
 800dee0:	47b8      	blx	r7
 800dee2:	3001      	adds	r0, #1
 800dee4:	f43f af58 	beq.w	800dd98 <_printf_float+0x98>
 800dee8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800deec:	429a      	cmp	r2, r3
 800deee:	db02      	blt.n	800def6 <_printf_float+0x1f6>
 800def0:	6823      	ldr	r3, [r4, #0]
 800def2:	07d8      	lsls	r0, r3, #31
 800def4:	d50f      	bpl.n	800df16 <_printf_float+0x216>
 800def6:	4653      	mov	r3, sl
 800def8:	465a      	mov	r2, fp
 800defa:	4631      	mov	r1, r6
 800defc:	4628      	mov	r0, r5
 800defe:	47b8      	blx	r7
 800df00:	3001      	adds	r0, #1
 800df02:	f43f af49 	beq.w	800dd98 <_printf_float+0x98>
 800df06:	f04f 0800 	mov.w	r8, #0
 800df0a:	f104 091a 	add.w	r9, r4, #26
 800df0e:	9b08      	ldr	r3, [sp, #32]
 800df10:	3b01      	subs	r3, #1
 800df12:	4543      	cmp	r3, r8
 800df14:	dc09      	bgt.n	800df2a <_printf_float+0x22a>
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	079b      	lsls	r3, r3, #30
 800df1a:	f100 8106 	bmi.w	800e12a <_printf_float+0x42a>
 800df1e:	68e0      	ldr	r0, [r4, #12]
 800df20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df22:	4298      	cmp	r0, r3
 800df24:	bfb8      	it	lt
 800df26:	4618      	movlt	r0, r3
 800df28:	e738      	b.n	800dd9c <_printf_float+0x9c>
 800df2a:	2301      	movs	r3, #1
 800df2c:	464a      	mov	r2, r9
 800df2e:	4631      	mov	r1, r6
 800df30:	4628      	mov	r0, r5
 800df32:	47b8      	blx	r7
 800df34:	3001      	adds	r0, #1
 800df36:	f43f af2f 	beq.w	800dd98 <_printf_float+0x98>
 800df3a:	f108 0801 	add.w	r8, r8, #1
 800df3e:	e7e6      	b.n	800df0e <_printf_float+0x20e>
 800df40:	9b07      	ldr	r3, [sp, #28]
 800df42:	2b00      	cmp	r3, #0
 800df44:	dc3a      	bgt.n	800dfbc <_printf_float+0x2bc>
 800df46:	4a1c      	ldr	r2, [pc, #112]	; (800dfb8 <_printf_float+0x2b8>)
 800df48:	2301      	movs	r3, #1
 800df4a:	4631      	mov	r1, r6
 800df4c:	4628      	mov	r0, r5
 800df4e:	47b8      	blx	r7
 800df50:	3001      	adds	r0, #1
 800df52:	f43f af21 	beq.w	800dd98 <_printf_float+0x98>
 800df56:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800df5a:	4313      	orrs	r3, r2
 800df5c:	d102      	bne.n	800df64 <_printf_float+0x264>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	07d9      	lsls	r1, r3, #31
 800df62:	d5d8      	bpl.n	800df16 <_printf_float+0x216>
 800df64:	4653      	mov	r3, sl
 800df66:	465a      	mov	r2, fp
 800df68:	4631      	mov	r1, r6
 800df6a:	4628      	mov	r0, r5
 800df6c:	47b8      	blx	r7
 800df6e:	3001      	adds	r0, #1
 800df70:	f43f af12 	beq.w	800dd98 <_printf_float+0x98>
 800df74:	f04f 0900 	mov.w	r9, #0
 800df78:	f104 0a1a 	add.w	sl, r4, #26
 800df7c:	9b07      	ldr	r3, [sp, #28]
 800df7e:	425b      	negs	r3, r3
 800df80:	454b      	cmp	r3, r9
 800df82:	dc01      	bgt.n	800df88 <_printf_float+0x288>
 800df84:	9b08      	ldr	r3, [sp, #32]
 800df86:	e795      	b.n	800deb4 <_printf_float+0x1b4>
 800df88:	2301      	movs	r3, #1
 800df8a:	4652      	mov	r2, sl
 800df8c:	4631      	mov	r1, r6
 800df8e:	4628      	mov	r0, r5
 800df90:	47b8      	blx	r7
 800df92:	3001      	adds	r0, #1
 800df94:	f43f af00 	beq.w	800dd98 <_printf_float+0x98>
 800df98:	f109 0901 	add.w	r9, r9, #1
 800df9c:	e7ee      	b.n	800df7c <_printf_float+0x27c>
 800df9e:	bf00      	nop
 800dfa0:	ffffffff 	.word	0xffffffff
 800dfa4:	7fefffff 	.word	0x7fefffff
 800dfa8:	08011ca8 	.word	0x08011ca8
 800dfac:	08011cac 	.word	0x08011cac
 800dfb0:	08011cb0 	.word	0x08011cb0
 800dfb4:	08011cb4 	.word	0x08011cb4
 800dfb8:	08011cb8 	.word	0x08011cb8
 800dfbc:	9a08      	ldr	r2, [sp, #32]
 800dfbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	bfa8      	it	ge
 800dfc4:	461a      	movge	r2, r3
 800dfc6:	2a00      	cmp	r2, #0
 800dfc8:	4691      	mov	r9, r2
 800dfca:	dc38      	bgt.n	800e03e <_printf_float+0x33e>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	9305      	str	r3, [sp, #20]
 800dfd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dfd4:	f104 021a 	add.w	r2, r4, #26
 800dfd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dfda:	9905      	ldr	r1, [sp, #20]
 800dfdc:	9304      	str	r3, [sp, #16]
 800dfde:	eba3 0309 	sub.w	r3, r3, r9
 800dfe2:	428b      	cmp	r3, r1
 800dfe4:	dc33      	bgt.n	800e04e <_printf_float+0x34e>
 800dfe6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	db3c      	blt.n	800e068 <_printf_float+0x368>
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	07da      	lsls	r2, r3, #31
 800dff2:	d439      	bmi.n	800e068 <_printf_float+0x368>
 800dff4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800dff8:	eba2 0903 	sub.w	r9, r2, r3
 800dffc:	9b04      	ldr	r3, [sp, #16]
 800dffe:	1ad2      	subs	r2, r2, r3
 800e000:	4591      	cmp	r9, r2
 800e002:	bfa8      	it	ge
 800e004:	4691      	movge	r9, r2
 800e006:	f1b9 0f00 	cmp.w	r9, #0
 800e00a:	dc35      	bgt.n	800e078 <_printf_float+0x378>
 800e00c:	f04f 0800 	mov.w	r8, #0
 800e010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e014:	f104 0a1a 	add.w	sl, r4, #26
 800e018:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e01c:	1a9b      	subs	r3, r3, r2
 800e01e:	eba3 0309 	sub.w	r3, r3, r9
 800e022:	4543      	cmp	r3, r8
 800e024:	f77f af77 	ble.w	800df16 <_printf_float+0x216>
 800e028:	2301      	movs	r3, #1
 800e02a:	4652      	mov	r2, sl
 800e02c:	4631      	mov	r1, r6
 800e02e:	4628      	mov	r0, r5
 800e030:	47b8      	blx	r7
 800e032:	3001      	adds	r0, #1
 800e034:	f43f aeb0 	beq.w	800dd98 <_printf_float+0x98>
 800e038:	f108 0801 	add.w	r8, r8, #1
 800e03c:	e7ec      	b.n	800e018 <_printf_float+0x318>
 800e03e:	4613      	mov	r3, r2
 800e040:	4631      	mov	r1, r6
 800e042:	4642      	mov	r2, r8
 800e044:	4628      	mov	r0, r5
 800e046:	47b8      	blx	r7
 800e048:	3001      	adds	r0, #1
 800e04a:	d1bf      	bne.n	800dfcc <_printf_float+0x2cc>
 800e04c:	e6a4      	b.n	800dd98 <_printf_float+0x98>
 800e04e:	2301      	movs	r3, #1
 800e050:	4631      	mov	r1, r6
 800e052:	4628      	mov	r0, r5
 800e054:	9204      	str	r2, [sp, #16]
 800e056:	47b8      	blx	r7
 800e058:	3001      	adds	r0, #1
 800e05a:	f43f ae9d 	beq.w	800dd98 <_printf_float+0x98>
 800e05e:	9b05      	ldr	r3, [sp, #20]
 800e060:	9a04      	ldr	r2, [sp, #16]
 800e062:	3301      	adds	r3, #1
 800e064:	9305      	str	r3, [sp, #20]
 800e066:	e7b7      	b.n	800dfd8 <_printf_float+0x2d8>
 800e068:	4653      	mov	r3, sl
 800e06a:	465a      	mov	r2, fp
 800e06c:	4631      	mov	r1, r6
 800e06e:	4628      	mov	r0, r5
 800e070:	47b8      	blx	r7
 800e072:	3001      	adds	r0, #1
 800e074:	d1be      	bne.n	800dff4 <_printf_float+0x2f4>
 800e076:	e68f      	b.n	800dd98 <_printf_float+0x98>
 800e078:	9a04      	ldr	r2, [sp, #16]
 800e07a:	464b      	mov	r3, r9
 800e07c:	4442      	add	r2, r8
 800e07e:	4631      	mov	r1, r6
 800e080:	4628      	mov	r0, r5
 800e082:	47b8      	blx	r7
 800e084:	3001      	adds	r0, #1
 800e086:	d1c1      	bne.n	800e00c <_printf_float+0x30c>
 800e088:	e686      	b.n	800dd98 <_printf_float+0x98>
 800e08a:	9a08      	ldr	r2, [sp, #32]
 800e08c:	2a01      	cmp	r2, #1
 800e08e:	dc01      	bgt.n	800e094 <_printf_float+0x394>
 800e090:	07db      	lsls	r3, r3, #31
 800e092:	d537      	bpl.n	800e104 <_printf_float+0x404>
 800e094:	2301      	movs	r3, #1
 800e096:	4642      	mov	r2, r8
 800e098:	4631      	mov	r1, r6
 800e09a:	4628      	mov	r0, r5
 800e09c:	47b8      	blx	r7
 800e09e:	3001      	adds	r0, #1
 800e0a0:	f43f ae7a 	beq.w	800dd98 <_printf_float+0x98>
 800e0a4:	4653      	mov	r3, sl
 800e0a6:	465a      	mov	r2, fp
 800e0a8:	4631      	mov	r1, r6
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	47b8      	blx	r7
 800e0ae:	3001      	adds	r0, #1
 800e0b0:	f43f ae72 	beq.w	800dd98 <_printf_float+0x98>
 800e0b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e0b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c0:	9b08      	ldr	r3, [sp, #32]
 800e0c2:	d01a      	beq.n	800e0fa <_printf_float+0x3fa>
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	f108 0201 	add.w	r2, r8, #1
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	47b8      	blx	r7
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	d10e      	bne.n	800e0f2 <_printf_float+0x3f2>
 800e0d4:	e660      	b.n	800dd98 <_printf_float+0x98>
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	464a      	mov	r2, r9
 800e0da:	4631      	mov	r1, r6
 800e0dc:	4628      	mov	r0, r5
 800e0de:	47b8      	blx	r7
 800e0e0:	3001      	adds	r0, #1
 800e0e2:	f43f ae59 	beq.w	800dd98 <_printf_float+0x98>
 800e0e6:	f108 0801 	add.w	r8, r8, #1
 800e0ea:	9b08      	ldr	r3, [sp, #32]
 800e0ec:	3b01      	subs	r3, #1
 800e0ee:	4543      	cmp	r3, r8
 800e0f0:	dcf1      	bgt.n	800e0d6 <_printf_float+0x3d6>
 800e0f2:	9b04      	ldr	r3, [sp, #16]
 800e0f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e0f8:	e6dd      	b.n	800deb6 <_printf_float+0x1b6>
 800e0fa:	f04f 0800 	mov.w	r8, #0
 800e0fe:	f104 091a 	add.w	r9, r4, #26
 800e102:	e7f2      	b.n	800e0ea <_printf_float+0x3ea>
 800e104:	2301      	movs	r3, #1
 800e106:	4642      	mov	r2, r8
 800e108:	e7df      	b.n	800e0ca <_printf_float+0x3ca>
 800e10a:	2301      	movs	r3, #1
 800e10c:	464a      	mov	r2, r9
 800e10e:	4631      	mov	r1, r6
 800e110:	4628      	mov	r0, r5
 800e112:	47b8      	blx	r7
 800e114:	3001      	adds	r0, #1
 800e116:	f43f ae3f 	beq.w	800dd98 <_printf_float+0x98>
 800e11a:	f108 0801 	add.w	r8, r8, #1
 800e11e:	68e3      	ldr	r3, [r4, #12]
 800e120:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e122:	1a5b      	subs	r3, r3, r1
 800e124:	4543      	cmp	r3, r8
 800e126:	dcf0      	bgt.n	800e10a <_printf_float+0x40a>
 800e128:	e6f9      	b.n	800df1e <_printf_float+0x21e>
 800e12a:	f04f 0800 	mov.w	r8, #0
 800e12e:	f104 0919 	add.w	r9, r4, #25
 800e132:	e7f4      	b.n	800e11e <_printf_float+0x41e>

0800e134 <_printf_common>:
 800e134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e138:	4616      	mov	r6, r2
 800e13a:	4699      	mov	r9, r3
 800e13c:	688a      	ldr	r2, [r1, #8]
 800e13e:	690b      	ldr	r3, [r1, #16]
 800e140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e144:	4293      	cmp	r3, r2
 800e146:	bfb8      	it	lt
 800e148:	4613      	movlt	r3, r2
 800e14a:	6033      	str	r3, [r6, #0]
 800e14c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e150:	4607      	mov	r7, r0
 800e152:	460c      	mov	r4, r1
 800e154:	b10a      	cbz	r2, 800e15a <_printf_common+0x26>
 800e156:	3301      	adds	r3, #1
 800e158:	6033      	str	r3, [r6, #0]
 800e15a:	6823      	ldr	r3, [r4, #0]
 800e15c:	0699      	lsls	r1, r3, #26
 800e15e:	bf42      	ittt	mi
 800e160:	6833      	ldrmi	r3, [r6, #0]
 800e162:	3302      	addmi	r3, #2
 800e164:	6033      	strmi	r3, [r6, #0]
 800e166:	6825      	ldr	r5, [r4, #0]
 800e168:	f015 0506 	ands.w	r5, r5, #6
 800e16c:	d106      	bne.n	800e17c <_printf_common+0x48>
 800e16e:	f104 0a19 	add.w	sl, r4, #25
 800e172:	68e3      	ldr	r3, [r4, #12]
 800e174:	6832      	ldr	r2, [r6, #0]
 800e176:	1a9b      	subs	r3, r3, r2
 800e178:	42ab      	cmp	r3, r5
 800e17a:	dc26      	bgt.n	800e1ca <_printf_common+0x96>
 800e17c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e180:	1e13      	subs	r3, r2, #0
 800e182:	6822      	ldr	r2, [r4, #0]
 800e184:	bf18      	it	ne
 800e186:	2301      	movne	r3, #1
 800e188:	0692      	lsls	r2, r2, #26
 800e18a:	d42b      	bmi.n	800e1e4 <_printf_common+0xb0>
 800e18c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e190:	4649      	mov	r1, r9
 800e192:	4638      	mov	r0, r7
 800e194:	47c0      	blx	r8
 800e196:	3001      	adds	r0, #1
 800e198:	d01e      	beq.n	800e1d8 <_printf_common+0xa4>
 800e19a:	6823      	ldr	r3, [r4, #0]
 800e19c:	6922      	ldr	r2, [r4, #16]
 800e19e:	f003 0306 	and.w	r3, r3, #6
 800e1a2:	2b04      	cmp	r3, #4
 800e1a4:	bf02      	ittt	eq
 800e1a6:	68e5      	ldreq	r5, [r4, #12]
 800e1a8:	6833      	ldreq	r3, [r6, #0]
 800e1aa:	1aed      	subeq	r5, r5, r3
 800e1ac:	68a3      	ldr	r3, [r4, #8]
 800e1ae:	bf0c      	ite	eq
 800e1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1b4:	2500      	movne	r5, #0
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	bfc4      	itt	gt
 800e1ba:	1a9b      	subgt	r3, r3, r2
 800e1bc:	18ed      	addgt	r5, r5, r3
 800e1be:	2600      	movs	r6, #0
 800e1c0:	341a      	adds	r4, #26
 800e1c2:	42b5      	cmp	r5, r6
 800e1c4:	d11a      	bne.n	800e1fc <_printf_common+0xc8>
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	e008      	b.n	800e1dc <_printf_common+0xa8>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	4652      	mov	r2, sl
 800e1ce:	4649      	mov	r1, r9
 800e1d0:	4638      	mov	r0, r7
 800e1d2:	47c0      	blx	r8
 800e1d4:	3001      	adds	r0, #1
 800e1d6:	d103      	bne.n	800e1e0 <_printf_common+0xac>
 800e1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1e0:	3501      	adds	r5, #1
 800e1e2:	e7c6      	b.n	800e172 <_printf_common+0x3e>
 800e1e4:	18e1      	adds	r1, r4, r3
 800e1e6:	1c5a      	adds	r2, r3, #1
 800e1e8:	2030      	movs	r0, #48	; 0x30
 800e1ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e1ee:	4422      	add	r2, r4
 800e1f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e1f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1f8:	3302      	adds	r3, #2
 800e1fa:	e7c7      	b.n	800e18c <_printf_common+0x58>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	4622      	mov	r2, r4
 800e200:	4649      	mov	r1, r9
 800e202:	4638      	mov	r0, r7
 800e204:	47c0      	blx	r8
 800e206:	3001      	adds	r0, #1
 800e208:	d0e6      	beq.n	800e1d8 <_printf_common+0xa4>
 800e20a:	3601      	adds	r6, #1
 800e20c:	e7d9      	b.n	800e1c2 <_printf_common+0x8e>
	...

0800e210 <_printf_i>:
 800e210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e214:	7e0f      	ldrb	r7, [r1, #24]
 800e216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e218:	2f78      	cmp	r7, #120	; 0x78
 800e21a:	4691      	mov	r9, r2
 800e21c:	4680      	mov	r8, r0
 800e21e:	460c      	mov	r4, r1
 800e220:	469a      	mov	sl, r3
 800e222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e226:	d807      	bhi.n	800e238 <_printf_i+0x28>
 800e228:	2f62      	cmp	r7, #98	; 0x62
 800e22a:	d80a      	bhi.n	800e242 <_printf_i+0x32>
 800e22c:	2f00      	cmp	r7, #0
 800e22e:	f000 80d4 	beq.w	800e3da <_printf_i+0x1ca>
 800e232:	2f58      	cmp	r7, #88	; 0x58
 800e234:	f000 80c0 	beq.w	800e3b8 <_printf_i+0x1a8>
 800e238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e23c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e240:	e03a      	b.n	800e2b8 <_printf_i+0xa8>
 800e242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e246:	2b15      	cmp	r3, #21
 800e248:	d8f6      	bhi.n	800e238 <_printf_i+0x28>
 800e24a:	a101      	add	r1, pc, #4	; (adr r1, 800e250 <_printf_i+0x40>)
 800e24c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e250:	0800e2a9 	.word	0x0800e2a9
 800e254:	0800e2bd 	.word	0x0800e2bd
 800e258:	0800e239 	.word	0x0800e239
 800e25c:	0800e239 	.word	0x0800e239
 800e260:	0800e239 	.word	0x0800e239
 800e264:	0800e239 	.word	0x0800e239
 800e268:	0800e2bd 	.word	0x0800e2bd
 800e26c:	0800e239 	.word	0x0800e239
 800e270:	0800e239 	.word	0x0800e239
 800e274:	0800e239 	.word	0x0800e239
 800e278:	0800e239 	.word	0x0800e239
 800e27c:	0800e3c1 	.word	0x0800e3c1
 800e280:	0800e2e9 	.word	0x0800e2e9
 800e284:	0800e37b 	.word	0x0800e37b
 800e288:	0800e239 	.word	0x0800e239
 800e28c:	0800e239 	.word	0x0800e239
 800e290:	0800e3e3 	.word	0x0800e3e3
 800e294:	0800e239 	.word	0x0800e239
 800e298:	0800e2e9 	.word	0x0800e2e9
 800e29c:	0800e239 	.word	0x0800e239
 800e2a0:	0800e239 	.word	0x0800e239
 800e2a4:	0800e383 	.word	0x0800e383
 800e2a8:	682b      	ldr	r3, [r5, #0]
 800e2aa:	1d1a      	adds	r2, r3, #4
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	602a      	str	r2, [r5, #0]
 800e2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e09f      	b.n	800e3fc <_printf_i+0x1ec>
 800e2bc:	6820      	ldr	r0, [r4, #0]
 800e2be:	682b      	ldr	r3, [r5, #0]
 800e2c0:	0607      	lsls	r7, r0, #24
 800e2c2:	f103 0104 	add.w	r1, r3, #4
 800e2c6:	6029      	str	r1, [r5, #0]
 800e2c8:	d501      	bpl.n	800e2ce <_printf_i+0xbe>
 800e2ca:	681e      	ldr	r6, [r3, #0]
 800e2cc:	e003      	b.n	800e2d6 <_printf_i+0xc6>
 800e2ce:	0646      	lsls	r6, r0, #25
 800e2d0:	d5fb      	bpl.n	800e2ca <_printf_i+0xba>
 800e2d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e2d6:	2e00      	cmp	r6, #0
 800e2d8:	da03      	bge.n	800e2e2 <_printf_i+0xd2>
 800e2da:	232d      	movs	r3, #45	; 0x2d
 800e2dc:	4276      	negs	r6, r6
 800e2de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2e2:	485a      	ldr	r0, [pc, #360]	; (800e44c <_printf_i+0x23c>)
 800e2e4:	230a      	movs	r3, #10
 800e2e6:	e012      	b.n	800e30e <_printf_i+0xfe>
 800e2e8:	682b      	ldr	r3, [r5, #0]
 800e2ea:	6820      	ldr	r0, [r4, #0]
 800e2ec:	1d19      	adds	r1, r3, #4
 800e2ee:	6029      	str	r1, [r5, #0]
 800e2f0:	0605      	lsls	r5, r0, #24
 800e2f2:	d501      	bpl.n	800e2f8 <_printf_i+0xe8>
 800e2f4:	681e      	ldr	r6, [r3, #0]
 800e2f6:	e002      	b.n	800e2fe <_printf_i+0xee>
 800e2f8:	0641      	lsls	r1, r0, #25
 800e2fa:	d5fb      	bpl.n	800e2f4 <_printf_i+0xe4>
 800e2fc:	881e      	ldrh	r6, [r3, #0]
 800e2fe:	4853      	ldr	r0, [pc, #332]	; (800e44c <_printf_i+0x23c>)
 800e300:	2f6f      	cmp	r7, #111	; 0x6f
 800e302:	bf0c      	ite	eq
 800e304:	2308      	moveq	r3, #8
 800e306:	230a      	movne	r3, #10
 800e308:	2100      	movs	r1, #0
 800e30a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e30e:	6865      	ldr	r5, [r4, #4]
 800e310:	60a5      	str	r5, [r4, #8]
 800e312:	2d00      	cmp	r5, #0
 800e314:	bfa2      	ittt	ge
 800e316:	6821      	ldrge	r1, [r4, #0]
 800e318:	f021 0104 	bicge.w	r1, r1, #4
 800e31c:	6021      	strge	r1, [r4, #0]
 800e31e:	b90e      	cbnz	r6, 800e324 <_printf_i+0x114>
 800e320:	2d00      	cmp	r5, #0
 800e322:	d04b      	beq.n	800e3bc <_printf_i+0x1ac>
 800e324:	4615      	mov	r5, r2
 800e326:	fbb6 f1f3 	udiv	r1, r6, r3
 800e32a:	fb03 6711 	mls	r7, r3, r1, r6
 800e32e:	5dc7      	ldrb	r7, [r0, r7]
 800e330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e334:	4637      	mov	r7, r6
 800e336:	42bb      	cmp	r3, r7
 800e338:	460e      	mov	r6, r1
 800e33a:	d9f4      	bls.n	800e326 <_printf_i+0x116>
 800e33c:	2b08      	cmp	r3, #8
 800e33e:	d10b      	bne.n	800e358 <_printf_i+0x148>
 800e340:	6823      	ldr	r3, [r4, #0]
 800e342:	07de      	lsls	r6, r3, #31
 800e344:	d508      	bpl.n	800e358 <_printf_i+0x148>
 800e346:	6923      	ldr	r3, [r4, #16]
 800e348:	6861      	ldr	r1, [r4, #4]
 800e34a:	4299      	cmp	r1, r3
 800e34c:	bfde      	ittt	le
 800e34e:	2330      	movle	r3, #48	; 0x30
 800e350:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e354:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e358:	1b52      	subs	r2, r2, r5
 800e35a:	6122      	str	r2, [r4, #16]
 800e35c:	f8cd a000 	str.w	sl, [sp]
 800e360:	464b      	mov	r3, r9
 800e362:	aa03      	add	r2, sp, #12
 800e364:	4621      	mov	r1, r4
 800e366:	4640      	mov	r0, r8
 800e368:	f7ff fee4 	bl	800e134 <_printf_common>
 800e36c:	3001      	adds	r0, #1
 800e36e:	d14a      	bne.n	800e406 <_printf_i+0x1f6>
 800e370:	f04f 30ff 	mov.w	r0, #4294967295
 800e374:	b004      	add	sp, #16
 800e376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e37a:	6823      	ldr	r3, [r4, #0]
 800e37c:	f043 0320 	orr.w	r3, r3, #32
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	4833      	ldr	r0, [pc, #204]	; (800e450 <_printf_i+0x240>)
 800e384:	2778      	movs	r7, #120	; 0x78
 800e386:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	6829      	ldr	r1, [r5, #0]
 800e38e:	061f      	lsls	r7, r3, #24
 800e390:	f851 6b04 	ldr.w	r6, [r1], #4
 800e394:	d402      	bmi.n	800e39c <_printf_i+0x18c>
 800e396:	065f      	lsls	r7, r3, #25
 800e398:	bf48      	it	mi
 800e39a:	b2b6      	uxthmi	r6, r6
 800e39c:	07df      	lsls	r7, r3, #31
 800e39e:	bf48      	it	mi
 800e3a0:	f043 0320 	orrmi.w	r3, r3, #32
 800e3a4:	6029      	str	r1, [r5, #0]
 800e3a6:	bf48      	it	mi
 800e3a8:	6023      	strmi	r3, [r4, #0]
 800e3aa:	b91e      	cbnz	r6, 800e3b4 <_printf_i+0x1a4>
 800e3ac:	6823      	ldr	r3, [r4, #0]
 800e3ae:	f023 0320 	bic.w	r3, r3, #32
 800e3b2:	6023      	str	r3, [r4, #0]
 800e3b4:	2310      	movs	r3, #16
 800e3b6:	e7a7      	b.n	800e308 <_printf_i+0xf8>
 800e3b8:	4824      	ldr	r0, [pc, #144]	; (800e44c <_printf_i+0x23c>)
 800e3ba:	e7e4      	b.n	800e386 <_printf_i+0x176>
 800e3bc:	4615      	mov	r5, r2
 800e3be:	e7bd      	b.n	800e33c <_printf_i+0x12c>
 800e3c0:	682b      	ldr	r3, [r5, #0]
 800e3c2:	6826      	ldr	r6, [r4, #0]
 800e3c4:	6961      	ldr	r1, [r4, #20]
 800e3c6:	1d18      	adds	r0, r3, #4
 800e3c8:	6028      	str	r0, [r5, #0]
 800e3ca:	0635      	lsls	r5, r6, #24
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	d501      	bpl.n	800e3d4 <_printf_i+0x1c4>
 800e3d0:	6019      	str	r1, [r3, #0]
 800e3d2:	e002      	b.n	800e3da <_printf_i+0x1ca>
 800e3d4:	0670      	lsls	r0, r6, #25
 800e3d6:	d5fb      	bpl.n	800e3d0 <_printf_i+0x1c0>
 800e3d8:	8019      	strh	r1, [r3, #0]
 800e3da:	2300      	movs	r3, #0
 800e3dc:	6123      	str	r3, [r4, #16]
 800e3de:	4615      	mov	r5, r2
 800e3e0:	e7bc      	b.n	800e35c <_printf_i+0x14c>
 800e3e2:	682b      	ldr	r3, [r5, #0]
 800e3e4:	1d1a      	adds	r2, r3, #4
 800e3e6:	602a      	str	r2, [r5, #0]
 800e3e8:	681d      	ldr	r5, [r3, #0]
 800e3ea:	6862      	ldr	r2, [r4, #4]
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f7f1 ff76 	bl	80002e0 <memchr>
 800e3f4:	b108      	cbz	r0, 800e3fa <_printf_i+0x1ea>
 800e3f6:	1b40      	subs	r0, r0, r5
 800e3f8:	6060      	str	r0, [r4, #4]
 800e3fa:	6863      	ldr	r3, [r4, #4]
 800e3fc:	6123      	str	r3, [r4, #16]
 800e3fe:	2300      	movs	r3, #0
 800e400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e404:	e7aa      	b.n	800e35c <_printf_i+0x14c>
 800e406:	6923      	ldr	r3, [r4, #16]
 800e408:	462a      	mov	r2, r5
 800e40a:	4649      	mov	r1, r9
 800e40c:	4640      	mov	r0, r8
 800e40e:	47d0      	blx	sl
 800e410:	3001      	adds	r0, #1
 800e412:	d0ad      	beq.n	800e370 <_printf_i+0x160>
 800e414:	6823      	ldr	r3, [r4, #0]
 800e416:	079b      	lsls	r3, r3, #30
 800e418:	d413      	bmi.n	800e442 <_printf_i+0x232>
 800e41a:	68e0      	ldr	r0, [r4, #12]
 800e41c:	9b03      	ldr	r3, [sp, #12]
 800e41e:	4298      	cmp	r0, r3
 800e420:	bfb8      	it	lt
 800e422:	4618      	movlt	r0, r3
 800e424:	e7a6      	b.n	800e374 <_printf_i+0x164>
 800e426:	2301      	movs	r3, #1
 800e428:	4632      	mov	r2, r6
 800e42a:	4649      	mov	r1, r9
 800e42c:	4640      	mov	r0, r8
 800e42e:	47d0      	blx	sl
 800e430:	3001      	adds	r0, #1
 800e432:	d09d      	beq.n	800e370 <_printf_i+0x160>
 800e434:	3501      	adds	r5, #1
 800e436:	68e3      	ldr	r3, [r4, #12]
 800e438:	9903      	ldr	r1, [sp, #12]
 800e43a:	1a5b      	subs	r3, r3, r1
 800e43c:	42ab      	cmp	r3, r5
 800e43e:	dcf2      	bgt.n	800e426 <_printf_i+0x216>
 800e440:	e7eb      	b.n	800e41a <_printf_i+0x20a>
 800e442:	2500      	movs	r5, #0
 800e444:	f104 0619 	add.w	r6, r4, #25
 800e448:	e7f5      	b.n	800e436 <_printf_i+0x226>
 800e44a:	bf00      	nop
 800e44c:	08011cba 	.word	0x08011cba
 800e450:	08011ccb 	.word	0x08011ccb

0800e454 <std>:
 800e454:	2300      	movs	r3, #0
 800e456:	b510      	push	{r4, lr}
 800e458:	4604      	mov	r4, r0
 800e45a:	e9c0 3300 	strd	r3, r3, [r0]
 800e45e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e462:	6083      	str	r3, [r0, #8]
 800e464:	8181      	strh	r1, [r0, #12]
 800e466:	6643      	str	r3, [r0, #100]	; 0x64
 800e468:	81c2      	strh	r2, [r0, #14]
 800e46a:	6183      	str	r3, [r0, #24]
 800e46c:	4619      	mov	r1, r3
 800e46e:	2208      	movs	r2, #8
 800e470:	305c      	adds	r0, #92	; 0x5c
 800e472:	f000 f926 	bl	800e6c2 <memset>
 800e476:	4b0d      	ldr	r3, [pc, #52]	; (800e4ac <std+0x58>)
 800e478:	6263      	str	r3, [r4, #36]	; 0x24
 800e47a:	4b0d      	ldr	r3, [pc, #52]	; (800e4b0 <std+0x5c>)
 800e47c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e47e:	4b0d      	ldr	r3, [pc, #52]	; (800e4b4 <std+0x60>)
 800e480:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e482:	4b0d      	ldr	r3, [pc, #52]	; (800e4b8 <std+0x64>)
 800e484:	6323      	str	r3, [r4, #48]	; 0x30
 800e486:	4b0d      	ldr	r3, [pc, #52]	; (800e4bc <std+0x68>)
 800e488:	6224      	str	r4, [r4, #32]
 800e48a:	429c      	cmp	r4, r3
 800e48c:	d006      	beq.n	800e49c <std+0x48>
 800e48e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e492:	4294      	cmp	r4, r2
 800e494:	d002      	beq.n	800e49c <std+0x48>
 800e496:	33d0      	adds	r3, #208	; 0xd0
 800e498:	429c      	cmp	r4, r3
 800e49a:	d105      	bne.n	800e4a8 <std+0x54>
 800e49c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4a4:	f000 b99a 	b.w	800e7dc <__retarget_lock_init_recursive>
 800e4a8:	bd10      	pop	{r4, pc}
 800e4aa:	bf00      	nop
 800e4ac:	0800e63d 	.word	0x0800e63d
 800e4b0:	0800e65f 	.word	0x0800e65f
 800e4b4:	0800e697 	.word	0x0800e697
 800e4b8:	0800e6bb 	.word	0x0800e6bb
 800e4bc:	240029c4 	.word	0x240029c4

0800e4c0 <stdio_exit_handler>:
 800e4c0:	4a02      	ldr	r2, [pc, #8]	; (800e4cc <stdio_exit_handler+0xc>)
 800e4c2:	4903      	ldr	r1, [pc, #12]	; (800e4d0 <stdio_exit_handler+0x10>)
 800e4c4:	4803      	ldr	r0, [pc, #12]	; (800e4d4 <stdio_exit_handler+0x14>)
 800e4c6:	f000 b869 	b.w	800e59c <_fwalk_sglue>
 800e4ca:	bf00      	nop
 800e4cc:	2400079c 	.word	0x2400079c
 800e4d0:	080101cd 	.word	0x080101cd
 800e4d4:	240007a8 	.word	0x240007a8

0800e4d8 <cleanup_stdio>:
 800e4d8:	6841      	ldr	r1, [r0, #4]
 800e4da:	4b0c      	ldr	r3, [pc, #48]	; (800e50c <cleanup_stdio+0x34>)
 800e4dc:	4299      	cmp	r1, r3
 800e4de:	b510      	push	{r4, lr}
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	d001      	beq.n	800e4e8 <cleanup_stdio+0x10>
 800e4e4:	f001 fe72 	bl	80101cc <_fflush_r>
 800e4e8:	68a1      	ldr	r1, [r4, #8]
 800e4ea:	4b09      	ldr	r3, [pc, #36]	; (800e510 <cleanup_stdio+0x38>)
 800e4ec:	4299      	cmp	r1, r3
 800e4ee:	d002      	beq.n	800e4f6 <cleanup_stdio+0x1e>
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	f001 fe6b 	bl	80101cc <_fflush_r>
 800e4f6:	68e1      	ldr	r1, [r4, #12]
 800e4f8:	4b06      	ldr	r3, [pc, #24]	; (800e514 <cleanup_stdio+0x3c>)
 800e4fa:	4299      	cmp	r1, r3
 800e4fc:	d004      	beq.n	800e508 <cleanup_stdio+0x30>
 800e4fe:	4620      	mov	r0, r4
 800e500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e504:	f001 be62 	b.w	80101cc <_fflush_r>
 800e508:	bd10      	pop	{r4, pc}
 800e50a:	bf00      	nop
 800e50c:	240029c4 	.word	0x240029c4
 800e510:	24002a2c 	.word	0x24002a2c
 800e514:	24002a94 	.word	0x24002a94

0800e518 <global_stdio_init.part.0>:
 800e518:	b510      	push	{r4, lr}
 800e51a:	4b0b      	ldr	r3, [pc, #44]	; (800e548 <global_stdio_init.part.0+0x30>)
 800e51c:	4c0b      	ldr	r4, [pc, #44]	; (800e54c <global_stdio_init.part.0+0x34>)
 800e51e:	4a0c      	ldr	r2, [pc, #48]	; (800e550 <global_stdio_init.part.0+0x38>)
 800e520:	601a      	str	r2, [r3, #0]
 800e522:	4620      	mov	r0, r4
 800e524:	2200      	movs	r2, #0
 800e526:	2104      	movs	r1, #4
 800e528:	f7ff ff94 	bl	800e454 <std>
 800e52c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e530:	2201      	movs	r2, #1
 800e532:	2109      	movs	r1, #9
 800e534:	f7ff ff8e 	bl	800e454 <std>
 800e538:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e53c:	2202      	movs	r2, #2
 800e53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e542:	2112      	movs	r1, #18
 800e544:	f7ff bf86 	b.w	800e454 <std>
 800e548:	24002afc 	.word	0x24002afc
 800e54c:	240029c4 	.word	0x240029c4
 800e550:	0800e4c1 	.word	0x0800e4c1

0800e554 <__sfp_lock_acquire>:
 800e554:	4801      	ldr	r0, [pc, #4]	; (800e55c <__sfp_lock_acquire+0x8>)
 800e556:	f000 b942 	b.w	800e7de <__retarget_lock_acquire_recursive>
 800e55a:	bf00      	nop
 800e55c:	24002b05 	.word	0x24002b05

0800e560 <__sfp_lock_release>:
 800e560:	4801      	ldr	r0, [pc, #4]	; (800e568 <__sfp_lock_release+0x8>)
 800e562:	f000 b93d 	b.w	800e7e0 <__retarget_lock_release_recursive>
 800e566:	bf00      	nop
 800e568:	24002b05 	.word	0x24002b05

0800e56c <__sinit>:
 800e56c:	b510      	push	{r4, lr}
 800e56e:	4604      	mov	r4, r0
 800e570:	f7ff fff0 	bl	800e554 <__sfp_lock_acquire>
 800e574:	6a23      	ldr	r3, [r4, #32]
 800e576:	b11b      	cbz	r3, 800e580 <__sinit+0x14>
 800e578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e57c:	f7ff bff0 	b.w	800e560 <__sfp_lock_release>
 800e580:	4b04      	ldr	r3, [pc, #16]	; (800e594 <__sinit+0x28>)
 800e582:	6223      	str	r3, [r4, #32]
 800e584:	4b04      	ldr	r3, [pc, #16]	; (800e598 <__sinit+0x2c>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1f5      	bne.n	800e578 <__sinit+0xc>
 800e58c:	f7ff ffc4 	bl	800e518 <global_stdio_init.part.0>
 800e590:	e7f2      	b.n	800e578 <__sinit+0xc>
 800e592:	bf00      	nop
 800e594:	0800e4d9 	.word	0x0800e4d9
 800e598:	24002afc 	.word	0x24002afc

0800e59c <_fwalk_sglue>:
 800e59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5a0:	4607      	mov	r7, r0
 800e5a2:	4688      	mov	r8, r1
 800e5a4:	4614      	mov	r4, r2
 800e5a6:	2600      	movs	r6, #0
 800e5a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5ac:	f1b9 0901 	subs.w	r9, r9, #1
 800e5b0:	d505      	bpl.n	800e5be <_fwalk_sglue+0x22>
 800e5b2:	6824      	ldr	r4, [r4, #0]
 800e5b4:	2c00      	cmp	r4, #0
 800e5b6:	d1f7      	bne.n	800e5a8 <_fwalk_sglue+0xc>
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5be:	89ab      	ldrh	r3, [r5, #12]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d907      	bls.n	800e5d4 <_fwalk_sglue+0x38>
 800e5c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	d003      	beq.n	800e5d4 <_fwalk_sglue+0x38>
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	4638      	mov	r0, r7
 800e5d0:	47c0      	blx	r8
 800e5d2:	4306      	orrs	r6, r0
 800e5d4:	3568      	adds	r5, #104	; 0x68
 800e5d6:	e7e9      	b.n	800e5ac <_fwalk_sglue+0x10>

0800e5d8 <iprintf>:
 800e5d8:	b40f      	push	{r0, r1, r2, r3}
 800e5da:	b507      	push	{r0, r1, r2, lr}
 800e5dc:	4906      	ldr	r1, [pc, #24]	; (800e5f8 <iprintf+0x20>)
 800e5de:	ab04      	add	r3, sp, #16
 800e5e0:	6808      	ldr	r0, [r1, #0]
 800e5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5e6:	6881      	ldr	r1, [r0, #8]
 800e5e8:	9301      	str	r3, [sp, #4]
 800e5ea:	f001 fc4f 	bl	800fe8c <_vfiprintf_r>
 800e5ee:	b003      	add	sp, #12
 800e5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5f4:	b004      	add	sp, #16
 800e5f6:	4770      	bx	lr
 800e5f8:	240007f4 	.word	0x240007f4

0800e5fc <siprintf>:
 800e5fc:	b40e      	push	{r1, r2, r3}
 800e5fe:	b500      	push	{lr}
 800e600:	b09c      	sub	sp, #112	; 0x70
 800e602:	ab1d      	add	r3, sp, #116	; 0x74
 800e604:	9002      	str	r0, [sp, #8]
 800e606:	9006      	str	r0, [sp, #24]
 800e608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e60c:	4809      	ldr	r0, [pc, #36]	; (800e634 <siprintf+0x38>)
 800e60e:	9107      	str	r1, [sp, #28]
 800e610:	9104      	str	r1, [sp, #16]
 800e612:	4909      	ldr	r1, [pc, #36]	; (800e638 <siprintf+0x3c>)
 800e614:	f853 2b04 	ldr.w	r2, [r3], #4
 800e618:	9105      	str	r1, [sp, #20]
 800e61a:	6800      	ldr	r0, [r0, #0]
 800e61c:	9301      	str	r3, [sp, #4]
 800e61e:	a902      	add	r1, sp, #8
 800e620:	f001 fb0c 	bl	800fc3c <_svfiprintf_r>
 800e624:	9b02      	ldr	r3, [sp, #8]
 800e626:	2200      	movs	r2, #0
 800e628:	701a      	strb	r2, [r3, #0]
 800e62a:	b01c      	add	sp, #112	; 0x70
 800e62c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e630:	b003      	add	sp, #12
 800e632:	4770      	bx	lr
 800e634:	240007f4 	.word	0x240007f4
 800e638:	ffff0208 	.word	0xffff0208

0800e63c <__sread>:
 800e63c:	b510      	push	{r4, lr}
 800e63e:	460c      	mov	r4, r1
 800e640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e644:	f000 f86c 	bl	800e720 <_read_r>
 800e648:	2800      	cmp	r0, #0
 800e64a:	bfab      	itete	ge
 800e64c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e64e:	89a3      	ldrhlt	r3, [r4, #12]
 800e650:	181b      	addge	r3, r3, r0
 800e652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e656:	bfac      	ite	ge
 800e658:	6563      	strge	r3, [r4, #84]	; 0x54
 800e65a:	81a3      	strhlt	r3, [r4, #12]
 800e65c:	bd10      	pop	{r4, pc}

0800e65e <__swrite>:
 800e65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e662:	461f      	mov	r7, r3
 800e664:	898b      	ldrh	r3, [r1, #12]
 800e666:	05db      	lsls	r3, r3, #23
 800e668:	4605      	mov	r5, r0
 800e66a:	460c      	mov	r4, r1
 800e66c:	4616      	mov	r6, r2
 800e66e:	d505      	bpl.n	800e67c <__swrite+0x1e>
 800e670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e674:	2302      	movs	r3, #2
 800e676:	2200      	movs	r2, #0
 800e678:	f000 f840 	bl	800e6fc <_lseek_r>
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e686:	81a3      	strh	r3, [r4, #12]
 800e688:	4632      	mov	r2, r6
 800e68a:	463b      	mov	r3, r7
 800e68c:	4628      	mov	r0, r5
 800e68e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e692:	f000 b867 	b.w	800e764 <_write_r>

0800e696 <__sseek>:
 800e696:	b510      	push	{r4, lr}
 800e698:	460c      	mov	r4, r1
 800e69a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e69e:	f000 f82d 	bl	800e6fc <_lseek_r>
 800e6a2:	1c43      	adds	r3, r0, #1
 800e6a4:	89a3      	ldrh	r3, [r4, #12]
 800e6a6:	bf15      	itete	ne
 800e6a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e6aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e6ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e6b2:	81a3      	strheq	r3, [r4, #12]
 800e6b4:	bf18      	it	ne
 800e6b6:	81a3      	strhne	r3, [r4, #12]
 800e6b8:	bd10      	pop	{r4, pc}

0800e6ba <__sclose>:
 800e6ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6be:	f000 b80d 	b.w	800e6dc <_close_r>

0800e6c2 <memset>:
 800e6c2:	4402      	add	r2, r0
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d100      	bne.n	800e6cc <memset+0xa>
 800e6ca:	4770      	bx	lr
 800e6cc:	f803 1b01 	strb.w	r1, [r3], #1
 800e6d0:	e7f9      	b.n	800e6c6 <memset+0x4>
	...

0800e6d4 <_localeconv_r>:
 800e6d4:	4800      	ldr	r0, [pc, #0]	; (800e6d8 <_localeconv_r+0x4>)
 800e6d6:	4770      	bx	lr
 800e6d8:	240008e8 	.word	0x240008e8

0800e6dc <_close_r>:
 800e6dc:	b538      	push	{r3, r4, r5, lr}
 800e6de:	4d06      	ldr	r5, [pc, #24]	; (800e6f8 <_close_r+0x1c>)
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	4608      	mov	r0, r1
 800e6e6:	602b      	str	r3, [r5, #0]
 800e6e8:	f002 f81a 	bl	8010720 <_close>
 800e6ec:	1c43      	adds	r3, r0, #1
 800e6ee:	d102      	bne.n	800e6f6 <_close_r+0x1a>
 800e6f0:	682b      	ldr	r3, [r5, #0]
 800e6f2:	b103      	cbz	r3, 800e6f6 <_close_r+0x1a>
 800e6f4:	6023      	str	r3, [r4, #0]
 800e6f6:	bd38      	pop	{r3, r4, r5, pc}
 800e6f8:	24002b00 	.word	0x24002b00

0800e6fc <_lseek_r>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	4d07      	ldr	r5, [pc, #28]	; (800e71c <_lseek_r+0x20>)
 800e700:	4604      	mov	r4, r0
 800e702:	4608      	mov	r0, r1
 800e704:	4611      	mov	r1, r2
 800e706:	2200      	movs	r2, #0
 800e708:	602a      	str	r2, [r5, #0]
 800e70a:	461a      	mov	r2, r3
 800e70c:	f002 f830 	bl	8010770 <_lseek>
 800e710:	1c43      	adds	r3, r0, #1
 800e712:	d102      	bne.n	800e71a <_lseek_r+0x1e>
 800e714:	682b      	ldr	r3, [r5, #0]
 800e716:	b103      	cbz	r3, 800e71a <_lseek_r+0x1e>
 800e718:	6023      	str	r3, [r4, #0]
 800e71a:	bd38      	pop	{r3, r4, r5, pc}
 800e71c:	24002b00 	.word	0x24002b00

0800e720 <_read_r>:
 800e720:	b538      	push	{r3, r4, r5, lr}
 800e722:	4d07      	ldr	r5, [pc, #28]	; (800e740 <_read_r+0x20>)
 800e724:	4604      	mov	r4, r0
 800e726:	4608      	mov	r0, r1
 800e728:	4611      	mov	r1, r2
 800e72a:	2200      	movs	r2, #0
 800e72c:	602a      	str	r2, [r5, #0]
 800e72e:	461a      	mov	r2, r3
 800e730:	f002 f826 	bl	8010780 <_read>
 800e734:	1c43      	adds	r3, r0, #1
 800e736:	d102      	bne.n	800e73e <_read_r+0x1e>
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	b103      	cbz	r3, 800e73e <_read_r+0x1e>
 800e73c:	6023      	str	r3, [r4, #0]
 800e73e:	bd38      	pop	{r3, r4, r5, pc}
 800e740:	24002b00 	.word	0x24002b00

0800e744 <_sbrk_r>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	4d06      	ldr	r5, [pc, #24]	; (800e760 <_sbrk_r+0x1c>)
 800e748:	2300      	movs	r3, #0
 800e74a:	4604      	mov	r4, r0
 800e74c:	4608      	mov	r0, r1
 800e74e:	602b      	str	r3, [r5, #0]
 800e750:	f7f2 fbc6 	bl	8000ee0 <_sbrk>
 800e754:	1c43      	adds	r3, r0, #1
 800e756:	d102      	bne.n	800e75e <_sbrk_r+0x1a>
 800e758:	682b      	ldr	r3, [r5, #0]
 800e75a:	b103      	cbz	r3, 800e75e <_sbrk_r+0x1a>
 800e75c:	6023      	str	r3, [r4, #0]
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	24002b00 	.word	0x24002b00

0800e764 <_write_r>:
 800e764:	b538      	push	{r3, r4, r5, lr}
 800e766:	4d07      	ldr	r5, [pc, #28]	; (800e784 <_write_r+0x20>)
 800e768:	4604      	mov	r4, r0
 800e76a:	4608      	mov	r0, r1
 800e76c:	4611      	mov	r1, r2
 800e76e:	2200      	movs	r2, #0
 800e770:	602a      	str	r2, [r5, #0]
 800e772:	461a      	mov	r2, r3
 800e774:	f002 f80c 	bl	8010790 <_write>
 800e778:	1c43      	adds	r3, r0, #1
 800e77a:	d102      	bne.n	800e782 <_write_r+0x1e>
 800e77c:	682b      	ldr	r3, [r5, #0]
 800e77e:	b103      	cbz	r3, 800e782 <_write_r+0x1e>
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	bd38      	pop	{r3, r4, r5, pc}
 800e784:	24002b00 	.word	0x24002b00

0800e788 <__errno>:
 800e788:	4b01      	ldr	r3, [pc, #4]	; (800e790 <__errno+0x8>)
 800e78a:	6818      	ldr	r0, [r3, #0]
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop
 800e790:	240007f4 	.word	0x240007f4

0800e794 <__libc_init_array>:
 800e794:	b570      	push	{r4, r5, r6, lr}
 800e796:	4d0d      	ldr	r5, [pc, #52]	; (800e7cc <__libc_init_array+0x38>)
 800e798:	4c0d      	ldr	r4, [pc, #52]	; (800e7d0 <__libc_init_array+0x3c>)
 800e79a:	1b64      	subs	r4, r4, r5
 800e79c:	10a4      	asrs	r4, r4, #2
 800e79e:	2600      	movs	r6, #0
 800e7a0:	42a6      	cmp	r6, r4
 800e7a2:	d109      	bne.n	800e7b8 <__libc_init_array+0x24>
 800e7a4:	4d0b      	ldr	r5, [pc, #44]	; (800e7d4 <__libc_init_array+0x40>)
 800e7a6:	4c0c      	ldr	r4, [pc, #48]	; (800e7d8 <__libc_init_array+0x44>)
 800e7a8:	f001 fffc 	bl	80107a4 <_init>
 800e7ac:	1b64      	subs	r4, r4, r5
 800e7ae:	10a4      	asrs	r4, r4, #2
 800e7b0:	2600      	movs	r6, #0
 800e7b2:	42a6      	cmp	r6, r4
 800e7b4:	d105      	bne.n	800e7c2 <__libc_init_array+0x2e>
 800e7b6:	bd70      	pop	{r4, r5, r6, pc}
 800e7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7bc:	4798      	blx	r3
 800e7be:	3601      	adds	r6, #1
 800e7c0:	e7ee      	b.n	800e7a0 <__libc_init_array+0xc>
 800e7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7c6:	4798      	blx	r3
 800e7c8:	3601      	adds	r6, #1
 800e7ca:	e7f2      	b.n	800e7b2 <__libc_init_array+0x1e>
 800e7cc:	08012170 	.word	0x08012170
 800e7d0:	08012170 	.word	0x08012170
 800e7d4:	08012170 	.word	0x08012170
 800e7d8:	08012174 	.word	0x08012174

0800e7dc <__retarget_lock_init_recursive>:
 800e7dc:	4770      	bx	lr

0800e7de <__retarget_lock_acquire_recursive>:
 800e7de:	4770      	bx	lr

0800e7e0 <__retarget_lock_release_recursive>:
 800e7e0:	4770      	bx	lr

0800e7e2 <memcpy>:
 800e7e2:	440a      	add	r2, r1
 800e7e4:	4291      	cmp	r1, r2
 800e7e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7ea:	d100      	bne.n	800e7ee <memcpy+0xc>
 800e7ec:	4770      	bx	lr
 800e7ee:	b510      	push	{r4, lr}
 800e7f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7f8:	4291      	cmp	r1, r2
 800e7fa:	d1f9      	bne.n	800e7f0 <memcpy+0xe>
 800e7fc:	bd10      	pop	{r4, pc}

0800e7fe <quorem>:
 800e7fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e802:	6903      	ldr	r3, [r0, #16]
 800e804:	690c      	ldr	r4, [r1, #16]
 800e806:	42a3      	cmp	r3, r4
 800e808:	4607      	mov	r7, r0
 800e80a:	db7e      	blt.n	800e90a <quorem+0x10c>
 800e80c:	3c01      	subs	r4, #1
 800e80e:	f101 0814 	add.w	r8, r1, #20
 800e812:	f100 0514 	add.w	r5, r0, #20
 800e816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e81a:	9301      	str	r3, [sp, #4]
 800e81c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e824:	3301      	adds	r3, #1
 800e826:	429a      	cmp	r2, r3
 800e828:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e82c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e830:	fbb2 f6f3 	udiv	r6, r2, r3
 800e834:	d331      	bcc.n	800e89a <quorem+0x9c>
 800e836:	f04f 0e00 	mov.w	lr, #0
 800e83a:	4640      	mov	r0, r8
 800e83c:	46ac      	mov	ip, r5
 800e83e:	46f2      	mov	sl, lr
 800e840:	f850 2b04 	ldr.w	r2, [r0], #4
 800e844:	b293      	uxth	r3, r2
 800e846:	fb06 e303 	mla	r3, r6, r3, lr
 800e84a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e84e:	0c1a      	lsrs	r2, r3, #16
 800e850:	b29b      	uxth	r3, r3
 800e852:	ebaa 0303 	sub.w	r3, sl, r3
 800e856:	f8dc a000 	ldr.w	sl, [ip]
 800e85a:	fa13 f38a 	uxtah	r3, r3, sl
 800e85e:	fb06 220e 	mla	r2, r6, lr, r2
 800e862:	9300      	str	r3, [sp, #0]
 800e864:	9b00      	ldr	r3, [sp, #0]
 800e866:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e86a:	b292      	uxth	r2, r2
 800e86c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e874:	f8bd 3000 	ldrh.w	r3, [sp]
 800e878:	4581      	cmp	r9, r0
 800e87a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e87e:	f84c 3b04 	str.w	r3, [ip], #4
 800e882:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e886:	d2db      	bcs.n	800e840 <quorem+0x42>
 800e888:	f855 300b 	ldr.w	r3, [r5, fp]
 800e88c:	b92b      	cbnz	r3, 800e89a <quorem+0x9c>
 800e88e:	9b01      	ldr	r3, [sp, #4]
 800e890:	3b04      	subs	r3, #4
 800e892:	429d      	cmp	r5, r3
 800e894:	461a      	mov	r2, r3
 800e896:	d32c      	bcc.n	800e8f2 <quorem+0xf4>
 800e898:	613c      	str	r4, [r7, #16]
 800e89a:	4638      	mov	r0, r7
 800e89c:	f001 f86c 	bl	800f978 <__mcmp>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	db22      	blt.n	800e8ea <quorem+0xec>
 800e8a4:	3601      	adds	r6, #1
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	2000      	movs	r0, #0
 800e8aa:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8ae:	f8d1 c000 	ldr.w	ip, [r1]
 800e8b2:	b293      	uxth	r3, r2
 800e8b4:	1ac3      	subs	r3, r0, r3
 800e8b6:	0c12      	lsrs	r2, r2, #16
 800e8b8:	fa13 f38c 	uxtah	r3, r3, ip
 800e8bc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e8c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8ca:	45c1      	cmp	r9, r8
 800e8cc:	f841 3b04 	str.w	r3, [r1], #4
 800e8d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e8d4:	d2e9      	bcs.n	800e8aa <quorem+0xac>
 800e8d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e8de:	b922      	cbnz	r2, 800e8ea <quorem+0xec>
 800e8e0:	3b04      	subs	r3, #4
 800e8e2:	429d      	cmp	r5, r3
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	d30a      	bcc.n	800e8fe <quorem+0x100>
 800e8e8:	613c      	str	r4, [r7, #16]
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	b003      	add	sp, #12
 800e8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f2:	6812      	ldr	r2, [r2, #0]
 800e8f4:	3b04      	subs	r3, #4
 800e8f6:	2a00      	cmp	r2, #0
 800e8f8:	d1ce      	bne.n	800e898 <quorem+0x9a>
 800e8fa:	3c01      	subs	r4, #1
 800e8fc:	e7c9      	b.n	800e892 <quorem+0x94>
 800e8fe:	6812      	ldr	r2, [r2, #0]
 800e900:	3b04      	subs	r3, #4
 800e902:	2a00      	cmp	r2, #0
 800e904:	d1f0      	bne.n	800e8e8 <quorem+0xea>
 800e906:	3c01      	subs	r4, #1
 800e908:	e7eb      	b.n	800e8e2 <quorem+0xe4>
 800e90a:	2000      	movs	r0, #0
 800e90c:	e7ee      	b.n	800e8ec <quorem+0xee>
	...

0800e910 <_dtoa_r>:
 800e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	ed2d 8b02 	vpush	{d8}
 800e918:	69c5      	ldr	r5, [r0, #28]
 800e91a:	b091      	sub	sp, #68	; 0x44
 800e91c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e920:	ec59 8b10 	vmov	r8, r9, d0
 800e924:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800e926:	9106      	str	r1, [sp, #24]
 800e928:	4606      	mov	r6, r0
 800e92a:	9208      	str	r2, [sp, #32]
 800e92c:	930c      	str	r3, [sp, #48]	; 0x30
 800e92e:	b975      	cbnz	r5, 800e94e <_dtoa_r+0x3e>
 800e930:	2010      	movs	r0, #16
 800e932:	f7ff f871 	bl	800da18 <malloc>
 800e936:	4602      	mov	r2, r0
 800e938:	61f0      	str	r0, [r6, #28]
 800e93a:	b920      	cbnz	r0, 800e946 <_dtoa_r+0x36>
 800e93c:	4ba6      	ldr	r3, [pc, #664]	; (800ebd8 <_dtoa_r+0x2c8>)
 800e93e:	21ef      	movs	r1, #239	; 0xef
 800e940:	48a6      	ldr	r0, [pc, #664]	; (800ebdc <_dtoa_r+0x2cc>)
 800e942:	f001 fd1b 	bl	801037c <__assert_func>
 800e946:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e94a:	6005      	str	r5, [r0, #0]
 800e94c:	60c5      	str	r5, [r0, #12]
 800e94e:	69f3      	ldr	r3, [r6, #28]
 800e950:	6819      	ldr	r1, [r3, #0]
 800e952:	b151      	cbz	r1, 800e96a <_dtoa_r+0x5a>
 800e954:	685a      	ldr	r2, [r3, #4]
 800e956:	604a      	str	r2, [r1, #4]
 800e958:	2301      	movs	r3, #1
 800e95a:	4093      	lsls	r3, r2
 800e95c:	608b      	str	r3, [r1, #8]
 800e95e:	4630      	mov	r0, r6
 800e960:	f000 fdce 	bl	800f500 <_Bfree>
 800e964:	69f3      	ldr	r3, [r6, #28]
 800e966:	2200      	movs	r2, #0
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	f1b9 0300 	subs.w	r3, r9, #0
 800e96e:	bfbb      	ittet	lt
 800e970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e974:	9303      	strlt	r3, [sp, #12]
 800e976:	2300      	movge	r3, #0
 800e978:	2201      	movlt	r2, #1
 800e97a:	bfac      	ite	ge
 800e97c:	6023      	strge	r3, [r4, #0]
 800e97e:	6022      	strlt	r2, [r4, #0]
 800e980:	4b97      	ldr	r3, [pc, #604]	; (800ebe0 <_dtoa_r+0x2d0>)
 800e982:	9c03      	ldr	r4, [sp, #12]
 800e984:	43a3      	bics	r3, r4
 800e986:	d11c      	bne.n	800e9c2 <_dtoa_r+0xb2>
 800e988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e98a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e98e:	6013      	str	r3, [r2, #0]
 800e990:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e994:	ea53 0308 	orrs.w	r3, r3, r8
 800e998:	f000 84fb 	beq.w	800f392 <_dtoa_r+0xa82>
 800e99c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e99e:	b963      	cbnz	r3, 800e9ba <_dtoa_r+0xaa>
 800e9a0:	4b90      	ldr	r3, [pc, #576]	; (800ebe4 <_dtoa_r+0x2d4>)
 800e9a2:	e020      	b.n	800e9e6 <_dtoa_r+0xd6>
 800e9a4:	4b90      	ldr	r3, [pc, #576]	; (800ebe8 <_dtoa_r+0x2d8>)
 800e9a6:	9301      	str	r3, [sp, #4]
 800e9a8:	3308      	adds	r3, #8
 800e9aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e9ac:	6013      	str	r3, [r2, #0]
 800e9ae:	9801      	ldr	r0, [sp, #4]
 800e9b0:	b011      	add	sp, #68	; 0x44
 800e9b2:	ecbd 8b02 	vpop	{d8}
 800e9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ba:	4b8a      	ldr	r3, [pc, #552]	; (800ebe4 <_dtoa_r+0x2d4>)
 800e9bc:	9301      	str	r3, [sp, #4]
 800e9be:	3303      	adds	r3, #3
 800e9c0:	e7f3      	b.n	800e9aa <_dtoa_r+0x9a>
 800e9c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800e9c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ce:	d10c      	bne.n	800e9ea <_dtoa_r+0xda>
 800e9d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	6013      	str	r3, [r2, #0]
 800e9d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f000 84d7 	beq.w	800f38c <_dtoa_r+0xa7c>
 800e9de:	4b83      	ldr	r3, [pc, #524]	; (800ebec <_dtoa_r+0x2dc>)
 800e9e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e9e2:	6013      	str	r3, [r2, #0]
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	9301      	str	r3, [sp, #4]
 800e9e8:	e7e1      	b.n	800e9ae <_dtoa_r+0x9e>
 800e9ea:	aa0e      	add	r2, sp, #56	; 0x38
 800e9ec:	a90f      	add	r1, sp, #60	; 0x3c
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	eeb0 0b48 	vmov.f64	d0, d8
 800e9f4:	f001 f866 	bl	800fac4 <__d2b>
 800e9f8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800e9fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9fe:	4605      	mov	r5, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d046      	beq.n	800ea92 <_dtoa_r+0x182>
 800ea04:	eeb0 7b48 	vmov.f64	d7, d8
 800ea08:	ee18 1a90 	vmov	r1, s17
 800ea0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ea10:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ea14:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ea18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	ee07 1a90 	vmov	s15, r1
 800ea22:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800ea26:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800ebc0 <_dtoa_r+0x2b0>
 800ea2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ea2e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800ebc8 <_dtoa_r+0x2b8>
 800ea32:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ea36:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800ebd0 <_dtoa_r+0x2c0>
 800ea3a:	ee07 3a90 	vmov	s15, r3
 800ea3e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ea42:	eeb0 7b46 	vmov.f64	d7, d6
 800ea46:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ea4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ea4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ea52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea56:	ee16 ba90 	vmov	fp, s13
 800ea5a:	9009      	str	r0, [sp, #36]	; 0x24
 800ea5c:	d508      	bpl.n	800ea70 <_dtoa_r+0x160>
 800ea5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ea62:	eeb4 6b47 	vcmp.f64	d6, d7
 800ea66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6a:	bf18      	it	ne
 800ea6c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ea70:	f1bb 0f16 	cmp.w	fp, #22
 800ea74:	d82b      	bhi.n	800eace <_dtoa_r+0x1be>
 800ea76:	495e      	ldr	r1, [pc, #376]	; (800ebf0 <_dtoa_r+0x2e0>)
 800ea78:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ea7c:	ed91 7b00 	vldr	d7, [r1]
 800ea80:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ea84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea88:	d501      	bpl.n	800ea8e <_dtoa_r+0x17e>
 800ea8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea8e:	2100      	movs	r1, #0
 800ea90:	e01e      	b.n	800ead0 <_dtoa_r+0x1c0>
 800ea92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea94:	4413      	add	r3, r2
 800ea96:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800ea9a:	2920      	cmp	r1, #32
 800ea9c:	bfc1      	itttt	gt
 800ea9e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800eaa2:	408c      	lslgt	r4, r1
 800eaa4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800eaa8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800eaac:	bfd6      	itet	le
 800eaae:	f1c1 0120 	rsble	r1, r1, #32
 800eab2:	4321      	orrgt	r1, r4
 800eab4:	fa08 f101 	lslle.w	r1, r8, r1
 800eab8:	ee07 1a90 	vmov	s15, r1
 800eabc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800eac0:	3b01      	subs	r3, #1
 800eac2:	ee17 1a90 	vmov	r1, s15
 800eac6:	2001      	movs	r0, #1
 800eac8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800eacc:	e7a7      	b.n	800ea1e <_dtoa_r+0x10e>
 800eace:	2101      	movs	r1, #1
 800ead0:	1ad2      	subs	r2, r2, r3
 800ead2:	1e53      	subs	r3, r2, #1
 800ead4:	9305      	str	r3, [sp, #20]
 800ead6:	bf45      	ittet	mi
 800ead8:	f1c2 0301 	rsbmi	r3, r2, #1
 800eadc:	9304      	strmi	r3, [sp, #16]
 800eade:	2300      	movpl	r3, #0
 800eae0:	2300      	movmi	r3, #0
 800eae2:	bf4c      	ite	mi
 800eae4:	9305      	strmi	r3, [sp, #20]
 800eae6:	9304      	strpl	r3, [sp, #16]
 800eae8:	f1bb 0f00 	cmp.w	fp, #0
 800eaec:	910b      	str	r1, [sp, #44]	; 0x2c
 800eaee:	db18      	blt.n	800eb22 <_dtoa_r+0x212>
 800eaf0:	9b05      	ldr	r3, [sp, #20]
 800eaf2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800eaf6:	445b      	add	r3, fp
 800eaf8:	9305      	str	r3, [sp, #20]
 800eafa:	2300      	movs	r3, #0
 800eafc:	9a06      	ldr	r2, [sp, #24]
 800eafe:	2a09      	cmp	r2, #9
 800eb00:	d848      	bhi.n	800eb94 <_dtoa_r+0x284>
 800eb02:	2a05      	cmp	r2, #5
 800eb04:	bfc4      	itt	gt
 800eb06:	3a04      	subgt	r2, #4
 800eb08:	9206      	strgt	r2, [sp, #24]
 800eb0a:	9a06      	ldr	r2, [sp, #24]
 800eb0c:	f1a2 0202 	sub.w	r2, r2, #2
 800eb10:	bfcc      	ite	gt
 800eb12:	2400      	movgt	r4, #0
 800eb14:	2401      	movle	r4, #1
 800eb16:	2a03      	cmp	r2, #3
 800eb18:	d847      	bhi.n	800ebaa <_dtoa_r+0x29a>
 800eb1a:	e8df f002 	tbb	[pc, r2]
 800eb1e:	2d0b      	.short	0x2d0b
 800eb20:	392b      	.short	0x392b
 800eb22:	9b04      	ldr	r3, [sp, #16]
 800eb24:	2200      	movs	r2, #0
 800eb26:	eba3 030b 	sub.w	r3, r3, fp
 800eb2a:	9304      	str	r3, [sp, #16]
 800eb2c:	920a      	str	r2, [sp, #40]	; 0x28
 800eb2e:	f1cb 0300 	rsb	r3, fp, #0
 800eb32:	e7e3      	b.n	800eafc <_dtoa_r+0x1ec>
 800eb34:	2200      	movs	r2, #0
 800eb36:	9207      	str	r2, [sp, #28]
 800eb38:	9a08      	ldr	r2, [sp, #32]
 800eb3a:	2a00      	cmp	r2, #0
 800eb3c:	dc38      	bgt.n	800ebb0 <_dtoa_r+0x2a0>
 800eb3e:	f04f 0a01 	mov.w	sl, #1
 800eb42:	46d1      	mov	r9, sl
 800eb44:	4652      	mov	r2, sl
 800eb46:	f8cd a020 	str.w	sl, [sp, #32]
 800eb4a:	69f7      	ldr	r7, [r6, #28]
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	2004      	movs	r0, #4
 800eb50:	f100 0c14 	add.w	ip, r0, #20
 800eb54:	4594      	cmp	ip, r2
 800eb56:	d930      	bls.n	800ebba <_dtoa_r+0x2aa>
 800eb58:	6079      	str	r1, [r7, #4]
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	930d      	str	r3, [sp, #52]	; 0x34
 800eb5e:	f000 fc8f 	bl	800f480 <_Balloc>
 800eb62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb64:	9001      	str	r0, [sp, #4]
 800eb66:	4602      	mov	r2, r0
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	d145      	bne.n	800ebf8 <_dtoa_r+0x2e8>
 800eb6c:	4b21      	ldr	r3, [pc, #132]	; (800ebf4 <_dtoa_r+0x2e4>)
 800eb6e:	f240 11af 	movw	r1, #431	; 0x1af
 800eb72:	e6e5      	b.n	800e940 <_dtoa_r+0x30>
 800eb74:	2201      	movs	r2, #1
 800eb76:	e7de      	b.n	800eb36 <_dtoa_r+0x226>
 800eb78:	2200      	movs	r2, #0
 800eb7a:	9207      	str	r2, [sp, #28]
 800eb7c:	9a08      	ldr	r2, [sp, #32]
 800eb7e:	eb0b 0a02 	add.w	sl, fp, r2
 800eb82:	f10a 0901 	add.w	r9, sl, #1
 800eb86:	464a      	mov	r2, r9
 800eb88:	2a01      	cmp	r2, #1
 800eb8a:	bfb8      	it	lt
 800eb8c:	2201      	movlt	r2, #1
 800eb8e:	e7dc      	b.n	800eb4a <_dtoa_r+0x23a>
 800eb90:	2201      	movs	r2, #1
 800eb92:	e7f2      	b.n	800eb7a <_dtoa_r+0x26a>
 800eb94:	2401      	movs	r4, #1
 800eb96:	2200      	movs	r2, #0
 800eb98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800eb9c:	f04f 3aff 	mov.w	sl, #4294967295
 800eba0:	2100      	movs	r1, #0
 800eba2:	46d1      	mov	r9, sl
 800eba4:	2212      	movs	r2, #18
 800eba6:	9108      	str	r1, [sp, #32]
 800eba8:	e7cf      	b.n	800eb4a <_dtoa_r+0x23a>
 800ebaa:	2201      	movs	r2, #1
 800ebac:	9207      	str	r2, [sp, #28]
 800ebae:	e7f5      	b.n	800eb9c <_dtoa_r+0x28c>
 800ebb0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ebb4:	46d1      	mov	r9, sl
 800ebb6:	4652      	mov	r2, sl
 800ebb8:	e7c7      	b.n	800eb4a <_dtoa_r+0x23a>
 800ebba:	3101      	adds	r1, #1
 800ebbc:	0040      	lsls	r0, r0, #1
 800ebbe:	e7c7      	b.n	800eb50 <_dtoa_r+0x240>
 800ebc0:	636f4361 	.word	0x636f4361
 800ebc4:	3fd287a7 	.word	0x3fd287a7
 800ebc8:	8b60c8b3 	.word	0x8b60c8b3
 800ebcc:	3fc68a28 	.word	0x3fc68a28
 800ebd0:	509f79fb 	.word	0x509f79fb
 800ebd4:	3fd34413 	.word	0x3fd34413
 800ebd8:	08011ce9 	.word	0x08011ce9
 800ebdc:	08011d00 	.word	0x08011d00
 800ebe0:	7ff00000 	.word	0x7ff00000
 800ebe4:	08011ce5 	.word	0x08011ce5
 800ebe8:	08011cdc 	.word	0x08011cdc
 800ebec:	08011cb9 	.word	0x08011cb9
 800ebf0:	08011df0 	.word	0x08011df0
 800ebf4:	08011d58 	.word	0x08011d58
 800ebf8:	69f2      	ldr	r2, [r6, #28]
 800ebfa:	9901      	ldr	r1, [sp, #4]
 800ebfc:	6011      	str	r1, [r2, #0]
 800ebfe:	f1b9 0f0e 	cmp.w	r9, #14
 800ec02:	d86c      	bhi.n	800ecde <_dtoa_r+0x3ce>
 800ec04:	2c00      	cmp	r4, #0
 800ec06:	d06a      	beq.n	800ecde <_dtoa_r+0x3ce>
 800ec08:	f1bb 0f00 	cmp.w	fp, #0
 800ec0c:	f340 80a0 	ble.w	800ed50 <_dtoa_r+0x440>
 800ec10:	4ac1      	ldr	r2, [pc, #772]	; (800ef18 <_dtoa_r+0x608>)
 800ec12:	f00b 010f 	and.w	r1, fp, #15
 800ec16:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ec1a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ec1e:	ed92 7b00 	vldr	d7, [r2]
 800ec22:	ea4f 122b 	mov.w	r2, fp, asr #4
 800ec26:	f000 8087 	beq.w	800ed38 <_dtoa_r+0x428>
 800ec2a:	49bc      	ldr	r1, [pc, #752]	; (800ef1c <_dtoa_r+0x60c>)
 800ec2c:	ed91 6b08 	vldr	d6, [r1, #32]
 800ec30:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ec34:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ec38:	f002 020f 	and.w	r2, r2, #15
 800ec3c:	2103      	movs	r1, #3
 800ec3e:	48b7      	ldr	r0, [pc, #732]	; (800ef1c <_dtoa_r+0x60c>)
 800ec40:	2a00      	cmp	r2, #0
 800ec42:	d17b      	bne.n	800ed3c <_dtoa_r+0x42c>
 800ec44:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ec48:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ec4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec52:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec56:	2a00      	cmp	r2, #0
 800ec58:	f000 80a0 	beq.w	800ed9c <_dtoa_r+0x48c>
 800ec5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ec60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec68:	f140 8098 	bpl.w	800ed9c <_dtoa_r+0x48c>
 800ec6c:	f1b9 0f00 	cmp.w	r9, #0
 800ec70:	f000 8094 	beq.w	800ed9c <_dtoa_r+0x48c>
 800ec74:	f1ba 0f00 	cmp.w	sl, #0
 800ec78:	dd2f      	ble.n	800ecda <_dtoa_r+0x3ca>
 800ec7a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ec7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ec82:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec86:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ec8a:	3101      	adds	r1, #1
 800ec8c:	4654      	mov	r4, sl
 800ec8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ec92:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ec96:	ee07 1a90 	vmov	s15, r1
 800ec9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec9e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800eca2:	ee15 7a90 	vmov	r7, s11
 800eca6:	ec51 0b15 	vmov	r0, r1, d5
 800ecaa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800ecae:	2c00      	cmp	r4, #0
 800ecb0:	d177      	bne.n	800eda2 <_dtoa_r+0x492>
 800ecb2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ecb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ecba:	ec41 0b17 	vmov	d7, r0, r1
 800ecbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ecc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc6:	f300 826a 	bgt.w	800f19e <_dtoa_r+0x88e>
 800ecca:	eeb1 7b47 	vneg.f64	d7, d7
 800ecce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ecd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd6:	f100 8260 	bmi.w	800f19a <_dtoa_r+0x88a>
 800ecda:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ecde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ece0:	2a00      	cmp	r2, #0
 800ece2:	f2c0 811d 	blt.w	800ef20 <_dtoa_r+0x610>
 800ece6:	f1bb 0f0e 	cmp.w	fp, #14
 800ecea:	f300 8119 	bgt.w	800ef20 <_dtoa_r+0x610>
 800ecee:	4b8a      	ldr	r3, [pc, #552]	; (800ef18 <_dtoa_r+0x608>)
 800ecf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ecf4:	ed93 6b00 	vldr	d6, [r3]
 800ecf8:	9b08      	ldr	r3, [sp, #32]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f280 80b7 	bge.w	800ee6e <_dtoa_r+0x55e>
 800ed00:	f1b9 0f00 	cmp.w	r9, #0
 800ed04:	f300 80b3 	bgt.w	800ee6e <_dtoa_r+0x55e>
 800ed08:	f040 8246 	bne.w	800f198 <_dtoa_r+0x888>
 800ed0c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ed10:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ed14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ed1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed20:	464c      	mov	r4, r9
 800ed22:	464f      	mov	r7, r9
 800ed24:	f280 821c 	bge.w	800f160 <_dtoa_r+0x850>
 800ed28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ed2c:	2331      	movs	r3, #49	; 0x31
 800ed2e:	f808 3b01 	strb.w	r3, [r8], #1
 800ed32:	f10b 0b01 	add.w	fp, fp, #1
 800ed36:	e218      	b.n	800f16a <_dtoa_r+0x85a>
 800ed38:	2102      	movs	r1, #2
 800ed3a:	e780      	b.n	800ec3e <_dtoa_r+0x32e>
 800ed3c:	07d4      	lsls	r4, r2, #31
 800ed3e:	d504      	bpl.n	800ed4a <_dtoa_r+0x43a>
 800ed40:	ed90 6b00 	vldr	d6, [r0]
 800ed44:	3101      	adds	r1, #1
 800ed46:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed4a:	1052      	asrs	r2, r2, #1
 800ed4c:	3008      	adds	r0, #8
 800ed4e:	e777      	b.n	800ec40 <_dtoa_r+0x330>
 800ed50:	d022      	beq.n	800ed98 <_dtoa_r+0x488>
 800ed52:	f1cb 0200 	rsb	r2, fp, #0
 800ed56:	4970      	ldr	r1, [pc, #448]	; (800ef18 <_dtoa_r+0x608>)
 800ed58:	f002 000f 	and.w	r0, r2, #15
 800ed5c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ed60:	ed91 7b00 	vldr	d7, [r1]
 800ed64:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ed68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ed6c:	486b      	ldr	r0, [pc, #428]	; (800ef1c <_dtoa_r+0x60c>)
 800ed6e:	1112      	asrs	r2, r2, #4
 800ed70:	2400      	movs	r4, #0
 800ed72:	2102      	movs	r1, #2
 800ed74:	b92a      	cbnz	r2, 800ed82 <_dtoa_r+0x472>
 800ed76:	2c00      	cmp	r4, #0
 800ed78:	f43f af6a 	beq.w	800ec50 <_dtoa_r+0x340>
 800ed7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ed80:	e766      	b.n	800ec50 <_dtoa_r+0x340>
 800ed82:	07d7      	lsls	r7, r2, #31
 800ed84:	d505      	bpl.n	800ed92 <_dtoa_r+0x482>
 800ed86:	ed90 6b00 	vldr	d6, [r0]
 800ed8a:	3101      	adds	r1, #1
 800ed8c:	2401      	movs	r4, #1
 800ed8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed92:	1052      	asrs	r2, r2, #1
 800ed94:	3008      	adds	r0, #8
 800ed96:	e7ed      	b.n	800ed74 <_dtoa_r+0x464>
 800ed98:	2102      	movs	r1, #2
 800ed9a:	e759      	b.n	800ec50 <_dtoa_r+0x340>
 800ed9c:	465a      	mov	r2, fp
 800ed9e:	464c      	mov	r4, r9
 800eda0:	e775      	b.n	800ec8e <_dtoa_r+0x37e>
 800eda2:	ec41 0b17 	vmov	d7, r0, r1
 800eda6:	495c      	ldr	r1, [pc, #368]	; (800ef18 <_dtoa_r+0x608>)
 800eda8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800edac:	ed11 4b02 	vldr	d4, [r1, #-8]
 800edb0:	9901      	ldr	r1, [sp, #4]
 800edb2:	440c      	add	r4, r1
 800edb4:	9907      	ldr	r1, [sp, #28]
 800edb6:	b351      	cbz	r1, 800ee0e <_dtoa_r+0x4fe>
 800edb8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800edbc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800edc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800edc4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800edc8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800edcc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800edd0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800edd4:	ee14 1a90 	vmov	r1, s9
 800edd8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800eddc:	3130      	adds	r1, #48	; 0x30
 800edde:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ede2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ede6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edea:	f808 1b01 	strb.w	r1, [r8], #1
 800edee:	d439      	bmi.n	800ee64 <_dtoa_r+0x554>
 800edf0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800edf4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800edf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfc:	d472      	bmi.n	800eee4 <_dtoa_r+0x5d4>
 800edfe:	45a0      	cmp	r8, r4
 800ee00:	f43f af6b 	beq.w	800ecda <_dtoa_r+0x3ca>
 800ee04:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ee08:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ee0c:	e7e0      	b.n	800edd0 <_dtoa_r+0x4c0>
 800ee0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ee12:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ee16:	4620      	mov	r0, r4
 800ee18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ee1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ee20:	ee14 1a90 	vmov	r1, s9
 800ee24:	3130      	adds	r1, #48	; 0x30
 800ee26:	f808 1b01 	strb.w	r1, [r8], #1
 800ee2a:	45a0      	cmp	r8, r4
 800ee2c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ee30:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ee34:	d118      	bne.n	800ee68 <_dtoa_r+0x558>
 800ee36:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ee3a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ee3e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ee42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee46:	dc4d      	bgt.n	800eee4 <_dtoa_r+0x5d4>
 800ee48:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ee4c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ee50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee54:	f57f af41 	bpl.w	800ecda <_dtoa_r+0x3ca>
 800ee58:	4680      	mov	r8, r0
 800ee5a:	3801      	subs	r0, #1
 800ee5c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ee60:	2b30      	cmp	r3, #48	; 0x30
 800ee62:	d0f9      	beq.n	800ee58 <_dtoa_r+0x548>
 800ee64:	4693      	mov	fp, r2
 800ee66:	e02a      	b.n	800eebe <_dtoa_r+0x5ae>
 800ee68:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ee6c:	e7d6      	b.n	800ee1c <_dtoa_r+0x50c>
 800ee6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee72:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ee76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ee7a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ee7e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ee82:	ee15 3a10 	vmov	r3, s10
 800ee86:	3330      	adds	r3, #48	; 0x30
 800ee88:	f808 3b01 	strb.w	r3, [r8], #1
 800ee8c:	9b01      	ldr	r3, [sp, #4]
 800ee8e:	eba8 0303 	sub.w	r3, r8, r3
 800ee92:	4599      	cmp	r9, r3
 800ee94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ee98:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ee9c:	d133      	bne.n	800ef06 <_dtoa_r+0x5f6>
 800ee9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800eea2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800eea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeaa:	dc1a      	bgt.n	800eee2 <_dtoa_r+0x5d2>
 800eeac:	eeb4 7b46 	vcmp.f64	d7, d6
 800eeb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb4:	d103      	bne.n	800eebe <_dtoa_r+0x5ae>
 800eeb6:	ee15 3a10 	vmov	r3, s10
 800eeba:	07d9      	lsls	r1, r3, #31
 800eebc:	d411      	bmi.n	800eee2 <_dtoa_r+0x5d2>
 800eebe:	4629      	mov	r1, r5
 800eec0:	4630      	mov	r0, r6
 800eec2:	f000 fb1d 	bl	800f500 <_Bfree>
 800eec6:	2300      	movs	r3, #0
 800eec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eeca:	f888 3000 	strb.w	r3, [r8]
 800eece:	f10b 0301 	add.w	r3, fp, #1
 800eed2:	6013      	str	r3, [r2, #0]
 800eed4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f43f ad69 	beq.w	800e9ae <_dtoa_r+0x9e>
 800eedc:	f8c3 8000 	str.w	r8, [r3]
 800eee0:	e565      	b.n	800e9ae <_dtoa_r+0x9e>
 800eee2:	465a      	mov	r2, fp
 800eee4:	4643      	mov	r3, r8
 800eee6:	4698      	mov	r8, r3
 800eee8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800eeec:	2939      	cmp	r1, #57	; 0x39
 800eeee:	d106      	bne.n	800eefe <_dtoa_r+0x5ee>
 800eef0:	9901      	ldr	r1, [sp, #4]
 800eef2:	4299      	cmp	r1, r3
 800eef4:	d1f7      	bne.n	800eee6 <_dtoa_r+0x5d6>
 800eef6:	9801      	ldr	r0, [sp, #4]
 800eef8:	2130      	movs	r1, #48	; 0x30
 800eefa:	3201      	adds	r2, #1
 800eefc:	7001      	strb	r1, [r0, #0]
 800eefe:	7819      	ldrb	r1, [r3, #0]
 800ef00:	3101      	adds	r1, #1
 800ef02:	7019      	strb	r1, [r3, #0]
 800ef04:	e7ae      	b.n	800ee64 <_dtoa_r+0x554>
 800ef06:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ef0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef12:	d1b2      	bne.n	800ee7a <_dtoa_r+0x56a>
 800ef14:	e7d3      	b.n	800eebe <_dtoa_r+0x5ae>
 800ef16:	bf00      	nop
 800ef18:	08011df0 	.word	0x08011df0
 800ef1c:	08011dc8 	.word	0x08011dc8
 800ef20:	9907      	ldr	r1, [sp, #28]
 800ef22:	2900      	cmp	r1, #0
 800ef24:	f000 80d0 	beq.w	800f0c8 <_dtoa_r+0x7b8>
 800ef28:	9906      	ldr	r1, [sp, #24]
 800ef2a:	2901      	cmp	r1, #1
 800ef2c:	f300 80b4 	bgt.w	800f098 <_dtoa_r+0x788>
 800ef30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef32:	2900      	cmp	r1, #0
 800ef34:	f000 80ac 	beq.w	800f090 <_dtoa_r+0x780>
 800ef38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ef3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ef40:	461c      	mov	r4, r3
 800ef42:	9309      	str	r3, [sp, #36]	; 0x24
 800ef44:	9b04      	ldr	r3, [sp, #16]
 800ef46:	4413      	add	r3, r2
 800ef48:	9304      	str	r3, [sp, #16]
 800ef4a:	9b05      	ldr	r3, [sp, #20]
 800ef4c:	2101      	movs	r1, #1
 800ef4e:	4413      	add	r3, r2
 800ef50:	4630      	mov	r0, r6
 800ef52:	9305      	str	r3, [sp, #20]
 800ef54:	f000 fb8a 	bl	800f66c <__i2b>
 800ef58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef5a:	4607      	mov	r7, r0
 800ef5c:	f1b8 0f00 	cmp.w	r8, #0
 800ef60:	d00d      	beq.n	800ef7e <_dtoa_r+0x66e>
 800ef62:	9a05      	ldr	r2, [sp, #20]
 800ef64:	2a00      	cmp	r2, #0
 800ef66:	dd0a      	ble.n	800ef7e <_dtoa_r+0x66e>
 800ef68:	4542      	cmp	r2, r8
 800ef6a:	9904      	ldr	r1, [sp, #16]
 800ef6c:	bfa8      	it	ge
 800ef6e:	4642      	movge	r2, r8
 800ef70:	1a89      	subs	r1, r1, r2
 800ef72:	9104      	str	r1, [sp, #16]
 800ef74:	9905      	ldr	r1, [sp, #20]
 800ef76:	eba8 0802 	sub.w	r8, r8, r2
 800ef7a:	1a8a      	subs	r2, r1, r2
 800ef7c:	9205      	str	r2, [sp, #20]
 800ef7e:	b303      	cbz	r3, 800efc2 <_dtoa_r+0x6b2>
 800ef80:	9a07      	ldr	r2, [sp, #28]
 800ef82:	2a00      	cmp	r2, #0
 800ef84:	f000 80a5 	beq.w	800f0d2 <_dtoa_r+0x7c2>
 800ef88:	2c00      	cmp	r4, #0
 800ef8a:	dd13      	ble.n	800efb4 <_dtoa_r+0x6a4>
 800ef8c:	4639      	mov	r1, r7
 800ef8e:	4622      	mov	r2, r4
 800ef90:	4630      	mov	r0, r6
 800ef92:	930d      	str	r3, [sp, #52]	; 0x34
 800ef94:	f000 fc2a 	bl	800f7ec <__pow5mult>
 800ef98:	462a      	mov	r2, r5
 800ef9a:	4601      	mov	r1, r0
 800ef9c:	4607      	mov	r7, r0
 800ef9e:	4630      	mov	r0, r6
 800efa0:	f000 fb7a 	bl	800f698 <__multiply>
 800efa4:	4629      	mov	r1, r5
 800efa6:	9009      	str	r0, [sp, #36]	; 0x24
 800efa8:	4630      	mov	r0, r6
 800efaa:	f000 faa9 	bl	800f500 <_Bfree>
 800efae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efb2:	4615      	mov	r5, r2
 800efb4:	1b1a      	subs	r2, r3, r4
 800efb6:	d004      	beq.n	800efc2 <_dtoa_r+0x6b2>
 800efb8:	4629      	mov	r1, r5
 800efba:	4630      	mov	r0, r6
 800efbc:	f000 fc16 	bl	800f7ec <__pow5mult>
 800efc0:	4605      	mov	r5, r0
 800efc2:	2101      	movs	r1, #1
 800efc4:	4630      	mov	r0, r6
 800efc6:	f000 fb51 	bl	800f66c <__i2b>
 800efca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efcc:	2b00      	cmp	r3, #0
 800efce:	4604      	mov	r4, r0
 800efd0:	f340 8081 	ble.w	800f0d6 <_dtoa_r+0x7c6>
 800efd4:	461a      	mov	r2, r3
 800efd6:	4601      	mov	r1, r0
 800efd8:	4630      	mov	r0, r6
 800efda:	f000 fc07 	bl	800f7ec <__pow5mult>
 800efde:	9b06      	ldr	r3, [sp, #24]
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	4604      	mov	r4, r0
 800efe4:	dd7a      	ble.n	800f0dc <_dtoa_r+0x7cc>
 800efe6:	2300      	movs	r3, #0
 800efe8:	9309      	str	r3, [sp, #36]	; 0x24
 800efea:	6922      	ldr	r2, [r4, #16]
 800efec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800eff0:	6910      	ldr	r0, [r2, #16]
 800eff2:	f000 faed 	bl	800f5d0 <__hi0bits>
 800eff6:	f1c0 0020 	rsb	r0, r0, #32
 800effa:	9b05      	ldr	r3, [sp, #20]
 800effc:	4418      	add	r0, r3
 800effe:	f010 001f 	ands.w	r0, r0, #31
 800f002:	f000 8093 	beq.w	800f12c <_dtoa_r+0x81c>
 800f006:	f1c0 0220 	rsb	r2, r0, #32
 800f00a:	2a04      	cmp	r2, #4
 800f00c:	f340 8085 	ble.w	800f11a <_dtoa_r+0x80a>
 800f010:	9b04      	ldr	r3, [sp, #16]
 800f012:	f1c0 001c 	rsb	r0, r0, #28
 800f016:	4403      	add	r3, r0
 800f018:	9304      	str	r3, [sp, #16]
 800f01a:	9b05      	ldr	r3, [sp, #20]
 800f01c:	4480      	add	r8, r0
 800f01e:	4403      	add	r3, r0
 800f020:	9305      	str	r3, [sp, #20]
 800f022:	9b04      	ldr	r3, [sp, #16]
 800f024:	2b00      	cmp	r3, #0
 800f026:	dd05      	ble.n	800f034 <_dtoa_r+0x724>
 800f028:	4629      	mov	r1, r5
 800f02a:	461a      	mov	r2, r3
 800f02c:	4630      	mov	r0, r6
 800f02e:	f000 fc37 	bl	800f8a0 <__lshift>
 800f032:	4605      	mov	r5, r0
 800f034:	9b05      	ldr	r3, [sp, #20]
 800f036:	2b00      	cmp	r3, #0
 800f038:	dd05      	ble.n	800f046 <_dtoa_r+0x736>
 800f03a:	4621      	mov	r1, r4
 800f03c:	461a      	mov	r2, r3
 800f03e:	4630      	mov	r0, r6
 800f040:	f000 fc2e 	bl	800f8a0 <__lshift>
 800f044:	4604      	mov	r4, r0
 800f046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d071      	beq.n	800f130 <_dtoa_r+0x820>
 800f04c:	4621      	mov	r1, r4
 800f04e:	4628      	mov	r0, r5
 800f050:	f000 fc92 	bl	800f978 <__mcmp>
 800f054:	2800      	cmp	r0, #0
 800f056:	da6b      	bge.n	800f130 <_dtoa_r+0x820>
 800f058:	2300      	movs	r3, #0
 800f05a:	4629      	mov	r1, r5
 800f05c:	220a      	movs	r2, #10
 800f05e:	4630      	mov	r0, r6
 800f060:	f000 fa70 	bl	800f544 <__multadd>
 800f064:	9b07      	ldr	r3, [sp, #28]
 800f066:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f06a:	4605      	mov	r5, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f000 8197 	beq.w	800f3a0 <_dtoa_r+0xa90>
 800f072:	4639      	mov	r1, r7
 800f074:	2300      	movs	r3, #0
 800f076:	220a      	movs	r2, #10
 800f078:	4630      	mov	r0, r6
 800f07a:	f000 fa63 	bl	800f544 <__multadd>
 800f07e:	f1ba 0f00 	cmp.w	sl, #0
 800f082:	4607      	mov	r7, r0
 800f084:	f300 8093 	bgt.w	800f1ae <_dtoa_r+0x89e>
 800f088:	9b06      	ldr	r3, [sp, #24]
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	dc57      	bgt.n	800f13e <_dtoa_r+0x82e>
 800f08e:	e08e      	b.n	800f1ae <_dtoa_r+0x89e>
 800f090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f092:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f096:	e751      	b.n	800ef3c <_dtoa_r+0x62c>
 800f098:	f109 34ff 	add.w	r4, r9, #4294967295
 800f09c:	42a3      	cmp	r3, r4
 800f09e:	bfbf      	itttt	lt
 800f0a0:	1ae2      	sublt	r2, r4, r3
 800f0a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f0a4:	189b      	addlt	r3, r3, r2
 800f0a6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f0a8:	bfae      	itee	ge
 800f0aa:	1b1c      	subge	r4, r3, r4
 800f0ac:	4623      	movlt	r3, r4
 800f0ae:	2400      	movlt	r4, #0
 800f0b0:	f1b9 0f00 	cmp.w	r9, #0
 800f0b4:	bfb5      	itete	lt
 800f0b6:	9a04      	ldrlt	r2, [sp, #16]
 800f0b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800f0bc:	eba2 0809 	sublt.w	r8, r2, r9
 800f0c0:	464a      	movge	r2, r9
 800f0c2:	bfb8      	it	lt
 800f0c4:	2200      	movlt	r2, #0
 800f0c6:	e73c      	b.n	800ef42 <_dtoa_r+0x632>
 800f0c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f0cc:	9f07      	ldr	r7, [sp, #28]
 800f0ce:	461c      	mov	r4, r3
 800f0d0:	e744      	b.n	800ef5c <_dtoa_r+0x64c>
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	e770      	b.n	800efb8 <_dtoa_r+0x6a8>
 800f0d6:	9b06      	ldr	r3, [sp, #24]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	dc18      	bgt.n	800f10e <_dtoa_r+0x7fe>
 800f0dc:	9b02      	ldr	r3, [sp, #8]
 800f0de:	b9b3      	cbnz	r3, 800f10e <_dtoa_r+0x7fe>
 800f0e0:	9b03      	ldr	r3, [sp, #12]
 800f0e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f0e6:	b9a2      	cbnz	r2, 800f112 <_dtoa_r+0x802>
 800f0e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f0ec:	0d12      	lsrs	r2, r2, #20
 800f0ee:	0512      	lsls	r2, r2, #20
 800f0f0:	b18a      	cbz	r2, 800f116 <_dtoa_r+0x806>
 800f0f2:	9b04      	ldr	r3, [sp, #16]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	9304      	str	r3, [sp, #16]
 800f0f8:	9b05      	ldr	r3, [sp, #20]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	9305      	str	r3, [sp, #20]
 800f0fe:	2301      	movs	r3, #1
 800f100:	9309      	str	r3, [sp, #36]	; 0x24
 800f102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f104:	2b00      	cmp	r3, #0
 800f106:	f47f af70 	bne.w	800efea <_dtoa_r+0x6da>
 800f10a:	2001      	movs	r0, #1
 800f10c:	e775      	b.n	800effa <_dtoa_r+0x6ea>
 800f10e:	2300      	movs	r3, #0
 800f110:	e7f6      	b.n	800f100 <_dtoa_r+0x7f0>
 800f112:	9b02      	ldr	r3, [sp, #8]
 800f114:	e7f4      	b.n	800f100 <_dtoa_r+0x7f0>
 800f116:	9209      	str	r2, [sp, #36]	; 0x24
 800f118:	e7f3      	b.n	800f102 <_dtoa_r+0x7f2>
 800f11a:	d082      	beq.n	800f022 <_dtoa_r+0x712>
 800f11c:	9b04      	ldr	r3, [sp, #16]
 800f11e:	321c      	adds	r2, #28
 800f120:	4413      	add	r3, r2
 800f122:	9304      	str	r3, [sp, #16]
 800f124:	9b05      	ldr	r3, [sp, #20]
 800f126:	4490      	add	r8, r2
 800f128:	4413      	add	r3, r2
 800f12a:	e779      	b.n	800f020 <_dtoa_r+0x710>
 800f12c:	4602      	mov	r2, r0
 800f12e:	e7f5      	b.n	800f11c <_dtoa_r+0x80c>
 800f130:	f1b9 0f00 	cmp.w	r9, #0
 800f134:	dc36      	bgt.n	800f1a4 <_dtoa_r+0x894>
 800f136:	9b06      	ldr	r3, [sp, #24]
 800f138:	2b02      	cmp	r3, #2
 800f13a:	dd33      	ble.n	800f1a4 <_dtoa_r+0x894>
 800f13c:	46ca      	mov	sl, r9
 800f13e:	f1ba 0f00 	cmp.w	sl, #0
 800f142:	d10d      	bne.n	800f160 <_dtoa_r+0x850>
 800f144:	4621      	mov	r1, r4
 800f146:	4653      	mov	r3, sl
 800f148:	2205      	movs	r2, #5
 800f14a:	4630      	mov	r0, r6
 800f14c:	f000 f9fa 	bl	800f544 <__multadd>
 800f150:	4601      	mov	r1, r0
 800f152:	4604      	mov	r4, r0
 800f154:	4628      	mov	r0, r5
 800f156:	f000 fc0f 	bl	800f978 <__mcmp>
 800f15a:	2800      	cmp	r0, #0
 800f15c:	f73f ade4 	bgt.w	800ed28 <_dtoa_r+0x418>
 800f160:	9b08      	ldr	r3, [sp, #32]
 800f162:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f166:	ea6f 0b03 	mvn.w	fp, r3
 800f16a:	f04f 0900 	mov.w	r9, #0
 800f16e:	4621      	mov	r1, r4
 800f170:	4630      	mov	r0, r6
 800f172:	f000 f9c5 	bl	800f500 <_Bfree>
 800f176:	2f00      	cmp	r7, #0
 800f178:	f43f aea1 	beq.w	800eebe <_dtoa_r+0x5ae>
 800f17c:	f1b9 0f00 	cmp.w	r9, #0
 800f180:	d005      	beq.n	800f18e <_dtoa_r+0x87e>
 800f182:	45b9      	cmp	r9, r7
 800f184:	d003      	beq.n	800f18e <_dtoa_r+0x87e>
 800f186:	4649      	mov	r1, r9
 800f188:	4630      	mov	r0, r6
 800f18a:	f000 f9b9 	bl	800f500 <_Bfree>
 800f18e:	4639      	mov	r1, r7
 800f190:	4630      	mov	r0, r6
 800f192:	f000 f9b5 	bl	800f500 <_Bfree>
 800f196:	e692      	b.n	800eebe <_dtoa_r+0x5ae>
 800f198:	2400      	movs	r4, #0
 800f19a:	4627      	mov	r7, r4
 800f19c:	e7e0      	b.n	800f160 <_dtoa_r+0x850>
 800f19e:	4693      	mov	fp, r2
 800f1a0:	4627      	mov	r7, r4
 800f1a2:	e5c1      	b.n	800ed28 <_dtoa_r+0x418>
 800f1a4:	9b07      	ldr	r3, [sp, #28]
 800f1a6:	46ca      	mov	sl, r9
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f000 8100 	beq.w	800f3ae <_dtoa_r+0xa9e>
 800f1ae:	f1b8 0f00 	cmp.w	r8, #0
 800f1b2:	dd05      	ble.n	800f1c0 <_dtoa_r+0x8b0>
 800f1b4:	4639      	mov	r1, r7
 800f1b6:	4642      	mov	r2, r8
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	f000 fb71 	bl	800f8a0 <__lshift>
 800f1be:	4607      	mov	r7, r0
 800f1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d05d      	beq.n	800f282 <_dtoa_r+0x972>
 800f1c6:	6879      	ldr	r1, [r7, #4]
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f000 f959 	bl	800f480 <_Balloc>
 800f1ce:	4680      	mov	r8, r0
 800f1d0:	b928      	cbnz	r0, 800f1de <_dtoa_r+0x8ce>
 800f1d2:	4b82      	ldr	r3, [pc, #520]	; (800f3dc <_dtoa_r+0xacc>)
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f1da:	f7ff bbb1 	b.w	800e940 <_dtoa_r+0x30>
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	3202      	adds	r2, #2
 800f1e2:	0092      	lsls	r2, r2, #2
 800f1e4:	f107 010c 	add.w	r1, r7, #12
 800f1e8:	300c      	adds	r0, #12
 800f1ea:	f7ff fafa 	bl	800e7e2 <memcpy>
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	4641      	mov	r1, r8
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f000 fb54 	bl	800f8a0 <__lshift>
 800f1f8:	9b01      	ldr	r3, [sp, #4]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	9304      	str	r3, [sp, #16]
 800f1fe:	9b01      	ldr	r3, [sp, #4]
 800f200:	4453      	add	r3, sl
 800f202:	9308      	str	r3, [sp, #32]
 800f204:	9b02      	ldr	r3, [sp, #8]
 800f206:	f003 0301 	and.w	r3, r3, #1
 800f20a:	46b9      	mov	r9, r7
 800f20c:	9307      	str	r3, [sp, #28]
 800f20e:	4607      	mov	r7, r0
 800f210:	9b04      	ldr	r3, [sp, #16]
 800f212:	4621      	mov	r1, r4
 800f214:	3b01      	subs	r3, #1
 800f216:	4628      	mov	r0, r5
 800f218:	9302      	str	r3, [sp, #8]
 800f21a:	f7ff faf0 	bl	800e7fe <quorem>
 800f21e:	4603      	mov	r3, r0
 800f220:	3330      	adds	r3, #48	; 0x30
 800f222:	9005      	str	r0, [sp, #20]
 800f224:	4649      	mov	r1, r9
 800f226:	4628      	mov	r0, r5
 800f228:	9309      	str	r3, [sp, #36]	; 0x24
 800f22a:	f000 fba5 	bl	800f978 <__mcmp>
 800f22e:	463a      	mov	r2, r7
 800f230:	4682      	mov	sl, r0
 800f232:	4621      	mov	r1, r4
 800f234:	4630      	mov	r0, r6
 800f236:	f000 fbbb 	bl	800f9b0 <__mdiff>
 800f23a:	68c2      	ldr	r2, [r0, #12]
 800f23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f23e:	4680      	mov	r8, r0
 800f240:	bb0a      	cbnz	r2, 800f286 <_dtoa_r+0x976>
 800f242:	4601      	mov	r1, r0
 800f244:	4628      	mov	r0, r5
 800f246:	f000 fb97 	bl	800f978 <__mcmp>
 800f24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f24c:	4602      	mov	r2, r0
 800f24e:	4641      	mov	r1, r8
 800f250:	4630      	mov	r0, r6
 800f252:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800f256:	f000 f953 	bl	800f500 <_Bfree>
 800f25a:	9b06      	ldr	r3, [sp, #24]
 800f25c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f25e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f262:	ea43 0102 	orr.w	r1, r3, r2
 800f266:	9b07      	ldr	r3, [sp, #28]
 800f268:	4319      	orrs	r1, r3
 800f26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f26c:	d10d      	bne.n	800f28a <_dtoa_r+0x97a>
 800f26e:	2b39      	cmp	r3, #57	; 0x39
 800f270:	d029      	beq.n	800f2c6 <_dtoa_r+0x9b6>
 800f272:	f1ba 0f00 	cmp.w	sl, #0
 800f276:	dd01      	ble.n	800f27c <_dtoa_r+0x96c>
 800f278:	9b05      	ldr	r3, [sp, #20]
 800f27a:	3331      	adds	r3, #49	; 0x31
 800f27c:	9a02      	ldr	r2, [sp, #8]
 800f27e:	7013      	strb	r3, [r2, #0]
 800f280:	e775      	b.n	800f16e <_dtoa_r+0x85e>
 800f282:	4638      	mov	r0, r7
 800f284:	e7b8      	b.n	800f1f8 <_dtoa_r+0x8e8>
 800f286:	2201      	movs	r2, #1
 800f288:	e7e1      	b.n	800f24e <_dtoa_r+0x93e>
 800f28a:	f1ba 0f00 	cmp.w	sl, #0
 800f28e:	db06      	blt.n	800f29e <_dtoa_r+0x98e>
 800f290:	9906      	ldr	r1, [sp, #24]
 800f292:	ea41 0a0a 	orr.w	sl, r1, sl
 800f296:	9907      	ldr	r1, [sp, #28]
 800f298:	ea5a 0a01 	orrs.w	sl, sl, r1
 800f29c:	d120      	bne.n	800f2e0 <_dtoa_r+0x9d0>
 800f29e:	2a00      	cmp	r2, #0
 800f2a0:	ddec      	ble.n	800f27c <_dtoa_r+0x96c>
 800f2a2:	4629      	mov	r1, r5
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	4630      	mov	r0, r6
 800f2a8:	9304      	str	r3, [sp, #16]
 800f2aa:	f000 faf9 	bl	800f8a0 <__lshift>
 800f2ae:	4621      	mov	r1, r4
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	f000 fb61 	bl	800f978 <__mcmp>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	9b04      	ldr	r3, [sp, #16]
 800f2ba:	dc02      	bgt.n	800f2c2 <_dtoa_r+0x9b2>
 800f2bc:	d1de      	bne.n	800f27c <_dtoa_r+0x96c>
 800f2be:	07da      	lsls	r2, r3, #31
 800f2c0:	d5dc      	bpl.n	800f27c <_dtoa_r+0x96c>
 800f2c2:	2b39      	cmp	r3, #57	; 0x39
 800f2c4:	d1d8      	bne.n	800f278 <_dtoa_r+0x968>
 800f2c6:	9a02      	ldr	r2, [sp, #8]
 800f2c8:	2339      	movs	r3, #57	; 0x39
 800f2ca:	7013      	strb	r3, [r2, #0]
 800f2cc:	4643      	mov	r3, r8
 800f2ce:	4698      	mov	r8, r3
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f2d6:	2a39      	cmp	r2, #57	; 0x39
 800f2d8:	d051      	beq.n	800f37e <_dtoa_r+0xa6e>
 800f2da:	3201      	adds	r2, #1
 800f2dc:	701a      	strb	r2, [r3, #0]
 800f2de:	e746      	b.n	800f16e <_dtoa_r+0x85e>
 800f2e0:	2a00      	cmp	r2, #0
 800f2e2:	dd03      	ble.n	800f2ec <_dtoa_r+0x9dc>
 800f2e4:	2b39      	cmp	r3, #57	; 0x39
 800f2e6:	d0ee      	beq.n	800f2c6 <_dtoa_r+0x9b6>
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	e7c7      	b.n	800f27c <_dtoa_r+0x96c>
 800f2ec:	9a04      	ldr	r2, [sp, #16]
 800f2ee:	9908      	ldr	r1, [sp, #32]
 800f2f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f2f4:	428a      	cmp	r2, r1
 800f2f6:	d02b      	beq.n	800f350 <_dtoa_r+0xa40>
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	220a      	movs	r2, #10
 800f2fe:	4630      	mov	r0, r6
 800f300:	f000 f920 	bl	800f544 <__multadd>
 800f304:	45b9      	cmp	r9, r7
 800f306:	4605      	mov	r5, r0
 800f308:	f04f 0300 	mov.w	r3, #0
 800f30c:	f04f 020a 	mov.w	r2, #10
 800f310:	4649      	mov	r1, r9
 800f312:	4630      	mov	r0, r6
 800f314:	d107      	bne.n	800f326 <_dtoa_r+0xa16>
 800f316:	f000 f915 	bl	800f544 <__multadd>
 800f31a:	4681      	mov	r9, r0
 800f31c:	4607      	mov	r7, r0
 800f31e:	9b04      	ldr	r3, [sp, #16]
 800f320:	3301      	adds	r3, #1
 800f322:	9304      	str	r3, [sp, #16]
 800f324:	e774      	b.n	800f210 <_dtoa_r+0x900>
 800f326:	f000 f90d 	bl	800f544 <__multadd>
 800f32a:	4639      	mov	r1, r7
 800f32c:	4681      	mov	r9, r0
 800f32e:	2300      	movs	r3, #0
 800f330:	220a      	movs	r2, #10
 800f332:	4630      	mov	r0, r6
 800f334:	f000 f906 	bl	800f544 <__multadd>
 800f338:	4607      	mov	r7, r0
 800f33a:	e7f0      	b.n	800f31e <_dtoa_r+0xa0e>
 800f33c:	f1ba 0f00 	cmp.w	sl, #0
 800f340:	9a01      	ldr	r2, [sp, #4]
 800f342:	bfcc      	ite	gt
 800f344:	46d0      	movgt	r8, sl
 800f346:	f04f 0801 	movle.w	r8, #1
 800f34a:	4490      	add	r8, r2
 800f34c:	f04f 0900 	mov.w	r9, #0
 800f350:	4629      	mov	r1, r5
 800f352:	2201      	movs	r2, #1
 800f354:	4630      	mov	r0, r6
 800f356:	9302      	str	r3, [sp, #8]
 800f358:	f000 faa2 	bl	800f8a0 <__lshift>
 800f35c:	4621      	mov	r1, r4
 800f35e:	4605      	mov	r5, r0
 800f360:	f000 fb0a 	bl	800f978 <__mcmp>
 800f364:	2800      	cmp	r0, #0
 800f366:	dcb1      	bgt.n	800f2cc <_dtoa_r+0x9bc>
 800f368:	d102      	bne.n	800f370 <_dtoa_r+0xa60>
 800f36a:	9b02      	ldr	r3, [sp, #8]
 800f36c:	07db      	lsls	r3, r3, #31
 800f36e:	d4ad      	bmi.n	800f2cc <_dtoa_r+0x9bc>
 800f370:	4643      	mov	r3, r8
 800f372:	4698      	mov	r8, r3
 800f374:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f378:	2a30      	cmp	r2, #48	; 0x30
 800f37a:	d0fa      	beq.n	800f372 <_dtoa_r+0xa62>
 800f37c:	e6f7      	b.n	800f16e <_dtoa_r+0x85e>
 800f37e:	9a01      	ldr	r2, [sp, #4]
 800f380:	429a      	cmp	r2, r3
 800f382:	d1a4      	bne.n	800f2ce <_dtoa_r+0x9be>
 800f384:	f10b 0b01 	add.w	fp, fp, #1
 800f388:	2331      	movs	r3, #49	; 0x31
 800f38a:	e778      	b.n	800f27e <_dtoa_r+0x96e>
 800f38c:	4b14      	ldr	r3, [pc, #80]	; (800f3e0 <_dtoa_r+0xad0>)
 800f38e:	f7ff bb2a 	b.w	800e9e6 <_dtoa_r+0xd6>
 800f392:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f394:	2b00      	cmp	r3, #0
 800f396:	f47f ab05 	bne.w	800e9a4 <_dtoa_r+0x94>
 800f39a:	4b12      	ldr	r3, [pc, #72]	; (800f3e4 <_dtoa_r+0xad4>)
 800f39c:	f7ff bb23 	b.w	800e9e6 <_dtoa_r+0xd6>
 800f3a0:	f1ba 0f00 	cmp.w	sl, #0
 800f3a4:	dc03      	bgt.n	800f3ae <_dtoa_r+0xa9e>
 800f3a6:	9b06      	ldr	r3, [sp, #24]
 800f3a8:	2b02      	cmp	r3, #2
 800f3aa:	f73f aec8 	bgt.w	800f13e <_dtoa_r+0x82e>
 800f3ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f3b2:	4621      	mov	r1, r4
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	f7ff fa22 	bl	800e7fe <quorem>
 800f3ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f3be:	f808 3b01 	strb.w	r3, [r8], #1
 800f3c2:	9a01      	ldr	r2, [sp, #4]
 800f3c4:	eba8 0202 	sub.w	r2, r8, r2
 800f3c8:	4592      	cmp	sl, r2
 800f3ca:	ddb7      	ble.n	800f33c <_dtoa_r+0xa2c>
 800f3cc:	4629      	mov	r1, r5
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	220a      	movs	r2, #10
 800f3d2:	4630      	mov	r0, r6
 800f3d4:	f000 f8b6 	bl	800f544 <__multadd>
 800f3d8:	4605      	mov	r5, r0
 800f3da:	e7ea      	b.n	800f3b2 <_dtoa_r+0xaa2>
 800f3dc:	08011d58 	.word	0x08011d58
 800f3e0:	08011cb8 	.word	0x08011cb8
 800f3e4:	08011cdc 	.word	0x08011cdc

0800f3e8 <_free_r>:
 800f3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3ea:	2900      	cmp	r1, #0
 800f3ec:	d044      	beq.n	800f478 <_free_r+0x90>
 800f3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3f2:	9001      	str	r0, [sp, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f3fa:	bfb8      	it	lt
 800f3fc:	18e4      	addlt	r4, r4, r3
 800f3fe:	f7fe fbb3 	bl	800db68 <__malloc_lock>
 800f402:	4a1e      	ldr	r2, [pc, #120]	; (800f47c <_free_r+0x94>)
 800f404:	9801      	ldr	r0, [sp, #4]
 800f406:	6813      	ldr	r3, [r2, #0]
 800f408:	b933      	cbnz	r3, 800f418 <_free_r+0x30>
 800f40a:	6063      	str	r3, [r4, #4]
 800f40c:	6014      	str	r4, [r2, #0]
 800f40e:	b003      	add	sp, #12
 800f410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f414:	f7fe bbae 	b.w	800db74 <__malloc_unlock>
 800f418:	42a3      	cmp	r3, r4
 800f41a:	d908      	bls.n	800f42e <_free_r+0x46>
 800f41c:	6825      	ldr	r5, [r4, #0]
 800f41e:	1961      	adds	r1, r4, r5
 800f420:	428b      	cmp	r3, r1
 800f422:	bf01      	itttt	eq
 800f424:	6819      	ldreq	r1, [r3, #0]
 800f426:	685b      	ldreq	r3, [r3, #4]
 800f428:	1949      	addeq	r1, r1, r5
 800f42a:	6021      	streq	r1, [r4, #0]
 800f42c:	e7ed      	b.n	800f40a <_free_r+0x22>
 800f42e:	461a      	mov	r2, r3
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	b10b      	cbz	r3, 800f438 <_free_r+0x50>
 800f434:	42a3      	cmp	r3, r4
 800f436:	d9fa      	bls.n	800f42e <_free_r+0x46>
 800f438:	6811      	ldr	r1, [r2, #0]
 800f43a:	1855      	adds	r5, r2, r1
 800f43c:	42a5      	cmp	r5, r4
 800f43e:	d10b      	bne.n	800f458 <_free_r+0x70>
 800f440:	6824      	ldr	r4, [r4, #0]
 800f442:	4421      	add	r1, r4
 800f444:	1854      	adds	r4, r2, r1
 800f446:	42a3      	cmp	r3, r4
 800f448:	6011      	str	r1, [r2, #0]
 800f44a:	d1e0      	bne.n	800f40e <_free_r+0x26>
 800f44c:	681c      	ldr	r4, [r3, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	6053      	str	r3, [r2, #4]
 800f452:	440c      	add	r4, r1
 800f454:	6014      	str	r4, [r2, #0]
 800f456:	e7da      	b.n	800f40e <_free_r+0x26>
 800f458:	d902      	bls.n	800f460 <_free_r+0x78>
 800f45a:	230c      	movs	r3, #12
 800f45c:	6003      	str	r3, [r0, #0]
 800f45e:	e7d6      	b.n	800f40e <_free_r+0x26>
 800f460:	6825      	ldr	r5, [r4, #0]
 800f462:	1961      	adds	r1, r4, r5
 800f464:	428b      	cmp	r3, r1
 800f466:	bf04      	itt	eq
 800f468:	6819      	ldreq	r1, [r3, #0]
 800f46a:	685b      	ldreq	r3, [r3, #4]
 800f46c:	6063      	str	r3, [r4, #4]
 800f46e:	bf04      	itt	eq
 800f470:	1949      	addeq	r1, r1, r5
 800f472:	6021      	streq	r1, [r4, #0]
 800f474:	6054      	str	r4, [r2, #4]
 800f476:	e7ca      	b.n	800f40e <_free_r+0x26>
 800f478:	b003      	add	sp, #12
 800f47a:	bd30      	pop	{r4, r5, pc}
 800f47c:	240029bc 	.word	0x240029bc

0800f480 <_Balloc>:
 800f480:	b570      	push	{r4, r5, r6, lr}
 800f482:	69c6      	ldr	r6, [r0, #28]
 800f484:	4604      	mov	r4, r0
 800f486:	460d      	mov	r5, r1
 800f488:	b976      	cbnz	r6, 800f4a8 <_Balloc+0x28>
 800f48a:	2010      	movs	r0, #16
 800f48c:	f7fe fac4 	bl	800da18 <malloc>
 800f490:	4602      	mov	r2, r0
 800f492:	61e0      	str	r0, [r4, #28]
 800f494:	b920      	cbnz	r0, 800f4a0 <_Balloc+0x20>
 800f496:	4b18      	ldr	r3, [pc, #96]	; (800f4f8 <_Balloc+0x78>)
 800f498:	4818      	ldr	r0, [pc, #96]	; (800f4fc <_Balloc+0x7c>)
 800f49a:	216b      	movs	r1, #107	; 0x6b
 800f49c:	f000 ff6e 	bl	801037c <__assert_func>
 800f4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4a4:	6006      	str	r6, [r0, #0]
 800f4a6:	60c6      	str	r6, [r0, #12]
 800f4a8:	69e6      	ldr	r6, [r4, #28]
 800f4aa:	68f3      	ldr	r3, [r6, #12]
 800f4ac:	b183      	cbz	r3, 800f4d0 <_Balloc+0x50>
 800f4ae:	69e3      	ldr	r3, [r4, #28]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4b6:	b9b8      	cbnz	r0, 800f4e8 <_Balloc+0x68>
 800f4b8:	2101      	movs	r1, #1
 800f4ba:	fa01 f605 	lsl.w	r6, r1, r5
 800f4be:	1d72      	adds	r2, r6, #5
 800f4c0:	0092      	lsls	r2, r2, #2
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f000 ff78 	bl	80103b8 <_calloc_r>
 800f4c8:	b160      	cbz	r0, 800f4e4 <_Balloc+0x64>
 800f4ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f4ce:	e00e      	b.n	800f4ee <_Balloc+0x6e>
 800f4d0:	2221      	movs	r2, #33	; 0x21
 800f4d2:	2104      	movs	r1, #4
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	f000 ff6f 	bl	80103b8 <_calloc_r>
 800f4da:	69e3      	ldr	r3, [r4, #28]
 800f4dc:	60f0      	str	r0, [r6, #12]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1e4      	bne.n	800f4ae <_Balloc+0x2e>
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
 800f4e8:	6802      	ldr	r2, [r0, #0]
 800f4ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f4f4:	e7f7      	b.n	800f4e6 <_Balloc+0x66>
 800f4f6:	bf00      	nop
 800f4f8:	08011ce9 	.word	0x08011ce9
 800f4fc:	08011d69 	.word	0x08011d69

0800f500 <_Bfree>:
 800f500:	b570      	push	{r4, r5, r6, lr}
 800f502:	69c6      	ldr	r6, [r0, #28]
 800f504:	4605      	mov	r5, r0
 800f506:	460c      	mov	r4, r1
 800f508:	b976      	cbnz	r6, 800f528 <_Bfree+0x28>
 800f50a:	2010      	movs	r0, #16
 800f50c:	f7fe fa84 	bl	800da18 <malloc>
 800f510:	4602      	mov	r2, r0
 800f512:	61e8      	str	r0, [r5, #28]
 800f514:	b920      	cbnz	r0, 800f520 <_Bfree+0x20>
 800f516:	4b09      	ldr	r3, [pc, #36]	; (800f53c <_Bfree+0x3c>)
 800f518:	4809      	ldr	r0, [pc, #36]	; (800f540 <_Bfree+0x40>)
 800f51a:	218f      	movs	r1, #143	; 0x8f
 800f51c:	f000 ff2e 	bl	801037c <__assert_func>
 800f520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f524:	6006      	str	r6, [r0, #0]
 800f526:	60c6      	str	r6, [r0, #12]
 800f528:	b13c      	cbz	r4, 800f53a <_Bfree+0x3a>
 800f52a:	69eb      	ldr	r3, [r5, #28]
 800f52c:	6862      	ldr	r2, [r4, #4]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f534:	6021      	str	r1, [r4, #0]
 800f536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
 800f53c:	08011ce9 	.word	0x08011ce9
 800f540:	08011d69 	.word	0x08011d69

0800f544 <__multadd>:
 800f544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f548:	690d      	ldr	r5, [r1, #16]
 800f54a:	4607      	mov	r7, r0
 800f54c:	460c      	mov	r4, r1
 800f54e:	461e      	mov	r6, r3
 800f550:	f101 0c14 	add.w	ip, r1, #20
 800f554:	2000      	movs	r0, #0
 800f556:	f8dc 3000 	ldr.w	r3, [ip]
 800f55a:	b299      	uxth	r1, r3
 800f55c:	fb02 6101 	mla	r1, r2, r1, r6
 800f560:	0c1e      	lsrs	r6, r3, #16
 800f562:	0c0b      	lsrs	r3, r1, #16
 800f564:	fb02 3306 	mla	r3, r2, r6, r3
 800f568:	b289      	uxth	r1, r1
 800f56a:	3001      	adds	r0, #1
 800f56c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f570:	4285      	cmp	r5, r0
 800f572:	f84c 1b04 	str.w	r1, [ip], #4
 800f576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f57a:	dcec      	bgt.n	800f556 <__multadd+0x12>
 800f57c:	b30e      	cbz	r6, 800f5c2 <__multadd+0x7e>
 800f57e:	68a3      	ldr	r3, [r4, #8]
 800f580:	42ab      	cmp	r3, r5
 800f582:	dc19      	bgt.n	800f5b8 <__multadd+0x74>
 800f584:	6861      	ldr	r1, [r4, #4]
 800f586:	4638      	mov	r0, r7
 800f588:	3101      	adds	r1, #1
 800f58a:	f7ff ff79 	bl	800f480 <_Balloc>
 800f58e:	4680      	mov	r8, r0
 800f590:	b928      	cbnz	r0, 800f59e <__multadd+0x5a>
 800f592:	4602      	mov	r2, r0
 800f594:	4b0c      	ldr	r3, [pc, #48]	; (800f5c8 <__multadd+0x84>)
 800f596:	480d      	ldr	r0, [pc, #52]	; (800f5cc <__multadd+0x88>)
 800f598:	21ba      	movs	r1, #186	; 0xba
 800f59a:	f000 feef 	bl	801037c <__assert_func>
 800f59e:	6922      	ldr	r2, [r4, #16]
 800f5a0:	3202      	adds	r2, #2
 800f5a2:	f104 010c 	add.w	r1, r4, #12
 800f5a6:	0092      	lsls	r2, r2, #2
 800f5a8:	300c      	adds	r0, #12
 800f5aa:	f7ff f91a 	bl	800e7e2 <memcpy>
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	f7ff ffa5 	bl	800f500 <_Bfree>
 800f5b6:	4644      	mov	r4, r8
 800f5b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f5bc:	3501      	adds	r5, #1
 800f5be:	615e      	str	r6, [r3, #20]
 800f5c0:	6125      	str	r5, [r4, #16]
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5c8:	08011d58 	.word	0x08011d58
 800f5cc:	08011d69 	.word	0x08011d69

0800f5d0 <__hi0bits>:
 800f5d0:	0c03      	lsrs	r3, r0, #16
 800f5d2:	041b      	lsls	r3, r3, #16
 800f5d4:	b9d3      	cbnz	r3, 800f60c <__hi0bits+0x3c>
 800f5d6:	0400      	lsls	r0, r0, #16
 800f5d8:	2310      	movs	r3, #16
 800f5da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5de:	bf04      	itt	eq
 800f5e0:	0200      	lsleq	r0, r0, #8
 800f5e2:	3308      	addeq	r3, #8
 800f5e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f5e8:	bf04      	itt	eq
 800f5ea:	0100      	lsleq	r0, r0, #4
 800f5ec:	3304      	addeq	r3, #4
 800f5ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f5f2:	bf04      	itt	eq
 800f5f4:	0080      	lsleq	r0, r0, #2
 800f5f6:	3302      	addeq	r3, #2
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	db05      	blt.n	800f608 <__hi0bits+0x38>
 800f5fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f600:	f103 0301 	add.w	r3, r3, #1
 800f604:	bf08      	it	eq
 800f606:	2320      	moveq	r3, #32
 800f608:	4618      	mov	r0, r3
 800f60a:	4770      	bx	lr
 800f60c:	2300      	movs	r3, #0
 800f60e:	e7e4      	b.n	800f5da <__hi0bits+0xa>

0800f610 <__lo0bits>:
 800f610:	6803      	ldr	r3, [r0, #0]
 800f612:	f013 0207 	ands.w	r2, r3, #7
 800f616:	d00c      	beq.n	800f632 <__lo0bits+0x22>
 800f618:	07d9      	lsls	r1, r3, #31
 800f61a:	d422      	bmi.n	800f662 <__lo0bits+0x52>
 800f61c:	079a      	lsls	r2, r3, #30
 800f61e:	bf49      	itett	mi
 800f620:	085b      	lsrmi	r3, r3, #1
 800f622:	089b      	lsrpl	r3, r3, #2
 800f624:	6003      	strmi	r3, [r0, #0]
 800f626:	2201      	movmi	r2, #1
 800f628:	bf5c      	itt	pl
 800f62a:	6003      	strpl	r3, [r0, #0]
 800f62c:	2202      	movpl	r2, #2
 800f62e:	4610      	mov	r0, r2
 800f630:	4770      	bx	lr
 800f632:	b299      	uxth	r1, r3
 800f634:	b909      	cbnz	r1, 800f63a <__lo0bits+0x2a>
 800f636:	0c1b      	lsrs	r3, r3, #16
 800f638:	2210      	movs	r2, #16
 800f63a:	b2d9      	uxtb	r1, r3
 800f63c:	b909      	cbnz	r1, 800f642 <__lo0bits+0x32>
 800f63e:	3208      	adds	r2, #8
 800f640:	0a1b      	lsrs	r3, r3, #8
 800f642:	0719      	lsls	r1, r3, #28
 800f644:	bf04      	itt	eq
 800f646:	091b      	lsreq	r3, r3, #4
 800f648:	3204      	addeq	r2, #4
 800f64a:	0799      	lsls	r1, r3, #30
 800f64c:	bf04      	itt	eq
 800f64e:	089b      	lsreq	r3, r3, #2
 800f650:	3202      	addeq	r2, #2
 800f652:	07d9      	lsls	r1, r3, #31
 800f654:	d403      	bmi.n	800f65e <__lo0bits+0x4e>
 800f656:	085b      	lsrs	r3, r3, #1
 800f658:	f102 0201 	add.w	r2, r2, #1
 800f65c:	d003      	beq.n	800f666 <__lo0bits+0x56>
 800f65e:	6003      	str	r3, [r0, #0]
 800f660:	e7e5      	b.n	800f62e <__lo0bits+0x1e>
 800f662:	2200      	movs	r2, #0
 800f664:	e7e3      	b.n	800f62e <__lo0bits+0x1e>
 800f666:	2220      	movs	r2, #32
 800f668:	e7e1      	b.n	800f62e <__lo0bits+0x1e>
	...

0800f66c <__i2b>:
 800f66c:	b510      	push	{r4, lr}
 800f66e:	460c      	mov	r4, r1
 800f670:	2101      	movs	r1, #1
 800f672:	f7ff ff05 	bl	800f480 <_Balloc>
 800f676:	4602      	mov	r2, r0
 800f678:	b928      	cbnz	r0, 800f686 <__i2b+0x1a>
 800f67a:	4b05      	ldr	r3, [pc, #20]	; (800f690 <__i2b+0x24>)
 800f67c:	4805      	ldr	r0, [pc, #20]	; (800f694 <__i2b+0x28>)
 800f67e:	f240 1145 	movw	r1, #325	; 0x145
 800f682:	f000 fe7b 	bl	801037c <__assert_func>
 800f686:	2301      	movs	r3, #1
 800f688:	6144      	str	r4, [r0, #20]
 800f68a:	6103      	str	r3, [r0, #16]
 800f68c:	bd10      	pop	{r4, pc}
 800f68e:	bf00      	nop
 800f690:	08011d58 	.word	0x08011d58
 800f694:	08011d69 	.word	0x08011d69

0800f698 <__multiply>:
 800f698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f69c:	4691      	mov	r9, r2
 800f69e:	690a      	ldr	r2, [r1, #16]
 800f6a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	bfb8      	it	lt
 800f6a8:	460b      	movlt	r3, r1
 800f6aa:	460c      	mov	r4, r1
 800f6ac:	bfbc      	itt	lt
 800f6ae:	464c      	movlt	r4, r9
 800f6b0:	4699      	movlt	r9, r3
 800f6b2:	6927      	ldr	r7, [r4, #16]
 800f6b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6b8:	68a3      	ldr	r3, [r4, #8]
 800f6ba:	6861      	ldr	r1, [r4, #4]
 800f6bc:	eb07 060a 	add.w	r6, r7, sl
 800f6c0:	42b3      	cmp	r3, r6
 800f6c2:	b085      	sub	sp, #20
 800f6c4:	bfb8      	it	lt
 800f6c6:	3101      	addlt	r1, #1
 800f6c8:	f7ff feda 	bl	800f480 <_Balloc>
 800f6cc:	b930      	cbnz	r0, 800f6dc <__multiply+0x44>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	4b44      	ldr	r3, [pc, #272]	; (800f7e4 <__multiply+0x14c>)
 800f6d2:	4845      	ldr	r0, [pc, #276]	; (800f7e8 <__multiply+0x150>)
 800f6d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f6d8:	f000 fe50 	bl	801037c <__assert_func>
 800f6dc:	f100 0514 	add.w	r5, r0, #20
 800f6e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f6e4:	462b      	mov	r3, r5
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	4543      	cmp	r3, r8
 800f6ea:	d321      	bcc.n	800f730 <__multiply+0x98>
 800f6ec:	f104 0314 	add.w	r3, r4, #20
 800f6f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f6f4:	f109 0314 	add.w	r3, r9, #20
 800f6f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f6fc:	9202      	str	r2, [sp, #8]
 800f6fe:	1b3a      	subs	r2, r7, r4
 800f700:	3a15      	subs	r2, #21
 800f702:	f022 0203 	bic.w	r2, r2, #3
 800f706:	3204      	adds	r2, #4
 800f708:	f104 0115 	add.w	r1, r4, #21
 800f70c:	428f      	cmp	r7, r1
 800f70e:	bf38      	it	cc
 800f710:	2204      	movcc	r2, #4
 800f712:	9201      	str	r2, [sp, #4]
 800f714:	9a02      	ldr	r2, [sp, #8]
 800f716:	9303      	str	r3, [sp, #12]
 800f718:	429a      	cmp	r2, r3
 800f71a:	d80c      	bhi.n	800f736 <__multiply+0x9e>
 800f71c:	2e00      	cmp	r6, #0
 800f71e:	dd03      	ble.n	800f728 <__multiply+0x90>
 800f720:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f724:	2b00      	cmp	r3, #0
 800f726:	d05b      	beq.n	800f7e0 <__multiply+0x148>
 800f728:	6106      	str	r6, [r0, #16]
 800f72a:	b005      	add	sp, #20
 800f72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f730:	f843 2b04 	str.w	r2, [r3], #4
 800f734:	e7d8      	b.n	800f6e8 <__multiply+0x50>
 800f736:	f8b3 a000 	ldrh.w	sl, [r3]
 800f73a:	f1ba 0f00 	cmp.w	sl, #0
 800f73e:	d024      	beq.n	800f78a <__multiply+0xf2>
 800f740:	f104 0e14 	add.w	lr, r4, #20
 800f744:	46a9      	mov	r9, r5
 800f746:	f04f 0c00 	mov.w	ip, #0
 800f74a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f74e:	f8d9 1000 	ldr.w	r1, [r9]
 800f752:	fa1f fb82 	uxth.w	fp, r2
 800f756:	b289      	uxth	r1, r1
 800f758:	fb0a 110b 	mla	r1, sl, fp, r1
 800f75c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f760:	f8d9 2000 	ldr.w	r2, [r9]
 800f764:	4461      	add	r1, ip
 800f766:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f76a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f76e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f772:	b289      	uxth	r1, r1
 800f774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f778:	4577      	cmp	r7, lr
 800f77a:	f849 1b04 	str.w	r1, [r9], #4
 800f77e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f782:	d8e2      	bhi.n	800f74a <__multiply+0xb2>
 800f784:	9a01      	ldr	r2, [sp, #4]
 800f786:	f845 c002 	str.w	ip, [r5, r2]
 800f78a:	9a03      	ldr	r2, [sp, #12]
 800f78c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f790:	3304      	adds	r3, #4
 800f792:	f1b9 0f00 	cmp.w	r9, #0
 800f796:	d021      	beq.n	800f7dc <__multiply+0x144>
 800f798:	6829      	ldr	r1, [r5, #0]
 800f79a:	f104 0c14 	add.w	ip, r4, #20
 800f79e:	46ae      	mov	lr, r5
 800f7a0:	f04f 0a00 	mov.w	sl, #0
 800f7a4:	f8bc b000 	ldrh.w	fp, [ip]
 800f7a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f7ac:	fb09 220b 	mla	r2, r9, fp, r2
 800f7b0:	4452      	add	r2, sl
 800f7b2:	b289      	uxth	r1, r1
 800f7b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f7b8:	f84e 1b04 	str.w	r1, [lr], #4
 800f7bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f7c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7c4:	f8be 1000 	ldrh.w	r1, [lr]
 800f7c8:	fb09 110a 	mla	r1, r9, sl, r1
 800f7cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f7d0:	4567      	cmp	r7, ip
 800f7d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7d6:	d8e5      	bhi.n	800f7a4 <__multiply+0x10c>
 800f7d8:	9a01      	ldr	r2, [sp, #4]
 800f7da:	50a9      	str	r1, [r5, r2]
 800f7dc:	3504      	adds	r5, #4
 800f7de:	e799      	b.n	800f714 <__multiply+0x7c>
 800f7e0:	3e01      	subs	r6, #1
 800f7e2:	e79b      	b.n	800f71c <__multiply+0x84>
 800f7e4:	08011d58 	.word	0x08011d58
 800f7e8:	08011d69 	.word	0x08011d69

0800f7ec <__pow5mult>:
 800f7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7f0:	4615      	mov	r5, r2
 800f7f2:	f012 0203 	ands.w	r2, r2, #3
 800f7f6:	4606      	mov	r6, r0
 800f7f8:	460f      	mov	r7, r1
 800f7fa:	d007      	beq.n	800f80c <__pow5mult+0x20>
 800f7fc:	4c25      	ldr	r4, [pc, #148]	; (800f894 <__pow5mult+0xa8>)
 800f7fe:	3a01      	subs	r2, #1
 800f800:	2300      	movs	r3, #0
 800f802:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f806:	f7ff fe9d 	bl	800f544 <__multadd>
 800f80a:	4607      	mov	r7, r0
 800f80c:	10ad      	asrs	r5, r5, #2
 800f80e:	d03d      	beq.n	800f88c <__pow5mult+0xa0>
 800f810:	69f4      	ldr	r4, [r6, #28]
 800f812:	b97c      	cbnz	r4, 800f834 <__pow5mult+0x48>
 800f814:	2010      	movs	r0, #16
 800f816:	f7fe f8ff 	bl	800da18 <malloc>
 800f81a:	4602      	mov	r2, r0
 800f81c:	61f0      	str	r0, [r6, #28]
 800f81e:	b928      	cbnz	r0, 800f82c <__pow5mult+0x40>
 800f820:	4b1d      	ldr	r3, [pc, #116]	; (800f898 <__pow5mult+0xac>)
 800f822:	481e      	ldr	r0, [pc, #120]	; (800f89c <__pow5mult+0xb0>)
 800f824:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f828:	f000 fda8 	bl	801037c <__assert_func>
 800f82c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f830:	6004      	str	r4, [r0, #0]
 800f832:	60c4      	str	r4, [r0, #12]
 800f834:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f83c:	b94c      	cbnz	r4, 800f852 <__pow5mult+0x66>
 800f83e:	f240 2171 	movw	r1, #625	; 0x271
 800f842:	4630      	mov	r0, r6
 800f844:	f7ff ff12 	bl	800f66c <__i2b>
 800f848:	2300      	movs	r3, #0
 800f84a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f84e:	4604      	mov	r4, r0
 800f850:	6003      	str	r3, [r0, #0]
 800f852:	f04f 0900 	mov.w	r9, #0
 800f856:	07eb      	lsls	r3, r5, #31
 800f858:	d50a      	bpl.n	800f870 <__pow5mult+0x84>
 800f85a:	4639      	mov	r1, r7
 800f85c:	4622      	mov	r2, r4
 800f85e:	4630      	mov	r0, r6
 800f860:	f7ff ff1a 	bl	800f698 <__multiply>
 800f864:	4639      	mov	r1, r7
 800f866:	4680      	mov	r8, r0
 800f868:	4630      	mov	r0, r6
 800f86a:	f7ff fe49 	bl	800f500 <_Bfree>
 800f86e:	4647      	mov	r7, r8
 800f870:	106d      	asrs	r5, r5, #1
 800f872:	d00b      	beq.n	800f88c <__pow5mult+0xa0>
 800f874:	6820      	ldr	r0, [r4, #0]
 800f876:	b938      	cbnz	r0, 800f888 <__pow5mult+0x9c>
 800f878:	4622      	mov	r2, r4
 800f87a:	4621      	mov	r1, r4
 800f87c:	4630      	mov	r0, r6
 800f87e:	f7ff ff0b 	bl	800f698 <__multiply>
 800f882:	6020      	str	r0, [r4, #0]
 800f884:	f8c0 9000 	str.w	r9, [r0]
 800f888:	4604      	mov	r4, r0
 800f88a:	e7e4      	b.n	800f856 <__pow5mult+0x6a>
 800f88c:	4638      	mov	r0, r7
 800f88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f892:	bf00      	nop
 800f894:	08011eb8 	.word	0x08011eb8
 800f898:	08011ce9 	.word	0x08011ce9
 800f89c:	08011d69 	.word	0x08011d69

0800f8a0 <__lshift>:
 800f8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8a4:	460c      	mov	r4, r1
 800f8a6:	6849      	ldr	r1, [r1, #4]
 800f8a8:	6923      	ldr	r3, [r4, #16]
 800f8aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8ae:	68a3      	ldr	r3, [r4, #8]
 800f8b0:	4607      	mov	r7, r0
 800f8b2:	4691      	mov	r9, r2
 800f8b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8b8:	f108 0601 	add.w	r6, r8, #1
 800f8bc:	42b3      	cmp	r3, r6
 800f8be:	db0b      	blt.n	800f8d8 <__lshift+0x38>
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	f7ff fddd 	bl	800f480 <_Balloc>
 800f8c6:	4605      	mov	r5, r0
 800f8c8:	b948      	cbnz	r0, 800f8de <__lshift+0x3e>
 800f8ca:	4602      	mov	r2, r0
 800f8cc:	4b28      	ldr	r3, [pc, #160]	; (800f970 <__lshift+0xd0>)
 800f8ce:	4829      	ldr	r0, [pc, #164]	; (800f974 <__lshift+0xd4>)
 800f8d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f8d4:	f000 fd52 	bl	801037c <__assert_func>
 800f8d8:	3101      	adds	r1, #1
 800f8da:	005b      	lsls	r3, r3, #1
 800f8dc:	e7ee      	b.n	800f8bc <__lshift+0x1c>
 800f8de:	2300      	movs	r3, #0
 800f8e0:	f100 0114 	add.w	r1, r0, #20
 800f8e4:	f100 0210 	add.w	r2, r0, #16
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	4553      	cmp	r3, sl
 800f8ec:	db33      	blt.n	800f956 <__lshift+0xb6>
 800f8ee:	6920      	ldr	r0, [r4, #16]
 800f8f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8f4:	f104 0314 	add.w	r3, r4, #20
 800f8f8:	f019 091f 	ands.w	r9, r9, #31
 800f8fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f900:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f904:	d02b      	beq.n	800f95e <__lshift+0xbe>
 800f906:	f1c9 0e20 	rsb	lr, r9, #32
 800f90a:	468a      	mov	sl, r1
 800f90c:	2200      	movs	r2, #0
 800f90e:	6818      	ldr	r0, [r3, #0]
 800f910:	fa00 f009 	lsl.w	r0, r0, r9
 800f914:	4310      	orrs	r0, r2
 800f916:	f84a 0b04 	str.w	r0, [sl], #4
 800f91a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f91e:	459c      	cmp	ip, r3
 800f920:	fa22 f20e 	lsr.w	r2, r2, lr
 800f924:	d8f3      	bhi.n	800f90e <__lshift+0x6e>
 800f926:	ebac 0304 	sub.w	r3, ip, r4
 800f92a:	3b15      	subs	r3, #21
 800f92c:	f023 0303 	bic.w	r3, r3, #3
 800f930:	3304      	adds	r3, #4
 800f932:	f104 0015 	add.w	r0, r4, #21
 800f936:	4584      	cmp	ip, r0
 800f938:	bf38      	it	cc
 800f93a:	2304      	movcc	r3, #4
 800f93c:	50ca      	str	r2, [r1, r3]
 800f93e:	b10a      	cbz	r2, 800f944 <__lshift+0xa4>
 800f940:	f108 0602 	add.w	r6, r8, #2
 800f944:	3e01      	subs	r6, #1
 800f946:	4638      	mov	r0, r7
 800f948:	612e      	str	r6, [r5, #16]
 800f94a:	4621      	mov	r1, r4
 800f94c:	f7ff fdd8 	bl	800f500 <_Bfree>
 800f950:	4628      	mov	r0, r5
 800f952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f956:	f842 0f04 	str.w	r0, [r2, #4]!
 800f95a:	3301      	adds	r3, #1
 800f95c:	e7c5      	b.n	800f8ea <__lshift+0x4a>
 800f95e:	3904      	subs	r1, #4
 800f960:	f853 2b04 	ldr.w	r2, [r3], #4
 800f964:	f841 2f04 	str.w	r2, [r1, #4]!
 800f968:	459c      	cmp	ip, r3
 800f96a:	d8f9      	bhi.n	800f960 <__lshift+0xc0>
 800f96c:	e7ea      	b.n	800f944 <__lshift+0xa4>
 800f96e:	bf00      	nop
 800f970:	08011d58 	.word	0x08011d58
 800f974:	08011d69 	.word	0x08011d69

0800f978 <__mcmp>:
 800f978:	b530      	push	{r4, r5, lr}
 800f97a:	6902      	ldr	r2, [r0, #16]
 800f97c:	690c      	ldr	r4, [r1, #16]
 800f97e:	1b12      	subs	r2, r2, r4
 800f980:	d10e      	bne.n	800f9a0 <__mcmp+0x28>
 800f982:	f100 0314 	add.w	r3, r0, #20
 800f986:	3114      	adds	r1, #20
 800f988:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f98c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f990:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f994:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f998:	42a5      	cmp	r5, r4
 800f99a:	d003      	beq.n	800f9a4 <__mcmp+0x2c>
 800f99c:	d305      	bcc.n	800f9aa <__mcmp+0x32>
 800f99e:	2201      	movs	r2, #1
 800f9a0:	4610      	mov	r0, r2
 800f9a2:	bd30      	pop	{r4, r5, pc}
 800f9a4:	4283      	cmp	r3, r0
 800f9a6:	d3f3      	bcc.n	800f990 <__mcmp+0x18>
 800f9a8:	e7fa      	b.n	800f9a0 <__mcmp+0x28>
 800f9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ae:	e7f7      	b.n	800f9a0 <__mcmp+0x28>

0800f9b0 <__mdiff>:
 800f9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	4611      	mov	r1, r2
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	4690      	mov	r8, r2
 800f9be:	f7ff ffdb 	bl	800f978 <__mcmp>
 800f9c2:	1e05      	subs	r5, r0, #0
 800f9c4:	d110      	bne.n	800f9e8 <__mdiff+0x38>
 800f9c6:	4629      	mov	r1, r5
 800f9c8:	4630      	mov	r0, r6
 800f9ca:	f7ff fd59 	bl	800f480 <_Balloc>
 800f9ce:	b930      	cbnz	r0, 800f9de <__mdiff+0x2e>
 800f9d0:	4b3a      	ldr	r3, [pc, #232]	; (800fabc <__mdiff+0x10c>)
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	f240 2137 	movw	r1, #567	; 0x237
 800f9d8:	4839      	ldr	r0, [pc, #228]	; (800fac0 <__mdiff+0x110>)
 800f9da:	f000 fccf 	bl	801037c <__assert_func>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e8:	bfa4      	itt	ge
 800f9ea:	4643      	movge	r3, r8
 800f9ec:	46a0      	movge	r8, r4
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f9f4:	bfa6      	itte	ge
 800f9f6:	461c      	movge	r4, r3
 800f9f8:	2500      	movge	r5, #0
 800f9fa:	2501      	movlt	r5, #1
 800f9fc:	f7ff fd40 	bl	800f480 <_Balloc>
 800fa00:	b920      	cbnz	r0, 800fa0c <__mdiff+0x5c>
 800fa02:	4b2e      	ldr	r3, [pc, #184]	; (800fabc <__mdiff+0x10c>)
 800fa04:	4602      	mov	r2, r0
 800fa06:	f240 2145 	movw	r1, #581	; 0x245
 800fa0a:	e7e5      	b.n	800f9d8 <__mdiff+0x28>
 800fa0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa10:	6926      	ldr	r6, [r4, #16]
 800fa12:	60c5      	str	r5, [r0, #12]
 800fa14:	f104 0914 	add.w	r9, r4, #20
 800fa18:	f108 0514 	add.w	r5, r8, #20
 800fa1c:	f100 0e14 	add.w	lr, r0, #20
 800fa20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa28:	f108 0210 	add.w	r2, r8, #16
 800fa2c:	46f2      	mov	sl, lr
 800fa2e:	2100      	movs	r1, #0
 800fa30:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa38:	fa11 f88b 	uxtah	r8, r1, fp
 800fa3c:	b299      	uxth	r1, r3
 800fa3e:	0c1b      	lsrs	r3, r3, #16
 800fa40:	eba8 0801 	sub.w	r8, r8, r1
 800fa44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa48:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa4c:	fa1f f888 	uxth.w	r8, r8
 800fa50:	1419      	asrs	r1, r3, #16
 800fa52:	454e      	cmp	r6, r9
 800fa54:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa58:	f84a 3b04 	str.w	r3, [sl], #4
 800fa5c:	d8e8      	bhi.n	800fa30 <__mdiff+0x80>
 800fa5e:	1b33      	subs	r3, r6, r4
 800fa60:	3b15      	subs	r3, #21
 800fa62:	f023 0303 	bic.w	r3, r3, #3
 800fa66:	3304      	adds	r3, #4
 800fa68:	3415      	adds	r4, #21
 800fa6a:	42a6      	cmp	r6, r4
 800fa6c:	bf38      	it	cc
 800fa6e:	2304      	movcc	r3, #4
 800fa70:	441d      	add	r5, r3
 800fa72:	4473      	add	r3, lr
 800fa74:	469e      	mov	lr, r3
 800fa76:	462e      	mov	r6, r5
 800fa78:	4566      	cmp	r6, ip
 800fa7a:	d30e      	bcc.n	800fa9a <__mdiff+0xea>
 800fa7c:	f10c 0203 	add.w	r2, ip, #3
 800fa80:	1b52      	subs	r2, r2, r5
 800fa82:	f022 0203 	bic.w	r2, r2, #3
 800fa86:	3d03      	subs	r5, #3
 800fa88:	45ac      	cmp	ip, r5
 800fa8a:	bf38      	it	cc
 800fa8c:	2200      	movcc	r2, #0
 800fa8e:	4413      	add	r3, r2
 800fa90:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fa94:	b17a      	cbz	r2, 800fab6 <__mdiff+0x106>
 800fa96:	6107      	str	r7, [r0, #16]
 800fa98:	e7a4      	b.n	800f9e4 <__mdiff+0x34>
 800fa9a:	f856 8b04 	ldr.w	r8, [r6], #4
 800fa9e:	fa11 f288 	uxtah	r2, r1, r8
 800faa2:	1414      	asrs	r4, r2, #16
 800faa4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800faa8:	b292      	uxth	r2, r2
 800faaa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800faae:	f84e 2b04 	str.w	r2, [lr], #4
 800fab2:	1421      	asrs	r1, r4, #16
 800fab4:	e7e0      	b.n	800fa78 <__mdiff+0xc8>
 800fab6:	3f01      	subs	r7, #1
 800fab8:	e7ea      	b.n	800fa90 <__mdiff+0xe0>
 800faba:	bf00      	nop
 800fabc:	08011d58 	.word	0x08011d58
 800fac0:	08011d69 	.word	0x08011d69

0800fac4 <__d2b>:
 800fac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fac8:	460f      	mov	r7, r1
 800faca:	2101      	movs	r1, #1
 800facc:	ec59 8b10 	vmov	r8, r9, d0
 800fad0:	4616      	mov	r6, r2
 800fad2:	f7ff fcd5 	bl	800f480 <_Balloc>
 800fad6:	4604      	mov	r4, r0
 800fad8:	b930      	cbnz	r0, 800fae8 <__d2b+0x24>
 800fada:	4602      	mov	r2, r0
 800fadc:	4b24      	ldr	r3, [pc, #144]	; (800fb70 <__d2b+0xac>)
 800fade:	4825      	ldr	r0, [pc, #148]	; (800fb74 <__d2b+0xb0>)
 800fae0:	f240 310f 	movw	r1, #783	; 0x30f
 800fae4:	f000 fc4a 	bl	801037c <__assert_func>
 800fae8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800faec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800faf0:	bb2d      	cbnz	r5, 800fb3e <__d2b+0x7a>
 800faf2:	9301      	str	r3, [sp, #4]
 800faf4:	f1b8 0300 	subs.w	r3, r8, #0
 800faf8:	d026      	beq.n	800fb48 <__d2b+0x84>
 800fafa:	4668      	mov	r0, sp
 800fafc:	9300      	str	r3, [sp, #0]
 800fafe:	f7ff fd87 	bl	800f610 <__lo0bits>
 800fb02:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb06:	b1e8      	cbz	r0, 800fb44 <__d2b+0x80>
 800fb08:	f1c0 0320 	rsb	r3, r0, #32
 800fb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb10:	430b      	orrs	r3, r1
 800fb12:	40c2      	lsrs	r2, r0
 800fb14:	6163      	str	r3, [r4, #20]
 800fb16:	9201      	str	r2, [sp, #4]
 800fb18:	9b01      	ldr	r3, [sp, #4]
 800fb1a:	61a3      	str	r3, [r4, #24]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	bf14      	ite	ne
 800fb20:	2202      	movne	r2, #2
 800fb22:	2201      	moveq	r2, #1
 800fb24:	6122      	str	r2, [r4, #16]
 800fb26:	b1bd      	cbz	r5, 800fb58 <__d2b+0x94>
 800fb28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fb2c:	4405      	add	r5, r0
 800fb2e:	603d      	str	r5, [r7, #0]
 800fb30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fb34:	6030      	str	r0, [r6, #0]
 800fb36:	4620      	mov	r0, r4
 800fb38:	b003      	add	sp, #12
 800fb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb42:	e7d6      	b.n	800faf2 <__d2b+0x2e>
 800fb44:	6161      	str	r1, [r4, #20]
 800fb46:	e7e7      	b.n	800fb18 <__d2b+0x54>
 800fb48:	a801      	add	r0, sp, #4
 800fb4a:	f7ff fd61 	bl	800f610 <__lo0bits>
 800fb4e:	9b01      	ldr	r3, [sp, #4]
 800fb50:	6163      	str	r3, [r4, #20]
 800fb52:	3020      	adds	r0, #32
 800fb54:	2201      	movs	r2, #1
 800fb56:	e7e5      	b.n	800fb24 <__d2b+0x60>
 800fb58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fb60:	6038      	str	r0, [r7, #0]
 800fb62:	6918      	ldr	r0, [r3, #16]
 800fb64:	f7ff fd34 	bl	800f5d0 <__hi0bits>
 800fb68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb6c:	e7e2      	b.n	800fb34 <__d2b+0x70>
 800fb6e:	bf00      	nop
 800fb70:	08011d58 	.word	0x08011d58
 800fb74:	08011d69 	.word	0x08011d69

0800fb78 <_malloc_usable_size_r>:
 800fb78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb7c:	1f18      	subs	r0, r3, #4
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	bfbc      	itt	lt
 800fb82:	580b      	ldrlt	r3, [r1, r0]
 800fb84:	18c0      	addlt	r0, r0, r3
 800fb86:	4770      	bx	lr

0800fb88 <__ssputs_r>:
 800fb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb8c:	688e      	ldr	r6, [r1, #8]
 800fb8e:	461f      	mov	r7, r3
 800fb90:	42be      	cmp	r6, r7
 800fb92:	680b      	ldr	r3, [r1, #0]
 800fb94:	4682      	mov	sl, r0
 800fb96:	460c      	mov	r4, r1
 800fb98:	4690      	mov	r8, r2
 800fb9a:	d82c      	bhi.n	800fbf6 <__ssputs_r+0x6e>
 800fb9c:	898a      	ldrh	r2, [r1, #12]
 800fb9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fba2:	d026      	beq.n	800fbf2 <__ssputs_r+0x6a>
 800fba4:	6965      	ldr	r5, [r4, #20]
 800fba6:	6909      	ldr	r1, [r1, #16]
 800fba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbac:	eba3 0901 	sub.w	r9, r3, r1
 800fbb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fbb4:	1c7b      	adds	r3, r7, #1
 800fbb6:	444b      	add	r3, r9
 800fbb8:	106d      	asrs	r5, r5, #1
 800fbba:	429d      	cmp	r5, r3
 800fbbc:	bf38      	it	cc
 800fbbe:	461d      	movcc	r5, r3
 800fbc0:	0553      	lsls	r3, r2, #21
 800fbc2:	d527      	bpl.n	800fc14 <__ssputs_r+0x8c>
 800fbc4:	4629      	mov	r1, r5
 800fbc6:	f7fd ff4f 	bl	800da68 <_malloc_r>
 800fbca:	4606      	mov	r6, r0
 800fbcc:	b360      	cbz	r0, 800fc28 <__ssputs_r+0xa0>
 800fbce:	6921      	ldr	r1, [r4, #16]
 800fbd0:	464a      	mov	r2, r9
 800fbd2:	f7fe fe06 	bl	800e7e2 <memcpy>
 800fbd6:	89a3      	ldrh	r3, [r4, #12]
 800fbd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbe0:	81a3      	strh	r3, [r4, #12]
 800fbe2:	6126      	str	r6, [r4, #16]
 800fbe4:	6165      	str	r5, [r4, #20]
 800fbe6:	444e      	add	r6, r9
 800fbe8:	eba5 0509 	sub.w	r5, r5, r9
 800fbec:	6026      	str	r6, [r4, #0]
 800fbee:	60a5      	str	r5, [r4, #8]
 800fbf0:	463e      	mov	r6, r7
 800fbf2:	42be      	cmp	r6, r7
 800fbf4:	d900      	bls.n	800fbf8 <__ssputs_r+0x70>
 800fbf6:	463e      	mov	r6, r7
 800fbf8:	6820      	ldr	r0, [r4, #0]
 800fbfa:	4632      	mov	r2, r6
 800fbfc:	4641      	mov	r1, r8
 800fbfe:	f000 fba3 	bl	8010348 <memmove>
 800fc02:	68a3      	ldr	r3, [r4, #8]
 800fc04:	1b9b      	subs	r3, r3, r6
 800fc06:	60a3      	str	r3, [r4, #8]
 800fc08:	6823      	ldr	r3, [r4, #0]
 800fc0a:	4433      	add	r3, r6
 800fc0c:	6023      	str	r3, [r4, #0]
 800fc0e:	2000      	movs	r0, #0
 800fc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc14:	462a      	mov	r2, r5
 800fc16:	f7fd ffb3 	bl	800db80 <_realloc_r>
 800fc1a:	4606      	mov	r6, r0
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	d1e0      	bne.n	800fbe2 <__ssputs_r+0x5a>
 800fc20:	6921      	ldr	r1, [r4, #16]
 800fc22:	4650      	mov	r0, sl
 800fc24:	f7ff fbe0 	bl	800f3e8 <_free_r>
 800fc28:	230c      	movs	r3, #12
 800fc2a:	f8ca 3000 	str.w	r3, [sl]
 800fc2e:	89a3      	ldrh	r3, [r4, #12]
 800fc30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc34:	81a3      	strh	r3, [r4, #12]
 800fc36:	f04f 30ff 	mov.w	r0, #4294967295
 800fc3a:	e7e9      	b.n	800fc10 <__ssputs_r+0x88>

0800fc3c <_svfiprintf_r>:
 800fc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc40:	4698      	mov	r8, r3
 800fc42:	898b      	ldrh	r3, [r1, #12]
 800fc44:	061b      	lsls	r3, r3, #24
 800fc46:	b09d      	sub	sp, #116	; 0x74
 800fc48:	4607      	mov	r7, r0
 800fc4a:	460d      	mov	r5, r1
 800fc4c:	4614      	mov	r4, r2
 800fc4e:	d50e      	bpl.n	800fc6e <_svfiprintf_r+0x32>
 800fc50:	690b      	ldr	r3, [r1, #16]
 800fc52:	b963      	cbnz	r3, 800fc6e <_svfiprintf_r+0x32>
 800fc54:	2140      	movs	r1, #64	; 0x40
 800fc56:	f7fd ff07 	bl	800da68 <_malloc_r>
 800fc5a:	6028      	str	r0, [r5, #0]
 800fc5c:	6128      	str	r0, [r5, #16]
 800fc5e:	b920      	cbnz	r0, 800fc6a <_svfiprintf_r+0x2e>
 800fc60:	230c      	movs	r3, #12
 800fc62:	603b      	str	r3, [r7, #0]
 800fc64:	f04f 30ff 	mov.w	r0, #4294967295
 800fc68:	e0d0      	b.n	800fe0c <_svfiprintf_r+0x1d0>
 800fc6a:	2340      	movs	r3, #64	; 0x40
 800fc6c:	616b      	str	r3, [r5, #20]
 800fc6e:	2300      	movs	r3, #0
 800fc70:	9309      	str	r3, [sp, #36]	; 0x24
 800fc72:	2320      	movs	r3, #32
 800fc74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc78:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc7c:	2330      	movs	r3, #48	; 0x30
 800fc7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fe24 <_svfiprintf_r+0x1e8>
 800fc82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc86:	f04f 0901 	mov.w	r9, #1
 800fc8a:	4623      	mov	r3, r4
 800fc8c:	469a      	mov	sl, r3
 800fc8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc92:	b10a      	cbz	r2, 800fc98 <_svfiprintf_r+0x5c>
 800fc94:	2a25      	cmp	r2, #37	; 0x25
 800fc96:	d1f9      	bne.n	800fc8c <_svfiprintf_r+0x50>
 800fc98:	ebba 0b04 	subs.w	fp, sl, r4
 800fc9c:	d00b      	beq.n	800fcb6 <_svfiprintf_r+0x7a>
 800fc9e:	465b      	mov	r3, fp
 800fca0:	4622      	mov	r2, r4
 800fca2:	4629      	mov	r1, r5
 800fca4:	4638      	mov	r0, r7
 800fca6:	f7ff ff6f 	bl	800fb88 <__ssputs_r>
 800fcaa:	3001      	adds	r0, #1
 800fcac:	f000 80a9 	beq.w	800fe02 <_svfiprintf_r+0x1c6>
 800fcb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcb2:	445a      	add	r2, fp
 800fcb4:	9209      	str	r2, [sp, #36]	; 0x24
 800fcb6:	f89a 3000 	ldrb.w	r3, [sl]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	f000 80a1 	beq.w	800fe02 <_svfiprintf_r+0x1c6>
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	f04f 32ff 	mov.w	r2, #4294967295
 800fcc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcca:	f10a 0a01 	add.w	sl, sl, #1
 800fcce:	9304      	str	r3, [sp, #16]
 800fcd0:	9307      	str	r3, [sp, #28]
 800fcd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcd6:	931a      	str	r3, [sp, #104]	; 0x68
 800fcd8:	4654      	mov	r4, sl
 800fcda:	2205      	movs	r2, #5
 800fcdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fce0:	4850      	ldr	r0, [pc, #320]	; (800fe24 <_svfiprintf_r+0x1e8>)
 800fce2:	f7f0 fafd 	bl	80002e0 <memchr>
 800fce6:	9a04      	ldr	r2, [sp, #16]
 800fce8:	b9d8      	cbnz	r0, 800fd22 <_svfiprintf_r+0xe6>
 800fcea:	06d0      	lsls	r0, r2, #27
 800fcec:	bf44      	itt	mi
 800fcee:	2320      	movmi	r3, #32
 800fcf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcf4:	0711      	lsls	r1, r2, #28
 800fcf6:	bf44      	itt	mi
 800fcf8:	232b      	movmi	r3, #43	; 0x2b
 800fcfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcfe:	f89a 3000 	ldrb.w	r3, [sl]
 800fd02:	2b2a      	cmp	r3, #42	; 0x2a
 800fd04:	d015      	beq.n	800fd32 <_svfiprintf_r+0xf6>
 800fd06:	9a07      	ldr	r2, [sp, #28]
 800fd08:	4654      	mov	r4, sl
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	f04f 0c0a 	mov.w	ip, #10
 800fd10:	4621      	mov	r1, r4
 800fd12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd16:	3b30      	subs	r3, #48	; 0x30
 800fd18:	2b09      	cmp	r3, #9
 800fd1a:	d94d      	bls.n	800fdb8 <_svfiprintf_r+0x17c>
 800fd1c:	b1b0      	cbz	r0, 800fd4c <_svfiprintf_r+0x110>
 800fd1e:	9207      	str	r2, [sp, #28]
 800fd20:	e014      	b.n	800fd4c <_svfiprintf_r+0x110>
 800fd22:	eba0 0308 	sub.w	r3, r0, r8
 800fd26:	fa09 f303 	lsl.w	r3, r9, r3
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	9304      	str	r3, [sp, #16]
 800fd2e:	46a2      	mov	sl, r4
 800fd30:	e7d2      	b.n	800fcd8 <_svfiprintf_r+0x9c>
 800fd32:	9b03      	ldr	r3, [sp, #12]
 800fd34:	1d19      	adds	r1, r3, #4
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	9103      	str	r1, [sp, #12]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	bfbb      	ittet	lt
 800fd3e:	425b      	neglt	r3, r3
 800fd40:	f042 0202 	orrlt.w	r2, r2, #2
 800fd44:	9307      	strge	r3, [sp, #28]
 800fd46:	9307      	strlt	r3, [sp, #28]
 800fd48:	bfb8      	it	lt
 800fd4a:	9204      	strlt	r2, [sp, #16]
 800fd4c:	7823      	ldrb	r3, [r4, #0]
 800fd4e:	2b2e      	cmp	r3, #46	; 0x2e
 800fd50:	d10c      	bne.n	800fd6c <_svfiprintf_r+0x130>
 800fd52:	7863      	ldrb	r3, [r4, #1]
 800fd54:	2b2a      	cmp	r3, #42	; 0x2a
 800fd56:	d134      	bne.n	800fdc2 <_svfiprintf_r+0x186>
 800fd58:	9b03      	ldr	r3, [sp, #12]
 800fd5a:	1d1a      	adds	r2, r3, #4
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	9203      	str	r2, [sp, #12]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	bfb8      	it	lt
 800fd64:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd68:	3402      	adds	r4, #2
 800fd6a:	9305      	str	r3, [sp, #20]
 800fd6c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fe34 <_svfiprintf_r+0x1f8>
 800fd70:	7821      	ldrb	r1, [r4, #0]
 800fd72:	2203      	movs	r2, #3
 800fd74:	4650      	mov	r0, sl
 800fd76:	f7f0 fab3 	bl	80002e0 <memchr>
 800fd7a:	b138      	cbz	r0, 800fd8c <_svfiprintf_r+0x150>
 800fd7c:	9b04      	ldr	r3, [sp, #16]
 800fd7e:	eba0 000a 	sub.w	r0, r0, sl
 800fd82:	2240      	movs	r2, #64	; 0x40
 800fd84:	4082      	lsls	r2, r0
 800fd86:	4313      	orrs	r3, r2
 800fd88:	3401      	adds	r4, #1
 800fd8a:	9304      	str	r3, [sp, #16]
 800fd8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd90:	4825      	ldr	r0, [pc, #148]	; (800fe28 <_svfiprintf_r+0x1ec>)
 800fd92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd96:	2206      	movs	r2, #6
 800fd98:	f7f0 faa2 	bl	80002e0 <memchr>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d038      	beq.n	800fe12 <_svfiprintf_r+0x1d6>
 800fda0:	4b22      	ldr	r3, [pc, #136]	; (800fe2c <_svfiprintf_r+0x1f0>)
 800fda2:	bb1b      	cbnz	r3, 800fdec <_svfiprintf_r+0x1b0>
 800fda4:	9b03      	ldr	r3, [sp, #12]
 800fda6:	3307      	adds	r3, #7
 800fda8:	f023 0307 	bic.w	r3, r3, #7
 800fdac:	3308      	adds	r3, #8
 800fdae:	9303      	str	r3, [sp, #12]
 800fdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdb2:	4433      	add	r3, r6
 800fdb4:	9309      	str	r3, [sp, #36]	; 0x24
 800fdb6:	e768      	b.n	800fc8a <_svfiprintf_r+0x4e>
 800fdb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdbc:	460c      	mov	r4, r1
 800fdbe:	2001      	movs	r0, #1
 800fdc0:	e7a6      	b.n	800fd10 <_svfiprintf_r+0xd4>
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	3401      	adds	r4, #1
 800fdc6:	9305      	str	r3, [sp, #20]
 800fdc8:	4619      	mov	r1, r3
 800fdca:	f04f 0c0a 	mov.w	ip, #10
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdd4:	3a30      	subs	r2, #48	; 0x30
 800fdd6:	2a09      	cmp	r2, #9
 800fdd8:	d903      	bls.n	800fde2 <_svfiprintf_r+0x1a6>
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d0c6      	beq.n	800fd6c <_svfiprintf_r+0x130>
 800fdde:	9105      	str	r1, [sp, #20]
 800fde0:	e7c4      	b.n	800fd6c <_svfiprintf_r+0x130>
 800fde2:	fb0c 2101 	mla	r1, ip, r1, r2
 800fde6:	4604      	mov	r4, r0
 800fde8:	2301      	movs	r3, #1
 800fdea:	e7f0      	b.n	800fdce <_svfiprintf_r+0x192>
 800fdec:	ab03      	add	r3, sp, #12
 800fdee:	9300      	str	r3, [sp, #0]
 800fdf0:	462a      	mov	r2, r5
 800fdf2:	4b0f      	ldr	r3, [pc, #60]	; (800fe30 <_svfiprintf_r+0x1f4>)
 800fdf4:	a904      	add	r1, sp, #16
 800fdf6:	4638      	mov	r0, r7
 800fdf8:	f7fd ff82 	bl	800dd00 <_printf_float>
 800fdfc:	1c42      	adds	r2, r0, #1
 800fdfe:	4606      	mov	r6, r0
 800fe00:	d1d6      	bne.n	800fdb0 <_svfiprintf_r+0x174>
 800fe02:	89ab      	ldrh	r3, [r5, #12]
 800fe04:	065b      	lsls	r3, r3, #25
 800fe06:	f53f af2d 	bmi.w	800fc64 <_svfiprintf_r+0x28>
 800fe0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe0c:	b01d      	add	sp, #116	; 0x74
 800fe0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe12:	ab03      	add	r3, sp, #12
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	462a      	mov	r2, r5
 800fe18:	4b05      	ldr	r3, [pc, #20]	; (800fe30 <_svfiprintf_r+0x1f4>)
 800fe1a:	a904      	add	r1, sp, #16
 800fe1c:	4638      	mov	r0, r7
 800fe1e:	f7fe f9f7 	bl	800e210 <_printf_i>
 800fe22:	e7eb      	b.n	800fdfc <_svfiprintf_r+0x1c0>
 800fe24:	08011ec4 	.word	0x08011ec4
 800fe28:	08011ece 	.word	0x08011ece
 800fe2c:	0800dd01 	.word	0x0800dd01
 800fe30:	0800fb89 	.word	0x0800fb89
 800fe34:	08011eca 	.word	0x08011eca

0800fe38 <__sfputc_r>:
 800fe38:	6893      	ldr	r3, [r2, #8]
 800fe3a:	3b01      	subs	r3, #1
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	b410      	push	{r4}
 800fe40:	6093      	str	r3, [r2, #8]
 800fe42:	da08      	bge.n	800fe56 <__sfputc_r+0x1e>
 800fe44:	6994      	ldr	r4, [r2, #24]
 800fe46:	42a3      	cmp	r3, r4
 800fe48:	db01      	blt.n	800fe4e <__sfputc_r+0x16>
 800fe4a:	290a      	cmp	r1, #10
 800fe4c:	d103      	bne.n	800fe56 <__sfputc_r+0x1e>
 800fe4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe52:	f000 b9e3 	b.w	801021c <__swbuf_r>
 800fe56:	6813      	ldr	r3, [r2, #0]
 800fe58:	1c58      	adds	r0, r3, #1
 800fe5a:	6010      	str	r0, [r2, #0]
 800fe5c:	7019      	strb	r1, [r3, #0]
 800fe5e:	4608      	mov	r0, r1
 800fe60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe64:	4770      	bx	lr

0800fe66 <__sfputs_r>:
 800fe66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe68:	4606      	mov	r6, r0
 800fe6a:	460f      	mov	r7, r1
 800fe6c:	4614      	mov	r4, r2
 800fe6e:	18d5      	adds	r5, r2, r3
 800fe70:	42ac      	cmp	r4, r5
 800fe72:	d101      	bne.n	800fe78 <__sfputs_r+0x12>
 800fe74:	2000      	movs	r0, #0
 800fe76:	e007      	b.n	800fe88 <__sfputs_r+0x22>
 800fe78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe7c:	463a      	mov	r2, r7
 800fe7e:	4630      	mov	r0, r6
 800fe80:	f7ff ffda 	bl	800fe38 <__sfputc_r>
 800fe84:	1c43      	adds	r3, r0, #1
 800fe86:	d1f3      	bne.n	800fe70 <__sfputs_r+0xa>
 800fe88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe8c <_vfiprintf_r>:
 800fe8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe90:	460d      	mov	r5, r1
 800fe92:	b09d      	sub	sp, #116	; 0x74
 800fe94:	4614      	mov	r4, r2
 800fe96:	4698      	mov	r8, r3
 800fe98:	4606      	mov	r6, r0
 800fe9a:	b118      	cbz	r0, 800fea4 <_vfiprintf_r+0x18>
 800fe9c:	6a03      	ldr	r3, [r0, #32]
 800fe9e:	b90b      	cbnz	r3, 800fea4 <_vfiprintf_r+0x18>
 800fea0:	f7fe fb64 	bl	800e56c <__sinit>
 800fea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fea6:	07d9      	lsls	r1, r3, #31
 800fea8:	d405      	bmi.n	800feb6 <_vfiprintf_r+0x2a>
 800feaa:	89ab      	ldrh	r3, [r5, #12]
 800feac:	059a      	lsls	r2, r3, #22
 800feae:	d402      	bmi.n	800feb6 <_vfiprintf_r+0x2a>
 800feb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800feb2:	f7fe fc94 	bl	800e7de <__retarget_lock_acquire_recursive>
 800feb6:	89ab      	ldrh	r3, [r5, #12]
 800feb8:	071b      	lsls	r3, r3, #28
 800feba:	d501      	bpl.n	800fec0 <_vfiprintf_r+0x34>
 800febc:	692b      	ldr	r3, [r5, #16]
 800febe:	b99b      	cbnz	r3, 800fee8 <_vfiprintf_r+0x5c>
 800fec0:	4629      	mov	r1, r5
 800fec2:	4630      	mov	r0, r6
 800fec4:	f000 f9e8 	bl	8010298 <__swsetup_r>
 800fec8:	b170      	cbz	r0, 800fee8 <_vfiprintf_r+0x5c>
 800feca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fecc:	07dc      	lsls	r4, r3, #31
 800fece:	d504      	bpl.n	800feda <_vfiprintf_r+0x4e>
 800fed0:	f04f 30ff 	mov.w	r0, #4294967295
 800fed4:	b01d      	add	sp, #116	; 0x74
 800fed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feda:	89ab      	ldrh	r3, [r5, #12]
 800fedc:	0598      	lsls	r0, r3, #22
 800fede:	d4f7      	bmi.n	800fed0 <_vfiprintf_r+0x44>
 800fee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fee2:	f7fe fc7d 	bl	800e7e0 <__retarget_lock_release_recursive>
 800fee6:	e7f3      	b.n	800fed0 <_vfiprintf_r+0x44>
 800fee8:	2300      	movs	r3, #0
 800feea:	9309      	str	r3, [sp, #36]	; 0x24
 800feec:	2320      	movs	r3, #32
 800feee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fef2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fef6:	2330      	movs	r3, #48	; 0x30
 800fef8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80100ac <_vfiprintf_r+0x220>
 800fefc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff00:	f04f 0901 	mov.w	r9, #1
 800ff04:	4623      	mov	r3, r4
 800ff06:	469a      	mov	sl, r3
 800ff08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff0c:	b10a      	cbz	r2, 800ff12 <_vfiprintf_r+0x86>
 800ff0e:	2a25      	cmp	r2, #37	; 0x25
 800ff10:	d1f9      	bne.n	800ff06 <_vfiprintf_r+0x7a>
 800ff12:	ebba 0b04 	subs.w	fp, sl, r4
 800ff16:	d00b      	beq.n	800ff30 <_vfiprintf_r+0xa4>
 800ff18:	465b      	mov	r3, fp
 800ff1a:	4622      	mov	r2, r4
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f7ff ffa1 	bl	800fe66 <__sfputs_r>
 800ff24:	3001      	adds	r0, #1
 800ff26:	f000 80a9 	beq.w	801007c <_vfiprintf_r+0x1f0>
 800ff2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff2c:	445a      	add	r2, fp
 800ff2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ff30:	f89a 3000 	ldrb.w	r3, [sl]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f000 80a1 	beq.w	801007c <_vfiprintf_r+0x1f0>
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff44:	f10a 0a01 	add.w	sl, sl, #1
 800ff48:	9304      	str	r3, [sp, #16]
 800ff4a:	9307      	str	r3, [sp, #28]
 800ff4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff50:	931a      	str	r3, [sp, #104]	; 0x68
 800ff52:	4654      	mov	r4, sl
 800ff54:	2205      	movs	r2, #5
 800ff56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff5a:	4854      	ldr	r0, [pc, #336]	; (80100ac <_vfiprintf_r+0x220>)
 800ff5c:	f7f0 f9c0 	bl	80002e0 <memchr>
 800ff60:	9a04      	ldr	r2, [sp, #16]
 800ff62:	b9d8      	cbnz	r0, 800ff9c <_vfiprintf_r+0x110>
 800ff64:	06d1      	lsls	r1, r2, #27
 800ff66:	bf44      	itt	mi
 800ff68:	2320      	movmi	r3, #32
 800ff6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff6e:	0713      	lsls	r3, r2, #28
 800ff70:	bf44      	itt	mi
 800ff72:	232b      	movmi	r3, #43	; 0x2b
 800ff74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff78:	f89a 3000 	ldrb.w	r3, [sl]
 800ff7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ff7e:	d015      	beq.n	800ffac <_vfiprintf_r+0x120>
 800ff80:	9a07      	ldr	r2, [sp, #28]
 800ff82:	4654      	mov	r4, sl
 800ff84:	2000      	movs	r0, #0
 800ff86:	f04f 0c0a 	mov.w	ip, #10
 800ff8a:	4621      	mov	r1, r4
 800ff8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff90:	3b30      	subs	r3, #48	; 0x30
 800ff92:	2b09      	cmp	r3, #9
 800ff94:	d94d      	bls.n	8010032 <_vfiprintf_r+0x1a6>
 800ff96:	b1b0      	cbz	r0, 800ffc6 <_vfiprintf_r+0x13a>
 800ff98:	9207      	str	r2, [sp, #28]
 800ff9a:	e014      	b.n	800ffc6 <_vfiprintf_r+0x13a>
 800ff9c:	eba0 0308 	sub.w	r3, r0, r8
 800ffa0:	fa09 f303 	lsl.w	r3, r9, r3
 800ffa4:	4313      	orrs	r3, r2
 800ffa6:	9304      	str	r3, [sp, #16]
 800ffa8:	46a2      	mov	sl, r4
 800ffaa:	e7d2      	b.n	800ff52 <_vfiprintf_r+0xc6>
 800ffac:	9b03      	ldr	r3, [sp, #12]
 800ffae:	1d19      	adds	r1, r3, #4
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	9103      	str	r1, [sp, #12]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	bfbb      	ittet	lt
 800ffb8:	425b      	neglt	r3, r3
 800ffba:	f042 0202 	orrlt.w	r2, r2, #2
 800ffbe:	9307      	strge	r3, [sp, #28]
 800ffc0:	9307      	strlt	r3, [sp, #28]
 800ffc2:	bfb8      	it	lt
 800ffc4:	9204      	strlt	r2, [sp, #16]
 800ffc6:	7823      	ldrb	r3, [r4, #0]
 800ffc8:	2b2e      	cmp	r3, #46	; 0x2e
 800ffca:	d10c      	bne.n	800ffe6 <_vfiprintf_r+0x15a>
 800ffcc:	7863      	ldrb	r3, [r4, #1]
 800ffce:	2b2a      	cmp	r3, #42	; 0x2a
 800ffd0:	d134      	bne.n	801003c <_vfiprintf_r+0x1b0>
 800ffd2:	9b03      	ldr	r3, [sp, #12]
 800ffd4:	1d1a      	adds	r2, r3, #4
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	9203      	str	r2, [sp, #12]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	bfb8      	it	lt
 800ffde:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffe2:	3402      	adds	r4, #2
 800ffe4:	9305      	str	r3, [sp, #20]
 800ffe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80100bc <_vfiprintf_r+0x230>
 800ffea:	7821      	ldrb	r1, [r4, #0]
 800ffec:	2203      	movs	r2, #3
 800ffee:	4650      	mov	r0, sl
 800fff0:	f7f0 f976 	bl	80002e0 <memchr>
 800fff4:	b138      	cbz	r0, 8010006 <_vfiprintf_r+0x17a>
 800fff6:	9b04      	ldr	r3, [sp, #16]
 800fff8:	eba0 000a 	sub.w	r0, r0, sl
 800fffc:	2240      	movs	r2, #64	; 0x40
 800fffe:	4082      	lsls	r2, r0
 8010000:	4313      	orrs	r3, r2
 8010002:	3401      	adds	r4, #1
 8010004:	9304      	str	r3, [sp, #16]
 8010006:	f814 1b01 	ldrb.w	r1, [r4], #1
 801000a:	4829      	ldr	r0, [pc, #164]	; (80100b0 <_vfiprintf_r+0x224>)
 801000c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010010:	2206      	movs	r2, #6
 8010012:	f7f0 f965 	bl	80002e0 <memchr>
 8010016:	2800      	cmp	r0, #0
 8010018:	d03f      	beq.n	801009a <_vfiprintf_r+0x20e>
 801001a:	4b26      	ldr	r3, [pc, #152]	; (80100b4 <_vfiprintf_r+0x228>)
 801001c:	bb1b      	cbnz	r3, 8010066 <_vfiprintf_r+0x1da>
 801001e:	9b03      	ldr	r3, [sp, #12]
 8010020:	3307      	adds	r3, #7
 8010022:	f023 0307 	bic.w	r3, r3, #7
 8010026:	3308      	adds	r3, #8
 8010028:	9303      	str	r3, [sp, #12]
 801002a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801002c:	443b      	add	r3, r7
 801002e:	9309      	str	r3, [sp, #36]	; 0x24
 8010030:	e768      	b.n	800ff04 <_vfiprintf_r+0x78>
 8010032:	fb0c 3202 	mla	r2, ip, r2, r3
 8010036:	460c      	mov	r4, r1
 8010038:	2001      	movs	r0, #1
 801003a:	e7a6      	b.n	800ff8a <_vfiprintf_r+0xfe>
 801003c:	2300      	movs	r3, #0
 801003e:	3401      	adds	r4, #1
 8010040:	9305      	str	r3, [sp, #20]
 8010042:	4619      	mov	r1, r3
 8010044:	f04f 0c0a 	mov.w	ip, #10
 8010048:	4620      	mov	r0, r4
 801004a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801004e:	3a30      	subs	r2, #48	; 0x30
 8010050:	2a09      	cmp	r2, #9
 8010052:	d903      	bls.n	801005c <_vfiprintf_r+0x1d0>
 8010054:	2b00      	cmp	r3, #0
 8010056:	d0c6      	beq.n	800ffe6 <_vfiprintf_r+0x15a>
 8010058:	9105      	str	r1, [sp, #20]
 801005a:	e7c4      	b.n	800ffe6 <_vfiprintf_r+0x15a>
 801005c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010060:	4604      	mov	r4, r0
 8010062:	2301      	movs	r3, #1
 8010064:	e7f0      	b.n	8010048 <_vfiprintf_r+0x1bc>
 8010066:	ab03      	add	r3, sp, #12
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	462a      	mov	r2, r5
 801006c:	4b12      	ldr	r3, [pc, #72]	; (80100b8 <_vfiprintf_r+0x22c>)
 801006e:	a904      	add	r1, sp, #16
 8010070:	4630      	mov	r0, r6
 8010072:	f7fd fe45 	bl	800dd00 <_printf_float>
 8010076:	4607      	mov	r7, r0
 8010078:	1c78      	adds	r0, r7, #1
 801007a:	d1d6      	bne.n	801002a <_vfiprintf_r+0x19e>
 801007c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801007e:	07d9      	lsls	r1, r3, #31
 8010080:	d405      	bmi.n	801008e <_vfiprintf_r+0x202>
 8010082:	89ab      	ldrh	r3, [r5, #12]
 8010084:	059a      	lsls	r2, r3, #22
 8010086:	d402      	bmi.n	801008e <_vfiprintf_r+0x202>
 8010088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801008a:	f7fe fba9 	bl	800e7e0 <__retarget_lock_release_recursive>
 801008e:	89ab      	ldrh	r3, [r5, #12]
 8010090:	065b      	lsls	r3, r3, #25
 8010092:	f53f af1d 	bmi.w	800fed0 <_vfiprintf_r+0x44>
 8010096:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010098:	e71c      	b.n	800fed4 <_vfiprintf_r+0x48>
 801009a:	ab03      	add	r3, sp, #12
 801009c:	9300      	str	r3, [sp, #0]
 801009e:	462a      	mov	r2, r5
 80100a0:	4b05      	ldr	r3, [pc, #20]	; (80100b8 <_vfiprintf_r+0x22c>)
 80100a2:	a904      	add	r1, sp, #16
 80100a4:	4630      	mov	r0, r6
 80100a6:	f7fe f8b3 	bl	800e210 <_printf_i>
 80100aa:	e7e4      	b.n	8010076 <_vfiprintf_r+0x1ea>
 80100ac:	08011ec4 	.word	0x08011ec4
 80100b0:	08011ece 	.word	0x08011ece
 80100b4:	0800dd01 	.word	0x0800dd01
 80100b8:	0800fe67 	.word	0x0800fe67
 80100bc:	08011eca 	.word	0x08011eca

080100c0 <__sflush_r>:
 80100c0:	898a      	ldrh	r2, [r1, #12]
 80100c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c6:	4605      	mov	r5, r0
 80100c8:	0710      	lsls	r0, r2, #28
 80100ca:	460c      	mov	r4, r1
 80100cc:	d458      	bmi.n	8010180 <__sflush_r+0xc0>
 80100ce:	684b      	ldr	r3, [r1, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	dc05      	bgt.n	80100e0 <__sflush_r+0x20>
 80100d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	dc02      	bgt.n	80100e0 <__sflush_r+0x20>
 80100da:	2000      	movs	r0, #0
 80100dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100e2:	2e00      	cmp	r6, #0
 80100e4:	d0f9      	beq.n	80100da <__sflush_r+0x1a>
 80100e6:	2300      	movs	r3, #0
 80100e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80100ec:	682f      	ldr	r7, [r5, #0]
 80100ee:	6a21      	ldr	r1, [r4, #32]
 80100f0:	602b      	str	r3, [r5, #0]
 80100f2:	d032      	beq.n	801015a <__sflush_r+0x9a>
 80100f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80100f6:	89a3      	ldrh	r3, [r4, #12]
 80100f8:	075a      	lsls	r2, r3, #29
 80100fa:	d505      	bpl.n	8010108 <__sflush_r+0x48>
 80100fc:	6863      	ldr	r3, [r4, #4]
 80100fe:	1ac0      	subs	r0, r0, r3
 8010100:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010102:	b10b      	cbz	r3, 8010108 <__sflush_r+0x48>
 8010104:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010106:	1ac0      	subs	r0, r0, r3
 8010108:	2300      	movs	r3, #0
 801010a:	4602      	mov	r2, r0
 801010c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801010e:	6a21      	ldr	r1, [r4, #32]
 8010110:	4628      	mov	r0, r5
 8010112:	47b0      	blx	r6
 8010114:	1c43      	adds	r3, r0, #1
 8010116:	89a3      	ldrh	r3, [r4, #12]
 8010118:	d106      	bne.n	8010128 <__sflush_r+0x68>
 801011a:	6829      	ldr	r1, [r5, #0]
 801011c:	291d      	cmp	r1, #29
 801011e:	d82b      	bhi.n	8010178 <__sflush_r+0xb8>
 8010120:	4a29      	ldr	r2, [pc, #164]	; (80101c8 <__sflush_r+0x108>)
 8010122:	410a      	asrs	r2, r1
 8010124:	07d6      	lsls	r6, r2, #31
 8010126:	d427      	bmi.n	8010178 <__sflush_r+0xb8>
 8010128:	2200      	movs	r2, #0
 801012a:	6062      	str	r2, [r4, #4]
 801012c:	04d9      	lsls	r1, r3, #19
 801012e:	6922      	ldr	r2, [r4, #16]
 8010130:	6022      	str	r2, [r4, #0]
 8010132:	d504      	bpl.n	801013e <__sflush_r+0x7e>
 8010134:	1c42      	adds	r2, r0, #1
 8010136:	d101      	bne.n	801013c <__sflush_r+0x7c>
 8010138:	682b      	ldr	r3, [r5, #0]
 801013a:	b903      	cbnz	r3, 801013e <__sflush_r+0x7e>
 801013c:	6560      	str	r0, [r4, #84]	; 0x54
 801013e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010140:	602f      	str	r7, [r5, #0]
 8010142:	2900      	cmp	r1, #0
 8010144:	d0c9      	beq.n	80100da <__sflush_r+0x1a>
 8010146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801014a:	4299      	cmp	r1, r3
 801014c:	d002      	beq.n	8010154 <__sflush_r+0x94>
 801014e:	4628      	mov	r0, r5
 8010150:	f7ff f94a 	bl	800f3e8 <_free_r>
 8010154:	2000      	movs	r0, #0
 8010156:	6360      	str	r0, [r4, #52]	; 0x34
 8010158:	e7c0      	b.n	80100dc <__sflush_r+0x1c>
 801015a:	2301      	movs	r3, #1
 801015c:	4628      	mov	r0, r5
 801015e:	47b0      	blx	r6
 8010160:	1c41      	adds	r1, r0, #1
 8010162:	d1c8      	bne.n	80100f6 <__sflush_r+0x36>
 8010164:	682b      	ldr	r3, [r5, #0]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d0c5      	beq.n	80100f6 <__sflush_r+0x36>
 801016a:	2b1d      	cmp	r3, #29
 801016c:	d001      	beq.n	8010172 <__sflush_r+0xb2>
 801016e:	2b16      	cmp	r3, #22
 8010170:	d101      	bne.n	8010176 <__sflush_r+0xb6>
 8010172:	602f      	str	r7, [r5, #0]
 8010174:	e7b1      	b.n	80100da <__sflush_r+0x1a>
 8010176:	89a3      	ldrh	r3, [r4, #12]
 8010178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801017c:	81a3      	strh	r3, [r4, #12]
 801017e:	e7ad      	b.n	80100dc <__sflush_r+0x1c>
 8010180:	690f      	ldr	r7, [r1, #16]
 8010182:	2f00      	cmp	r7, #0
 8010184:	d0a9      	beq.n	80100da <__sflush_r+0x1a>
 8010186:	0793      	lsls	r3, r2, #30
 8010188:	680e      	ldr	r6, [r1, #0]
 801018a:	bf08      	it	eq
 801018c:	694b      	ldreq	r3, [r1, #20]
 801018e:	600f      	str	r7, [r1, #0]
 8010190:	bf18      	it	ne
 8010192:	2300      	movne	r3, #0
 8010194:	eba6 0807 	sub.w	r8, r6, r7
 8010198:	608b      	str	r3, [r1, #8]
 801019a:	f1b8 0f00 	cmp.w	r8, #0
 801019e:	dd9c      	ble.n	80100da <__sflush_r+0x1a>
 80101a0:	6a21      	ldr	r1, [r4, #32]
 80101a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80101a4:	4643      	mov	r3, r8
 80101a6:	463a      	mov	r2, r7
 80101a8:	4628      	mov	r0, r5
 80101aa:	47b0      	blx	r6
 80101ac:	2800      	cmp	r0, #0
 80101ae:	dc06      	bgt.n	80101be <__sflush_r+0xfe>
 80101b0:	89a3      	ldrh	r3, [r4, #12]
 80101b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101b6:	81a3      	strh	r3, [r4, #12]
 80101b8:	f04f 30ff 	mov.w	r0, #4294967295
 80101bc:	e78e      	b.n	80100dc <__sflush_r+0x1c>
 80101be:	4407      	add	r7, r0
 80101c0:	eba8 0800 	sub.w	r8, r8, r0
 80101c4:	e7e9      	b.n	801019a <__sflush_r+0xda>
 80101c6:	bf00      	nop
 80101c8:	dfbffffe 	.word	0xdfbffffe

080101cc <_fflush_r>:
 80101cc:	b538      	push	{r3, r4, r5, lr}
 80101ce:	690b      	ldr	r3, [r1, #16]
 80101d0:	4605      	mov	r5, r0
 80101d2:	460c      	mov	r4, r1
 80101d4:	b913      	cbnz	r3, 80101dc <_fflush_r+0x10>
 80101d6:	2500      	movs	r5, #0
 80101d8:	4628      	mov	r0, r5
 80101da:	bd38      	pop	{r3, r4, r5, pc}
 80101dc:	b118      	cbz	r0, 80101e6 <_fflush_r+0x1a>
 80101de:	6a03      	ldr	r3, [r0, #32]
 80101e0:	b90b      	cbnz	r3, 80101e6 <_fflush_r+0x1a>
 80101e2:	f7fe f9c3 	bl	800e56c <__sinit>
 80101e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d0f3      	beq.n	80101d6 <_fflush_r+0xa>
 80101ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80101f0:	07d0      	lsls	r0, r2, #31
 80101f2:	d404      	bmi.n	80101fe <_fflush_r+0x32>
 80101f4:	0599      	lsls	r1, r3, #22
 80101f6:	d402      	bmi.n	80101fe <_fflush_r+0x32>
 80101f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101fa:	f7fe faf0 	bl	800e7de <__retarget_lock_acquire_recursive>
 80101fe:	4628      	mov	r0, r5
 8010200:	4621      	mov	r1, r4
 8010202:	f7ff ff5d 	bl	80100c0 <__sflush_r>
 8010206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010208:	07da      	lsls	r2, r3, #31
 801020a:	4605      	mov	r5, r0
 801020c:	d4e4      	bmi.n	80101d8 <_fflush_r+0xc>
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	059b      	lsls	r3, r3, #22
 8010212:	d4e1      	bmi.n	80101d8 <_fflush_r+0xc>
 8010214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010216:	f7fe fae3 	bl	800e7e0 <__retarget_lock_release_recursive>
 801021a:	e7dd      	b.n	80101d8 <_fflush_r+0xc>

0801021c <__swbuf_r>:
 801021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801021e:	460e      	mov	r6, r1
 8010220:	4614      	mov	r4, r2
 8010222:	4605      	mov	r5, r0
 8010224:	b118      	cbz	r0, 801022e <__swbuf_r+0x12>
 8010226:	6a03      	ldr	r3, [r0, #32]
 8010228:	b90b      	cbnz	r3, 801022e <__swbuf_r+0x12>
 801022a:	f7fe f99f 	bl	800e56c <__sinit>
 801022e:	69a3      	ldr	r3, [r4, #24]
 8010230:	60a3      	str	r3, [r4, #8]
 8010232:	89a3      	ldrh	r3, [r4, #12]
 8010234:	071a      	lsls	r2, r3, #28
 8010236:	d525      	bpl.n	8010284 <__swbuf_r+0x68>
 8010238:	6923      	ldr	r3, [r4, #16]
 801023a:	b31b      	cbz	r3, 8010284 <__swbuf_r+0x68>
 801023c:	6823      	ldr	r3, [r4, #0]
 801023e:	6922      	ldr	r2, [r4, #16]
 8010240:	1a98      	subs	r0, r3, r2
 8010242:	6963      	ldr	r3, [r4, #20]
 8010244:	b2f6      	uxtb	r6, r6
 8010246:	4283      	cmp	r3, r0
 8010248:	4637      	mov	r7, r6
 801024a:	dc04      	bgt.n	8010256 <__swbuf_r+0x3a>
 801024c:	4621      	mov	r1, r4
 801024e:	4628      	mov	r0, r5
 8010250:	f7ff ffbc 	bl	80101cc <_fflush_r>
 8010254:	b9e0      	cbnz	r0, 8010290 <__swbuf_r+0x74>
 8010256:	68a3      	ldr	r3, [r4, #8]
 8010258:	3b01      	subs	r3, #1
 801025a:	60a3      	str	r3, [r4, #8]
 801025c:	6823      	ldr	r3, [r4, #0]
 801025e:	1c5a      	adds	r2, r3, #1
 8010260:	6022      	str	r2, [r4, #0]
 8010262:	701e      	strb	r6, [r3, #0]
 8010264:	6962      	ldr	r2, [r4, #20]
 8010266:	1c43      	adds	r3, r0, #1
 8010268:	429a      	cmp	r2, r3
 801026a:	d004      	beq.n	8010276 <__swbuf_r+0x5a>
 801026c:	89a3      	ldrh	r3, [r4, #12]
 801026e:	07db      	lsls	r3, r3, #31
 8010270:	d506      	bpl.n	8010280 <__swbuf_r+0x64>
 8010272:	2e0a      	cmp	r6, #10
 8010274:	d104      	bne.n	8010280 <__swbuf_r+0x64>
 8010276:	4621      	mov	r1, r4
 8010278:	4628      	mov	r0, r5
 801027a:	f7ff ffa7 	bl	80101cc <_fflush_r>
 801027e:	b938      	cbnz	r0, 8010290 <__swbuf_r+0x74>
 8010280:	4638      	mov	r0, r7
 8010282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010284:	4621      	mov	r1, r4
 8010286:	4628      	mov	r0, r5
 8010288:	f000 f806 	bl	8010298 <__swsetup_r>
 801028c:	2800      	cmp	r0, #0
 801028e:	d0d5      	beq.n	801023c <__swbuf_r+0x20>
 8010290:	f04f 37ff 	mov.w	r7, #4294967295
 8010294:	e7f4      	b.n	8010280 <__swbuf_r+0x64>
	...

08010298 <__swsetup_r>:
 8010298:	b538      	push	{r3, r4, r5, lr}
 801029a:	4b2a      	ldr	r3, [pc, #168]	; (8010344 <__swsetup_r+0xac>)
 801029c:	4605      	mov	r5, r0
 801029e:	6818      	ldr	r0, [r3, #0]
 80102a0:	460c      	mov	r4, r1
 80102a2:	b118      	cbz	r0, 80102ac <__swsetup_r+0x14>
 80102a4:	6a03      	ldr	r3, [r0, #32]
 80102a6:	b90b      	cbnz	r3, 80102ac <__swsetup_r+0x14>
 80102a8:	f7fe f960 	bl	800e56c <__sinit>
 80102ac:	89a3      	ldrh	r3, [r4, #12]
 80102ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102b2:	0718      	lsls	r0, r3, #28
 80102b4:	d422      	bmi.n	80102fc <__swsetup_r+0x64>
 80102b6:	06d9      	lsls	r1, r3, #27
 80102b8:	d407      	bmi.n	80102ca <__swsetup_r+0x32>
 80102ba:	2309      	movs	r3, #9
 80102bc:	602b      	str	r3, [r5, #0]
 80102be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102c2:	81a3      	strh	r3, [r4, #12]
 80102c4:	f04f 30ff 	mov.w	r0, #4294967295
 80102c8:	e034      	b.n	8010334 <__swsetup_r+0x9c>
 80102ca:	0758      	lsls	r0, r3, #29
 80102cc:	d512      	bpl.n	80102f4 <__swsetup_r+0x5c>
 80102ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102d0:	b141      	cbz	r1, 80102e4 <__swsetup_r+0x4c>
 80102d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102d6:	4299      	cmp	r1, r3
 80102d8:	d002      	beq.n	80102e0 <__swsetup_r+0x48>
 80102da:	4628      	mov	r0, r5
 80102dc:	f7ff f884 	bl	800f3e8 <_free_r>
 80102e0:	2300      	movs	r3, #0
 80102e2:	6363      	str	r3, [r4, #52]	; 0x34
 80102e4:	89a3      	ldrh	r3, [r4, #12]
 80102e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102ea:	81a3      	strh	r3, [r4, #12]
 80102ec:	2300      	movs	r3, #0
 80102ee:	6063      	str	r3, [r4, #4]
 80102f0:	6923      	ldr	r3, [r4, #16]
 80102f2:	6023      	str	r3, [r4, #0]
 80102f4:	89a3      	ldrh	r3, [r4, #12]
 80102f6:	f043 0308 	orr.w	r3, r3, #8
 80102fa:	81a3      	strh	r3, [r4, #12]
 80102fc:	6923      	ldr	r3, [r4, #16]
 80102fe:	b94b      	cbnz	r3, 8010314 <__swsetup_r+0x7c>
 8010300:	89a3      	ldrh	r3, [r4, #12]
 8010302:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801030a:	d003      	beq.n	8010314 <__swsetup_r+0x7c>
 801030c:	4621      	mov	r1, r4
 801030e:	4628      	mov	r0, r5
 8010310:	f000 f8c0 	bl	8010494 <__smakebuf_r>
 8010314:	89a0      	ldrh	r0, [r4, #12]
 8010316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801031a:	f010 0301 	ands.w	r3, r0, #1
 801031e:	d00a      	beq.n	8010336 <__swsetup_r+0x9e>
 8010320:	2300      	movs	r3, #0
 8010322:	60a3      	str	r3, [r4, #8]
 8010324:	6963      	ldr	r3, [r4, #20]
 8010326:	425b      	negs	r3, r3
 8010328:	61a3      	str	r3, [r4, #24]
 801032a:	6923      	ldr	r3, [r4, #16]
 801032c:	b943      	cbnz	r3, 8010340 <__swsetup_r+0xa8>
 801032e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010332:	d1c4      	bne.n	80102be <__swsetup_r+0x26>
 8010334:	bd38      	pop	{r3, r4, r5, pc}
 8010336:	0781      	lsls	r1, r0, #30
 8010338:	bf58      	it	pl
 801033a:	6963      	ldrpl	r3, [r4, #20]
 801033c:	60a3      	str	r3, [r4, #8]
 801033e:	e7f4      	b.n	801032a <__swsetup_r+0x92>
 8010340:	2000      	movs	r0, #0
 8010342:	e7f7      	b.n	8010334 <__swsetup_r+0x9c>
 8010344:	240007f4 	.word	0x240007f4

08010348 <memmove>:
 8010348:	4288      	cmp	r0, r1
 801034a:	b510      	push	{r4, lr}
 801034c:	eb01 0402 	add.w	r4, r1, r2
 8010350:	d902      	bls.n	8010358 <memmove+0x10>
 8010352:	4284      	cmp	r4, r0
 8010354:	4623      	mov	r3, r4
 8010356:	d807      	bhi.n	8010368 <memmove+0x20>
 8010358:	1e43      	subs	r3, r0, #1
 801035a:	42a1      	cmp	r1, r4
 801035c:	d008      	beq.n	8010370 <memmove+0x28>
 801035e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010366:	e7f8      	b.n	801035a <memmove+0x12>
 8010368:	4402      	add	r2, r0
 801036a:	4601      	mov	r1, r0
 801036c:	428a      	cmp	r2, r1
 801036e:	d100      	bne.n	8010372 <memmove+0x2a>
 8010370:	bd10      	pop	{r4, pc}
 8010372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801037a:	e7f7      	b.n	801036c <memmove+0x24>

0801037c <__assert_func>:
 801037c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801037e:	4614      	mov	r4, r2
 8010380:	461a      	mov	r2, r3
 8010382:	4b09      	ldr	r3, [pc, #36]	; (80103a8 <__assert_func+0x2c>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4605      	mov	r5, r0
 8010388:	68d8      	ldr	r0, [r3, #12]
 801038a:	b14c      	cbz	r4, 80103a0 <__assert_func+0x24>
 801038c:	4b07      	ldr	r3, [pc, #28]	; (80103ac <__assert_func+0x30>)
 801038e:	9100      	str	r1, [sp, #0]
 8010390:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010394:	4906      	ldr	r1, [pc, #24]	; (80103b0 <__assert_func+0x34>)
 8010396:	462b      	mov	r3, r5
 8010398:	f000 f844 	bl	8010424 <fiprintf>
 801039c:	f000 f8d8 	bl	8010550 <abort>
 80103a0:	4b04      	ldr	r3, [pc, #16]	; (80103b4 <__assert_func+0x38>)
 80103a2:	461c      	mov	r4, r3
 80103a4:	e7f3      	b.n	801038e <__assert_func+0x12>
 80103a6:	bf00      	nop
 80103a8:	240007f4 	.word	0x240007f4
 80103ac:	08011edf 	.word	0x08011edf
 80103b0:	08011eec 	.word	0x08011eec
 80103b4:	08011f1a 	.word	0x08011f1a

080103b8 <_calloc_r>:
 80103b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103ba:	fba1 2402 	umull	r2, r4, r1, r2
 80103be:	b94c      	cbnz	r4, 80103d4 <_calloc_r+0x1c>
 80103c0:	4611      	mov	r1, r2
 80103c2:	9201      	str	r2, [sp, #4]
 80103c4:	f7fd fb50 	bl	800da68 <_malloc_r>
 80103c8:	9a01      	ldr	r2, [sp, #4]
 80103ca:	4605      	mov	r5, r0
 80103cc:	b930      	cbnz	r0, 80103dc <_calloc_r+0x24>
 80103ce:	4628      	mov	r0, r5
 80103d0:	b003      	add	sp, #12
 80103d2:	bd30      	pop	{r4, r5, pc}
 80103d4:	220c      	movs	r2, #12
 80103d6:	6002      	str	r2, [r0, #0]
 80103d8:	2500      	movs	r5, #0
 80103da:	e7f8      	b.n	80103ce <_calloc_r+0x16>
 80103dc:	4621      	mov	r1, r4
 80103de:	f7fe f970 	bl	800e6c2 <memset>
 80103e2:	e7f4      	b.n	80103ce <_calloc_r+0x16>

080103e4 <__ascii_mbtowc>:
 80103e4:	b082      	sub	sp, #8
 80103e6:	b901      	cbnz	r1, 80103ea <__ascii_mbtowc+0x6>
 80103e8:	a901      	add	r1, sp, #4
 80103ea:	b142      	cbz	r2, 80103fe <__ascii_mbtowc+0x1a>
 80103ec:	b14b      	cbz	r3, 8010402 <__ascii_mbtowc+0x1e>
 80103ee:	7813      	ldrb	r3, [r2, #0]
 80103f0:	600b      	str	r3, [r1, #0]
 80103f2:	7812      	ldrb	r2, [r2, #0]
 80103f4:	1e10      	subs	r0, r2, #0
 80103f6:	bf18      	it	ne
 80103f8:	2001      	movne	r0, #1
 80103fa:	b002      	add	sp, #8
 80103fc:	4770      	bx	lr
 80103fe:	4610      	mov	r0, r2
 8010400:	e7fb      	b.n	80103fa <__ascii_mbtowc+0x16>
 8010402:	f06f 0001 	mvn.w	r0, #1
 8010406:	e7f8      	b.n	80103fa <__ascii_mbtowc+0x16>

08010408 <__ascii_wctomb>:
 8010408:	b149      	cbz	r1, 801041e <__ascii_wctomb+0x16>
 801040a:	2aff      	cmp	r2, #255	; 0xff
 801040c:	bf85      	ittet	hi
 801040e:	238a      	movhi	r3, #138	; 0x8a
 8010410:	6003      	strhi	r3, [r0, #0]
 8010412:	700a      	strbls	r2, [r1, #0]
 8010414:	f04f 30ff 	movhi.w	r0, #4294967295
 8010418:	bf98      	it	ls
 801041a:	2001      	movls	r0, #1
 801041c:	4770      	bx	lr
 801041e:	4608      	mov	r0, r1
 8010420:	4770      	bx	lr
	...

08010424 <fiprintf>:
 8010424:	b40e      	push	{r1, r2, r3}
 8010426:	b503      	push	{r0, r1, lr}
 8010428:	4601      	mov	r1, r0
 801042a:	ab03      	add	r3, sp, #12
 801042c:	4805      	ldr	r0, [pc, #20]	; (8010444 <fiprintf+0x20>)
 801042e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010432:	6800      	ldr	r0, [r0, #0]
 8010434:	9301      	str	r3, [sp, #4]
 8010436:	f7ff fd29 	bl	800fe8c <_vfiprintf_r>
 801043a:	b002      	add	sp, #8
 801043c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010440:	b003      	add	sp, #12
 8010442:	4770      	bx	lr
 8010444:	240007f4 	.word	0x240007f4

08010448 <__swhatbuf_r>:
 8010448:	b570      	push	{r4, r5, r6, lr}
 801044a:	460c      	mov	r4, r1
 801044c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010450:	2900      	cmp	r1, #0
 8010452:	b096      	sub	sp, #88	; 0x58
 8010454:	4615      	mov	r5, r2
 8010456:	461e      	mov	r6, r3
 8010458:	da0d      	bge.n	8010476 <__swhatbuf_r+0x2e>
 801045a:	89a3      	ldrh	r3, [r4, #12]
 801045c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010460:	f04f 0100 	mov.w	r1, #0
 8010464:	bf0c      	ite	eq
 8010466:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801046a:	2340      	movne	r3, #64	; 0x40
 801046c:	2000      	movs	r0, #0
 801046e:	6031      	str	r1, [r6, #0]
 8010470:	602b      	str	r3, [r5, #0]
 8010472:	b016      	add	sp, #88	; 0x58
 8010474:	bd70      	pop	{r4, r5, r6, pc}
 8010476:	466a      	mov	r2, sp
 8010478:	f000 f848 	bl	801050c <_fstat_r>
 801047c:	2800      	cmp	r0, #0
 801047e:	dbec      	blt.n	801045a <__swhatbuf_r+0x12>
 8010480:	9901      	ldr	r1, [sp, #4]
 8010482:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010486:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801048a:	4259      	negs	r1, r3
 801048c:	4159      	adcs	r1, r3
 801048e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010492:	e7eb      	b.n	801046c <__swhatbuf_r+0x24>

08010494 <__smakebuf_r>:
 8010494:	898b      	ldrh	r3, [r1, #12]
 8010496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010498:	079d      	lsls	r5, r3, #30
 801049a:	4606      	mov	r6, r0
 801049c:	460c      	mov	r4, r1
 801049e:	d507      	bpl.n	80104b0 <__smakebuf_r+0x1c>
 80104a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80104a4:	6023      	str	r3, [r4, #0]
 80104a6:	6123      	str	r3, [r4, #16]
 80104a8:	2301      	movs	r3, #1
 80104aa:	6163      	str	r3, [r4, #20]
 80104ac:	b002      	add	sp, #8
 80104ae:	bd70      	pop	{r4, r5, r6, pc}
 80104b0:	ab01      	add	r3, sp, #4
 80104b2:	466a      	mov	r2, sp
 80104b4:	f7ff ffc8 	bl	8010448 <__swhatbuf_r>
 80104b8:	9900      	ldr	r1, [sp, #0]
 80104ba:	4605      	mov	r5, r0
 80104bc:	4630      	mov	r0, r6
 80104be:	f7fd fad3 	bl	800da68 <_malloc_r>
 80104c2:	b948      	cbnz	r0, 80104d8 <__smakebuf_r+0x44>
 80104c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104c8:	059a      	lsls	r2, r3, #22
 80104ca:	d4ef      	bmi.n	80104ac <__smakebuf_r+0x18>
 80104cc:	f023 0303 	bic.w	r3, r3, #3
 80104d0:	f043 0302 	orr.w	r3, r3, #2
 80104d4:	81a3      	strh	r3, [r4, #12]
 80104d6:	e7e3      	b.n	80104a0 <__smakebuf_r+0xc>
 80104d8:	89a3      	ldrh	r3, [r4, #12]
 80104da:	6020      	str	r0, [r4, #0]
 80104dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104e0:	81a3      	strh	r3, [r4, #12]
 80104e2:	9b00      	ldr	r3, [sp, #0]
 80104e4:	6163      	str	r3, [r4, #20]
 80104e6:	9b01      	ldr	r3, [sp, #4]
 80104e8:	6120      	str	r0, [r4, #16]
 80104ea:	b15b      	cbz	r3, 8010504 <__smakebuf_r+0x70>
 80104ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104f0:	4630      	mov	r0, r6
 80104f2:	f000 f81d 	bl	8010530 <_isatty_r>
 80104f6:	b128      	cbz	r0, 8010504 <__smakebuf_r+0x70>
 80104f8:	89a3      	ldrh	r3, [r4, #12]
 80104fa:	f023 0303 	bic.w	r3, r3, #3
 80104fe:	f043 0301 	orr.w	r3, r3, #1
 8010502:	81a3      	strh	r3, [r4, #12]
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	431d      	orrs	r5, r3
 8010508:	81a5      	strh	r5, [r4, #12]
 801050a:	e7cf      	b.n	80104ac <__smakebuf_r+0x18>

0801050c <_fstat_r>:
 801050c:	b538      	push	{r3, r4, r5, lr}
 801050e:	4d07      	ldr	r5, [pc, #28]	; (801052c <_fstat_r+0x20>)
 8010510:	2300      	movs	r3, #0
 8010512:	4604      	mov	r4, r0
 8010514:	4608      	mov	r0, r1
 8010516:	4611      	mov	r1, r2
 8010518:	602b      	str	r3, [r5, #0]
 801051a:	f000 f909 	bl	8010730 <_fstat>
 801051e:	1c43      	adds	r3, r0, #1
 8010520:	d102      	bne.n	8010528 <_fstat_r+0x1c>
 8010522:	682b      	ldr	r3, [r5, #0]
 8010524:	b103      	cbz	r3, 8010528 <_fstat_r+0x1c>
 8010526:	6023      	str	r3, [r4, #0]
 8010528:	bd38      	pop	{r3, r4, r5, pc}
 801052a:	bf00      	nop
 801052c:	24002b00 	.word	0x24002b00

08010530 <_isatty_r>:
 8010530:	b538      	push	{r3, r4, r5, lr}
 8010532:	4d06      	ldr	r5, [pc, #24]	; (801054c <_isatty_r+0x1c>)
 8010534:	2300      	movs	r3, #0
 8010536:	4604      	mov	r4, r0
 8010538:	4608      	mov	r0, r1
 801053a:	602b      	str	r3, [r5, #0]
 801053c:	f000 f908 	bl	8010750 <_isatty>
 8010540:	1c43      	adds	r3, r0, #1
 8010542:	d102      	bne.n	801054a <_isatty_r+0x1a>
 8010544:	682b      	ldr	r3, [r5, #0]
 8010546:	b103      	cbz	r3, 801054a <_isatty_r+0x1a>
 8010548:	6023      	str	r3, [r4, #0]
 801054a:	bd38      	pop	{r3, r4, r5, pc}
 801054c:	24002b00 	.word	0x24002b00

08010550 <abort>:
 8010550:	b508      	push	{r3, lr}
 8010552:	2006      	movs	r0, #6
 8010554:	f000 f82c 	bl	80105b0 <raise>
 8010558:	2001      	movs	r0, #1
 801055a:	f000 f921 	bl	80107a0 <_exit>

0801055e <_raise_r>:
 801055e:	291f      	cmp	r1, #31
 8010560:	b538      	push	{r3, r4, r5, lr}
 8010562:	4604      	mov	r4, r0
 8010564:	460d      	mov	r5, r1
 8010566:	d904      	bls.n	8010572 <_raise_r+0x14>
 8010568:	2316      	movs	r3, #22
 801056a:	6003      	str	r3, [r0, #0]
 801056c:	f04f 30ff 	mov.w	r0, #4294967295
 8010570:	bd38      	pop	{r3, r4, r5, pc}
 8010572:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010574:	b112      	cbz	r2, 801057c <_raise_r+0x1e>
 8010576:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801057a:	b94b      	cbnz	r3, 8010590 <_raise_r+0x32>
 801057c:	4620      	mov	r0, r4
 801057e:	f000 f831 	bl	80105e4 <_getpid_r>
 8010582:	462a      	mov	r2, r5
 8010584:	4601      	mov	r1, r0
 8010586:	4620      	mov	r0, r4
 8010588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801058c:	f000 b818 	b.w	80105c0 <_kill_r>
 8010590:	2b01      	cmp	r3, #1
 8010592:	d00a      	beq.n	80105aa <_raise_r+0x4c>
 8010594:	1c59      	adds	r1, r3, #1
 8010596:	d103      	bne.n	80105a0 <_raise_r+0x42>
 8010598:	2316      	movs	r3, #22
 801059a:	6003      	str	r3, [r0, #0]
 801059c:	2001      	movs	r0, #1
 801059e:	e7e7      	b.n	8010570 <_raise_r+0x12>
 80105a0:	2400      	movs	r4, #0
 80105a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80105a6:	4628      	mov	r0, r5
 80105a8:	4798      	blx	r3
 80105aa:	2000      	movs	r0, #0
 80105ac:	e7e0      	b.n	8010570 <_raise_r+0x12>
	...

080105b0 <raise>:
 80105b0:	4b02      	ldr	r3, [pc, #8]	; (80105bc <raise+0xc>)
 80105b2:	4601      	mov	r1, r0
 80105b4:	6818      	ldr	r0, [r3, #0]
 80105b6:	f7ff bfd2 	b.w	801055e <_raise_r>
 80105ba:	bf00      	nop
 80105bc:	240007f4 	.word	0x240007f4

080105c0 <_kill_r>:
 80105c0:	b538      	push	{r3, r4, r5, lr}
 80105c2:	4d07      	ldr	r5, [pc, #28]	; (80105e0 <_kill_r+0x20>)
 80105c4:	2300      	movs	r3, #0
 80105c6:	4604      	mov	r4, r0
 80105c8:	4608      	mov	r0, r1
 80105ca:	4611      	mov	r1, r2
 80105cc:	602b      	str	r3, [r5, #0]
 80105ce:	f000 f8c7 	bl	8010760 <_kill>
 80105d2:	1c43      	adds	r3, r0, #1
 80105d4:	d102      	bne.n	80105dc <_kill_r+0x1c>
 80105d6:	682b      	ldr	r3, [r5, #0]
 80105d8:	b103      	cbz	r3, 80105dc <_kill_r+0x1c>
 80105da:	6023      	str	r3, [r4, #0]
 80105dc:	bd38      	pop	{r3, r4, r5, pc}
 80105de:	bf00      	nop
 80105e0:	24002b00 	.word	0x24002b00

080105e4 <_getpid_r>:
 80105e4:	f000 b8ac 	b.w	8010740 <_getpid>

080105e8 <expf>:
 80105e8:	ee10 2a10 	vmov	r2, s0
 80105ec:	f240 412a 	movw	r1, #1066	; 0x42a
 80105f0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80105f4:	428b      	cmp	r3, r1
 80105f6:	b430      	push	{r4, r5}
 80105f8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80105fc:	d92a      	bls.n	8010654 <expf+0x6c>
 80105fe:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8010602:	d058      	beq.n	80106b6 <expf+0xce>
 8010604:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8010608:	d303      	bcc.n	8010612 <expf+0x2a>
 801060a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801060e:	bc30      	pop	{r4, r5}
 8010610:	4770      	bx	lr
 8010612:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80106bc <expf+0xd4>
 8010616:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801061a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801061e:	dd03      	ble.n	8010628 <expf+0x40>
 8010620:	bc30      	pop	{r4, r5}
 8010622:	2000      	movs	r0, #0
 8010624:	f000 b876 	b.w	8010714 <__math_oflowf>
 8010628:	eddf 7a25 	vldr	s15, [pc, #148]	; 80106c0 <expf+0xd8>
 801062c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010634:	d503      	bpl.n	801063e <expf+0x56>
 8010636:	bc30      	pop	{r4, r5}
 8010638:	2000      	movs	r0, #0
 801063a:	f000 b85f 	b.w	80106fc <__math_uflowf>
 801063e:	eddf 7a21 	vldr	s15, [pc, #132]	; 80106c4 <expf+0xdc>
 8010642:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801064a:	d503      	bpl.n	8010654 <expf+0x6c>
 801064c:	bc30      	pop	{r4, r5}
 801064e:	2000      	movs	r0, #0
 8010650:	f000 b85a 	b.w	8010708 <__math_may_uflowf>
 8010654:	4b1c      	ldr	r3, [pc, #112]	; (80106c8 <expf+0xe0>)
 8010656:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801065a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801065e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8010662:	eeb0 7b44 	vmov.f64	d7, d4
 8010666:	eea5 7b06 	vfma.f64	d7, d5, d6
 801066a:	ee17 0a10 	vmov	r0, s14
 801066e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010672:	f000 021f 	and.w	r2, r0, #31
 8010676:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801067a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801067e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010682:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8010686:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801068a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801068e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8010692:	684d      	ldr	r5, [r1, #4]
 8010694:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8010698:	2100      	movs	r1, #0
 801069a:	190a      	adds	r2, r1, r4
 801069c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80106a0:	eea5 0b07 	vfma.f64	d0, d5, d7
 80106a4:	ec43 2b17 	vmov	d7, r2, r3
 80106a8:	eea6 0b04 	vfma.f64	d0, d6, d4
 80106ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 80106b0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80106b4:	e7ab      	b.n	801060e <expf+0x26>
 80106b6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80106cc <expf+0xe4>
 80106ba:	e7a8      	b.n	801060e <expf+0x26>
 80106bc:	42b17217 	.word	0x42b17217
 80106c0:	c2cff1b4 	.word	0xc2cff1b4
 80106c4:	c2ce8ecf 	.word	0xc2ce8ecf
 80106c8:	08012020 	.word	0x08012020
 80106cc:	00000000 	.word	0x00000000

080106d0 <with_errnof>:
 80106d0:	b513      	push	{r0, r1, r4, lr}
 80106d2:	4604      	mov	r4, r0
 80106d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80106d8:	f7fe f856 	bl	800e788 <__errno>
 80106dc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80106e0:	6004      	str	r4, [r0, #0]
 80106e2:	b002      	add	sp, #8
 80106e4:	bd10      	pop	{r4, pc}

080106e6 <xflowf>:
 80106e6:	b130      	cbz	r0, 80106f6 <xflowf+0x10>
 80106e8:	eef1 7a40 	vneg.f32	s15, s0
 80106ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 80106f0:	2022      	movs	r0, #34	; 0x22
 80106f2:	f7ff bfed 	b.w	80106d0 <with_errnof>
 80106f6:	eef0 7a40 	vmov.f32	s15, s0
 80106fa:	e7f7      	b.n	80106ec <xflowf+0x6>

080106fc <__math_uflowf>:
 80106fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010704 <__math_uflowf+0x8>
 8010700:	f7ff bff1 	b.w	80106e6 <xflowf>
 8010704:	10000000 	.word	0x10000000

08010708 <__math_may_uflowf>:
 8010708:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010710 <__math_may_uflowf+0x8>
 801070c:	f7ff bfeb 	b.w	80106e6 <xflowf>
 8010710:	1a200000 	.word	0x1a200000

08010714 <__math_oflowf>:
 8010714:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801071c <__math_oflowf+0x8>
 8010718:	f7ff bfe5 	b.w	80106e6 <xflowf>
 801071c:	70000000 	.word	0x70000000

08010720 <_close>:
 8010720:	4b02      	ldr	r3, [pc, #8]	; (801072c <_close+0xc>)
 8010722:	2258      	movs	r2, #88	; 0x58
 8010724:	601a      	str	r2, [r3, #0]
 8010726:	f04f 30ff 	mov.w	r0, #4294967295
 801072a:	4770      	bx	lr
 801072c:	24002b00 	.word	0x24002b00

08010730 <_fstat>:
 8010730:	4b02      	ldr	r3, [pc, #8]	; (801073c <_fstat+0xc>)
 8010732:	2258      	movs	r2, #88	; 0x58
 8010734:	601a      	str	r2, [r3, #0]
 8010736:	f04f 30ff 	mov.w	r0, #4294967295
 801073a:	4770      	bx	lr
 801073c:	24002b00 	.word	0x24002b00

08010740 <_getpid>:
 8010740:	4b02      	ldr	r3, [pc, #8]	; (801074c <_getpid+0xc>)
 8010742:	2258      	movs	r2, #88	; 0x58
 8010744:	601a      	str	r2, [r3, #0]
 8010746:	f04f 30ff 	mov.w	r0, #4294967295
 801074a:	4770      	bx	lr
 801074c:	24002b00 	.word	0x24002b00

08010750 <_isatty>:
 8010750:	4b02      	ldr	r3, [pc, #8]	; (801075c <_isatty+0xc>)
 8010752:	2258      	movs	r2, #88	; 0x58
 8010754:	601a      	str	r2, [r3, #0]
 8010756:	2000      	movs	r0, #0
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop
 801075c:	24002b00 	.word	0x24002b00

08010760 <_kill>:
 8010760:	4b02      	ldr	r3, [pc, #8]	; (801076c <_kill+0xc>)
 8010762:	2258      	movs	r2, #88	; 0x58
 8010764:	601a      	str	r2, [r3, #0]
 8010766:	f04f 30ff 	mov.w	r0, #4294967295
 801076a:	4770      	bx	lr
 801076c:	24002b00 	.word	0x24002b00

08010770 <_lseek>:
 8010770:	4b02      	ldr	r3, [pc, #8]	; (801077c <_lseek+0xc>)
 8010772:	2258      	movs	r2, #88	; 0x58
 8010774:	601a      	str	r2, [r3, #0]
 8010776:	f04f 30ff 	mov.w	r0, #4294967295
 801077a:	4770      	bx	lr
 801077c:	24002b00 	.word	0x24002b00

08010780 <_read>:
 8010780:	4b02      	ldr	r3, [pc, #8]	; (801078c <_read+0xc>)
 8010782:	2258      	movs	r2, #88	; 0x58
 8010784:	601a      	str	r2, [r3, #0]
 8010786:	f04f 30ff 	mov.w	r0, #4294967295
 801078a:	4770      	bx	lr
 801078c:	24002b00 	.word	0x24002b00

08010790 <_write>:
 8010790:	4b02      	ldr	r3, [pc, #8]	; (801079c <_write+0xc>)
 8010792:	2258      	movs	r2, #88	; 0x58
 8010794:	601a      	str	r2, [r3, #0]
 8010796:	f04f 30ff 	mov.w	r0, #4294967295
 801079a:	4770      	bx	lr
 801079c:	24002b00 	.word	0x24002b00

080107a0 <_exit>:
 80107a0:	e7fe      	b.n	80107a0 <_exit>
	...

080107a4 <_init>:
 80107a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a6:	bf00      	nop
 80107a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107aa:	bc08      	pop	{r3}
 80107ac:	469e      	mov	lr, r3
 80107ae:	4770      	bx	lr

080107b0 <_fini>:
 80107b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b2:	bf00      	nop
 80107b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107b6:	bc08      	pop	{r3}
 80107b8:	469e      	mov	lr, r3
 80107ba:	4770      	bx	lr
